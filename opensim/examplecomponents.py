# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.2
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _examplecomponents
else:
    import _examplecomponents

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


import weakref

import opensim.actuators
import opensim.simulation
import opensim.common
import opensim.simbody
class ToyReflexController(opensim.simulation.Controller):
    r"""Proxy of C++ OpenSim::ToyReflexController class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def safeDownCast(obj):
        r"""
        safeDownCast(OpenSimObject obj) -> ToyReflexController

        Parameters
        ----------
        obj: OpenSim::Object *

        """
        return _examplecomponents.ToyReflexController_safeDownCast(obj)

    def assign(self, aObject):
        r"""
        assign(ToyReflexController self, OpenSimObject aObject)

        Parameters
        ----------
        aObject: OpenSim::Object &

        """
        return _examplecomponents.ToyReflexController_assign(self, aObject)

    @staticmethod
    def getClassName():
        r"""getClassName() -> std::string const &"""
        return _examplecomponents.ToyReflexController_getClassName()

    def clone(self):
        r"""clone(ToyReflexController self) -> ToyReflexController"""
        return _examplecomponents.ToyReflexController_clone(self)

    def getConcreteClassName(self):
        r"""getConcreteClassName(ToyReflexController self) -> std::string const &"""
        return _examplecomponents.ToyReflexController_getConcreteClassName(self)

    def copyProperty_gain(self, source):
        r"""
        copyProperty_gain(ToyReflexController self, ToyReflexController source)

        Parameters
        ----------
        source: OpenSim::ToyReflexController::Self const &

        """
        return _examplecomponents.ToyReflexController_copyProperty_gain(self, source)

    def append_gain(self, value):
        r"""
        append_gain(ToyReflexController self, double const & value) -> int

        Parameters
        ----------
        value: double const &

        """
        return _examplecomponents.ToyReflexController_append_gain(self, value)

    def constructProperty_gain(self, initValue):
        r"""
        constructProperty_gain(ToyReflexController self, double const & initValue)

        Parameters
        ----------
        initValue: double const &

        """
        return _examplecomponents.ToyReflexController_constructProperty_gain(self, initValue)

    def get_gain(self, *args):
        r"""
        get_gain(ToyReflexController self, int i) -> double const

        Parameters
        ----------
        i: int

        get_gain(ToyReflexController self) -> double const &
        """
        return _examplecomponents.ToyReflexController_get_gain(self, *args)

    def upd_gain(self, *args):
        r"""
        upd_gain(ToyReflexController self, int i) -> double

        Parameters
        ----------
        i: int

        upd_gain(ToyReflexController self) -> double &
        """
        return _examplecomponents.ToyReflexController_upd_gain(self, *args)

    def set_gain(self, *args):
        r"""
        set_gain(ToyReflexController self, int i, double const & value)

        Parameters
        ----------
        i: int
        value: double const &

        set_gain(ToyReflexController self, double const & value)

        Parameters
        ----------
        value: double const &

        """
        return _examplecomponents.ToyReflexController_set_gain(self, *args)

    def __init__(self, *args):
        r"""
        __init__(ToyReflexController self) -> ToyReflexController
        __init__(ToyReflexController self, double gain) -> ToyReflexController

        Parameters
        ----------
        gain: double

        """
        _examplecomponents.ToyReflexController_swiginit(self, _examplecomponents.new_ToyReflexController(*args))

    def computeControls(self, s, controls):
        r"""
        computeControls(ToyReflexController self, State s, Vector controls)

        Parameters
        ----------
        s: SimTK::State const &
        controls: SimTK::Vector &

        """
        return _examplecomponents.ToyReflexController_computeControls(self, s, controls)
    __swig_destroy__ = _examplecomponents.delete_ToyReflexController

# Register ToyReflexController in _examplecomponents:
_examplecomponents.ToyReflexController_swigregister(ToyReflexController)

def ToyReflexController_safeDownCast(obj):
    r"""
    ToyReflexController_safeDownCast(OpenSimObject obj) -> ToyReflexController

    Parameters
    ----------
    obj: OpenSim::Object *

    """
    return _examplecomponents.ToyReflexController_safeDownCast(obj)

def ToyReflexController_getClassName():
    r"""ToyReflexController_getClassName() -> std::string const &"""
    return _examplecomponents.ToyReflexController_getClassName()

class ToyPropMyoController(opensim.simulation.Controller):
    r"""Proxy of C++ OpenSim::ToyPropMyoController class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def safeDownCast(obj):
        r"""
        safeDownCast(OpenSimObject obj) -> ToyPropMyoController

        Parameters
        ----------
        obj: OpenSim::Object *

        """
        return _examplecomponents.ToyPropMyoController_safeDownCast(obj)

    def assign(self, aObject):
        r"""
        assign(ToyPropMyoController self, OpenSimObject aObject)

        Parameters
        ----------
        aObject: OpenSim::Object &

        """
        return _examplecomponents.ToyPropMyoController_assign(self, aObject)

    @staticmethod
    def getClassName():
        r"""getClassName() -> std::string const &"""
        return _examplecomponents.ToyPropMyoController_getClassName()

    def clone(self):
        r"""clone(ToyPropMyoController self) -> ToyPropMyoController"""
        return _examplecomponents.ToyPropMyoController_clone(self)

    def getConcreteClassName(self):
        r"""getConcreteClassName(ToyPropMyoController self) -> std::string const &"""
        return _examplecomponents.ToyPropMyoController_getConcreteClassName(self)

    def copyProperty_gain(self, source):
        r"""
        copyProperty_gain(ToyPropMyoController self, ToyPropMyoController source)

        Parameters
        ----------
        source: OpenSim::ToyPropMyoController::Self const &

        """
        return _examplecomponents.ToyPropMyoController_copyProperty_gain(self, source)

    def append_gain(self, value):
        r"""
        append_gain(ToyPropMyoController self, double const & value) -> int

        Parameters
        ----------
        value: double const &

        """
        return _examplecomponents.ToyPropMyoController_append_gain(self, value)

    def constructProperty_gain(self, initValue):
        r"""
        constructProperty_gain(ToyPropMyoController self, double const & initValue)

        Parameters
        ----------
        initValue: double const &

        """
        return _examplecomponents.ToyPropMyoController_constructProperty_gain(self, initValue)

    def get_gain(self, *args):
        r"""
        get_gain(ToyPropMyoController self, int i) -> double const

        Parameters
        ----------
        i: int

        get_gain(ToyPropMyoController self) -> double const &
        """
        return _examplecomponents.ToyPropMyoController_get_gain(self, *args)

    def upd_gain(self, *args):
        r"""
        upd_gain(ToyPropMyoController self, int i) -> double

        Parameters
        ----------
        i: int

        upd_gain(ToyPropMyoController self) -> double &
        """
        return _examplecomponents.ToyPropMyoController_upd_gain(self, *args)

    def set_gain(self, *args):
        r"""
        set_gain(ToyPropMyoController self, int i, double const & value)

        Parameters
        ----------
        i: int
        value: double const &

        set_gain(ToyPropMyoController self, double const & value)

        Parameters
        ----------
        value: double const &

        """
        return _examplecomponents.ToyPropMyoController_set_gain(self, *args)
    PropertyIndex_socket_actuator = property(_examplecomponents.ToyPropMyoController_PropertyIndex_socket_actuator_get, _examplecomponents.ToyPropMyoController_PropertyIndex_socket_actuator_set, doc=r"""PropertyIndex_socket_actuator : PropertyIndex""")

    def connectSocket_actuator(self, object):
        r"""
        connectSocket_actuator(ToyPropMyoController self, OpenSimObject object)

        Parameters
        ----------
        object: OpenSim::Object const &

        """
        return _examplecomponents.ToyPropMyoController_connectSocket_actuator(self, object)
    PropertyIndex_input_activation = property(_examplecomponents.ToyPropMyoController_PropertyIndex_input_activation_get, _examplecomponents.ToyPropMyoController_PropertyIndex_input_activation_set, doc=r"""PropertyIndex_input_activation : PropertyIndex""")

    def connectInput_activation(self, *args):
        r"""
        connectInput_activation(ToyPropMyoController self, AbstractOutput output, std::string const & alias="")

        Parameters
        ----------
        output: OpenSim::AbstractOutput const &
        alias: std::string const &

        connectInput_activation(ToyPropMyoController self, AbstractChannel channel, std::string const & alias="")

        Parameters
        ----------
        channel: OpenSim::AbstractChannel const &
        alias: std::string const &

        """
        return _examplecomponents.ToyPropMyoController_connectInput_activation(self, *args)
    _has_output_myo_control = property(_examplecomponents.ToyPropMyoController__has_output_myo_control_get, _examplecomponents.ToyPropMyoController__has_output_myo_control_set, doc=r"""_has_output_myo_control : bool""")

    def __init__(self):
        r"""__init__(ToyPropMyoController self) -> ToyPropMyoController"""
        _examplecomponents.ToyPropMyoController_swiginit(self, _examplecomponents.new_ToyPropMyoController())

    def computeControl(self, s):
        r"""
        computeControl(ToyPropMyoController self, State s) -> double

        Parameters
        ----------
        s: SimTK::State const &

        """
        return _examplecomponents.ToyPropMyoController_computeControl(self, s)

    def computeControls(self, s, controls):
        r"""
        computeControls(ToyPropMyoController self, State s, Vector controls)

        Parameters
        ----------
        s: SimTK::State const &
        controls: SimTK::Vector &

        """
        return _examplecomponents.ToyPropMyoController_computeControls(self, s, controls)
    __swig_destroy__ = _examplecomponents.delete_ToyPropMyoController

# Register ToyPropMyoController in _examplecomponents:
_examplecomponents.ToyPropMyoController_swigregister(ToyPropMyoController)

def ToyPropMyoController_safeDownCast(obj):
    r"""
    ToyPropMyoController_safeDownCast(OpenSimObject obj) -> ToyPropMyoController

    Parameters
    ----------
    obj: OpenSim::Object *

    """
    return _examplecomponents.ToyPropMyoController_safeDownCast(obj)

def ToyPropMyoController_getClassName():
    r"""ToyPropMyoController_getClassName() -> std::string const &"""
    return _examplecomponents.ToyPropMyoController_getClassName()

class HopperDevice(opensim.simulation.ModelComponent):
    r"""Proxy of C++ OpenSim::HopperDevice class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def safeDownCast(obj):
        r"""
        safeDownCast(OpenSimObject obj) -> HopperDevice

        Parameters
        ----------
        obj: OpenSim::Object *

        """
        return _examplecomponents.HopperDevice_safeDownCast(obj)

    def assign(self, aObject):
        r"""
        assign(HopperDevice self, OpenSimObject aObject)

        Parameters
        ----------
        aObject: OpenSim::Object &

        """
        return _examplecomponents.HopperDevice_assign(self, aObject)

    @staticmethod
    def getClassName():
        r"""getClassName() -> std::string const &"""
        return _examplecomponents.HopperDevice_getClassName()

    def clone(self):
        r"""clone(HopperDevice self) -> HopperDevice"""
        return _examplecomponents.HopperDevice_clone(self)

    def getConcreteClassName(self):
        r"""getConcreteClassName(HopperDevice self) -> std::string const &"""
        return _examplecomponents.HopperDevice_getConcreteClassName(self)
    _has_output_length = property(_examplecomponents.HopperDevice__has_output_length_get, _examplecomponents.HopperDevice__has_output_length_set, doc=r"""_has_output_length : bool""")
    _has_output_speed = property(_examplecomponents.HopperDevice__has_output_speed_get, _examplecomponents.HopperDevice__has_output_speed_set, doc=r"""_has_output_speed : bool""")
    _has_output_tension = property(_examplecomponents.HopperDevice__has_output_tension_get, _examplecomponents.HopperDevice__has_output_tension_set, doc=r"""_has_output_tension : bool""")
    _has_output_power = property(_examplecomponents.HopperDevice__has_output_power_get, _examplecomponents.HopperDevice__has_output_power_set, doc=r"""_has_output_power : bool""")
    _has_output_height = property(_examplecomponents.HopperDevice__has_output_height_get, _examplecomponents.HopperDevice__has_output_height_set, doc=r"""_has_output_height : bool""")
    _has_output_com_height = property(_examplecomponents.HopperDevice__has_output_com_height_get, _examplecomponents.HopperDevice__has_output_com_height_set, doc=r"""_has_output_com_height : bool""")

    def copyProperty_actuator_name(self, source):
        r"""
        copyProperty_actuator_name(HopperDevice self, HopperDevice source)

        Parameters
        ----------
        source: OpenSim::HopperDevice::Self const &

        """
        return _examplecomponents.HopperDevice_copyProperty_actuator_name(self, source)

    def append_actuator_name(self, value):
        r"""
        append_actuator_name(HopperDevice self, std::string const & value) -> int

        Parameters
        ----------
        value: std::string const &

        """
        return _examplecomponents.HopperDevice_append_actuator_name(self, value)

    def constructProperty_actuator_name(self, initValue):
        r"""
        constructProperty_actuator_name(HopperDevice self, std::string const & initValue)

        Parameters
        ----------
        initValue: std::string const &

        """
        return _examplecomponents.HopperDevice_constructProperty_actuator_name(self, initValue)

    def get_actuator_name(self, *args):
        r"""
        get_actuator_name(HopperDevice self, int i) -> std::string const

        Parameters
        ----------
        i: int

        get_actuator_name(HopperDevice self) -> std::string const &
        """
        return _examplecomponents.HopperDevice_get_actuator_name(self, *args)

    def upd_actuator_name(self, *args):
        r"""
        upd_actuator_name(HopperDevice self, int i) -> std::string

        Parameters
        ----------
        i: int

        upd_actuator_name(HopperDevice self) -> std::string &
        """
        return _examplecomponents.HopperDevice_upd_actuator_name(self, *args)

    def set_actuator_name(self, *args):
        r"""
        set_actuator_name(HopperDevice self, int i, std::string const & value)

        Parameters
        ----------
        i: int
        value: std::string const &

        set_actuator_name(HopperDevice self, std::string const & value)

        Parameters
        ----------
        value: std::string const &

        """
        return _examplecomponents.HopperDevice_set_actuator_name(self, *args)

    def __init__(self):
        r"""__init__(HopperDevice self) -> HopperDevice"""
        _examplecomponents.HopperDevice_swiginit(self, _examplecomponents.new_HopperDevice())

    def getLength(self, s):
        r"""
        getLength(HopperDevice self, State s) -> double

        Parameters
        ----------
        s: SimTK::State const &

        """
        return _examplecomponents.HopperDevice_getLength(self, s)

    def getSpeed(self, s):
        r"""
        getSpeed(HopperDevice self, State s) -> double

        Parameters
        ----------
        s: SimTK::State const &

        """
        return _examplecomponents.HopperDevice_getSpeed(self, s)

    def getTension(self, s):
        r"""
        getTension(HopperDevice self, State s) -> double

        Parameters
        ----------
        s: SimTK::State const &

        """
        return _examplecomponents.HopperDevice_getTension(self, s)

    def getPower(self, s):
        r"""
        getPower(HopperDevice self, State s) -> double

        Parameters
        ----------
        s: SimTK::State const &

        """
        return _examplecomponents.HopperDevice_getPower(self, s)

    def getHeight(self, s):
        r"""
        getHeight(HopperDevice self, State s) -> double

        Parameters
        ----------
        s: SimTK::State const &

        """
        return _examplecomponents.HopperDevice_getHeight(self, s)

    def getCenterOfMassHeight(self, s):
        r"""
        getCenterOfMassHeight(HopperDevice self, State s) -> double

        Parameters
        ----------
        s: SimTK::State const &

        """
        return _examplecomponents.HopperDevice_getCenterOfMassHeight(self, s)
    __swig_destroy__ = _examplecomponents.delete_HopperDevice

# Register HopperDevice in _examplecomponents:
_examplecomponents.HopperDevice_swigregister(HopperDevice)

def HopperDevice_safeDownCast(obj):
    r"""
    HopperDevice_safeDownCast(OpenSimObject obj) -> HopperDevice

    Parameters
    ----------
    obj: OpenSim::Object *

    """
    return _examplecomponents.HopperDevice_safeDownCast(obj)

def HopperDevice_getClassName():
    r"""HopperDevice_getClassName() -> std::string const &"""
    return _examplecomponents.HopperDevice_getClassName()



