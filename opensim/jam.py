# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.2
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _jam
else:
    import _jam

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


import weakref

class SwigPyIterator(object):
    r"""Proxy of C++ swig::SwigPyIterator class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _jam.delete_SwigPyIterator

    def value(self):
        r"""value(SwigPyIterator self) -> PyObject *"""
        return _jam.SwigPyIterator_value(self)

    def incr(self, n=1):
        r"""
        incr(SwigPyIterator self, size_t n=1) -> SwigPyIterator

        Parameters
        ----------
        n: size_t

        """
        return _jam.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        r"""
        decr(SwigPyIterator self, size_t n=1) -> SwigPyIterator

        Parameters
        ----------
        n: size_t

        """
        return _jam.SwigPyIterator_decr(self, n)

    def distance(self, x):
        r"""
        distance(SwigPyIterator self, SwigPyIterator x) -> ptrdiff_t

        Parameters
        ----------
        x: swig::SwigPyIterator const &

        """
        return _jam.SwigPyIterator_distance(self, x)

    def equal(self, x):
        r"""
        equal(SwigPyIterator self, SwigPyIterator x) -> bool

        Parameters
        ----------
        x: swig::SwigPyIterator const &

        """
        return _jam.SwigPyIterator_equal(self, x)

    def copy(self):
        r"""copy(SwigPyIterator self) -> SwigPyIterator"""
        return _jam.SwigPyIterator_copy(self)

    def next(self):
        r"""next(SwigPyIterator self) -> PyObject *"""
        return _jam.SwigPyIterator_next(self)

    def __next__(self):
        r"""__next__(SwigPyIterator self) -> PyObject *"""
        return _jam.SwigPyIterator___next__(self)

    def previous(self):
        r"""previous(SwigPyIterator self) -> PyObject *"""
        return _jam.SwigPyIterator_previous(self)

    def advance(self, n):
        r"""
        advance(SwigPyIterator self, ptrdiff_t n) -> SwigPyIterator

        Parameters
        ----------
        n: ptrdiff_t

        """
        return _jam.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        r"""
        __eq__(SwigPyIterator self, SwigPyIterator x) -> bool

        Parameters
        ----------
        x: swig::SwigPyIterator const &

        """
        return _jam.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        r"""
        __ne__(SwigPyIterator self, SwigPyIterator x) -> bool

        Parameters
        ----------
        x: swig::SwigPyIterator const &

        """
        return _jam.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        r"""
        __iadd__(SwigPyIterator self, ptrdiff_t n) -> SwigPyIterator

        Parameters
        ----------
        n: ptrdiff_t

        """
        return _jam.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        r"""
        __isub__(SwigPyIterator self, ptrdiff_t n) -> SwigPyIterator

        Parameters
        ----------
        n: ptrdiff_t

        """
        return _jam.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        r"""
        __add__(SwigPyIterator self, ptrdiff_t n) -> SwigPyIterator

        Parameters
        ----------
        n: ptrdiff_t

        """
        return _jam.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        r"""
        __sub__(SwigPyIterator self, ptrdiff_t n) -> SwigPyIterator

        Parameters
        ----------
        n: ptrdiff_t

        __sub__(SwigPyIterator self, SwigPyIterator x) -> ptrdiff_t

        Parameters
        ----------
        x: swig::SwigPyIterator const &

        """
        return _jam.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self

# Register SwigPyIterator in _jam:
_jam.SwigPyIterator_swigregister(SwigPyIterator)

import opensim.common
import opensim.simbody
import opensim.simulation

def GetJAMVersionAndDate():
    r"""GetJAMVersionAndDate() -> std::string"""
    return _jam.GetJAMVersionAndDate()

def GetJAMVersion():
    r"""GetJAMVersion() -> std::string"""
    return _jam.GetJAMVersion()
class VTPFileAdapter(opensim.common.FileAdapter):
    r"""Proxy of C++ OpenSim::VTPFileAdapter class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(VTPFileAdapter self) -> VTPFileAdapter
        __init__(VTPFileAdapter self, VTPFileAdapter arg2) -> VTPFileAdapter

        Parameters
        ----------
        arg2: OpenSim::VTPFileAdapter const &

        """
        _jam.VTPFileAdapter_swiginit(self, _jam.new_VTPFileAdapter(*args))
    __swig_destroy__ = _jam.delete_VTPFileAdapter

    def clone(self):
        r"""clone(VTPFileAdapter self) -> VTPFileAdapter"""
        return _jam.VTPFileAdapter_clone(self)

    def write(self, fileName, filePath, frame_num):
        r"""
        write(VTPFileAdapter self, std::string const & fileName, std::string const & filePath, int const frame_num)

        Parameters
        ----------
        fileName: std::string const &
        filePath: std::string const &
        frame_num: int const

        """
        return _jam.VTPFileAdapter_write(self, fileName, filePath, frame_num)

    def appendFaceData(self, aFaceDataName, aFaceData):
        r"""
        appendFaceData(VTPFileAdapter self, std::string aFaceDataName, Vector aFaceData)

        Parameters
        ----------
        aFaceDataName: std::string
        aFaceData: SimTK::Vector

        """
        return _jam.VTPFileAdapter_appendFaceData(self, aFaceDataName, aFaceData)

    def appendPointData(self, aPointDataNames, aPointData):
        r"""
        appendPointData(VTPFileAdapter self, std::string aPointDataNames, Vector aPointData)

        Parameters
        ----------
        aPointDataNames: std::string
        aPointData: SimTK::Vector

        """
        return _jam.VTPFileAdapter_appendPointData(self, aPointDataNames, aPointData)

    def setDataFormat(self, format):
        r"""
        setDataFormat(VTPFileAdapter self, SimTK::String format)

        Parameters
        ----------
        format: SimTK::String

        """
        return _jam.VTPFileAdapter_setDataFormat(self, format)

    def setPointLocations(self, vertices):
        r"""
        setPointLocations(VTPFileAdapter self, RowVectorVec3 vertices)

        Parameters
        ----------
        vertices: SimTK::RowVector_< SimTK::Vec3 > const &

        """
        return _jam.VTPFileAdapter_setPointLocations(self, vertices)

    def setPolygonConnectivity(self, faces):
        r"""
        setPolygonConnectivity(VTPFileAdapter self, Matrix faces)

        Parameters
        ----------
        faces: SimTK::Matrix const &

        """
        return _jam.VTPFileAdapter_setPolygonConnectivity(self, faces)

    def setPolygonsFromMesh(self, mesh):
        r"""
        setPolygonsFromMesh(VTPFileAdapter self, PolygonalMesh mesh)

        Parameters
        ----------
        mesh: SimTK::PolygonalMesh const &

        """
        return _jam.VTPFileAdapter_setPolygonsFromMesh(self, mesh)

    def setLineConnectivity(self, line):
        r"""
        setLineConnectivity(VTPFileAdapter self, Vector line)

        Parameters
        ----------
        line: SimTK::Vector const &

        """
        return _jam.VTPFileAdapter_setLineConnectivity(self, line)

# Register VTPFileAdapter in _jam:
_jam.VTPFileAdapter_swigregister(VTPFileAdapter)

class H5FileAdapter(opensim.common.FileAdapter):
    r"""Proxy of C++ OpenSim::H5FileAdapter class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(H5FileAdapter self) -> H5FileAdapter
        __init__(H5FileAdapter self, H5FileAdapter arg2) -> H5FileAdapter

        Parameters
        ----------
        arg2: OpenSim::H5FileAdapter const &

        """
        _jam.H5FileAdapter_swiginit(self, _jam.new_H5FileAdapter(*args))
    __swig_destroy__ = _jam.delete_H5FileAdapter

    def clone(self):
        r"""clone(H5FileAdapter self) -> H5FileAdapter"""
        return _jam.H5FileAdapter_clone(self)

    def open(self, file_name):
        r"""
        open(H5FileAdapter self, std::string const & file_name)

        Parameters
        ----------
        file_name: std::string const &

        """
        return _jam.H5FileAdapter_open(self, file_name)

    def close(self):
        r"""close(H5FileAdapter self)"""
        return _jam.H5FileAdapter_close(self)

    def createGroup(self, new_group):
        r"""
        createGroup(H5FileAdapter self, std::string const & new_group)

        Parameters
        ----------
        new_group: std::string const &

        """
        return _jam.H5FileAdapter_createGroup(self, new_group)

    def writeDataSet(self, table, group_path):
        r"""
        writeDataSet(H5FileAdapter self, TimeSeriesTable table, std::string const group_path)

        Parameters
        ----------
        table: OpenSim::TimeSeriesTable const &
        group_path: std::string const

        """
        return _jam.H5FileAdapter_writeDataSet(self, table, group_path)

    def writeDataSet2(self, table, group_path):
        r"""
        writeDataSet2(H5FileAdapter self, TimeSeriesTable table, std::string const group_path)

        Parameters
        ----------
        table: OpenSim::TimeSeriesTable const &
        group_path: std::string const

        """
        return _jam.H5FileAdapter_writeDataSet2(self, table, group_path)

    def writeDataSetVec3(self, table, group_path):
        r"""
        writeDataSetVec3(H5FileAdapter self, TimeSeriesTableVec3 table, std::string const group_path)

        Parameters
        ----------
        table: OpenSim::TimeSeriesTableVec3 const &
        group_path: std::string const

        """
        return _jam.H5FileAdapter_writeDataSetVec3(self, table, group_path)

    def writeDataSetVector(self, table, group_path):
        r"""
        writeDataSetVector(H5FileAdapter self, TimeSeriesTable table, std::string const group_path)

        Parameters
        ----------
        table: OpenSim::TimeSeriesTable const &
        group_path: std::string const

        """
        return _jam.H5FileAdapter_writeDataSetVector(self, table, group_path)

    def writeDataSetSimTKVector(self, data_vector, dataset_path):
        r"""
        writeDataSetSimTKVector(H5FileAdapter self, Vector data_vector, std::string const dataset_path)

        Parameters
        ----------
        data_vector: SimTK::Vector const &
        dataset_path: std::string const

        """
        return _jam.H5FileAdapter_writeDataSetSimTKVector(self, data_vector, dataset_path)

    def writeDataSetSimTKVectorVec3(self, data_vector, dataset_path):
        r"""
        writeDataSetSimTKVectorVec3(H5FileAdapter self, VectorVec3 data_vector, std::string const dataset_path)

        Parameters
        ----------
        data_vector: SimTK::Vector_< SimTK::Vec3 > const &
        dataset_path: std::string const

        """
        return _jam.H5FileAdapter_writeDataSetSimTKVectorVec3(self, data_vector, dataset_path)

    def writeDataSetSimTKMatrix(self, data_matrix, dataset_path):
        r"""
        writeDataSetSimTKMatrix(H5FileAdapter self, Matrix data_matrix, std::string const dataset_path)

        Parameters
        ----------
        data_matrix: SimTK::Matrix const &
        dataset_path: std::string const

        """
        return _jam.H5FileAdapter_writeDataSetSimTKMatrix(self, data_matrix, dataset_path)

    def writeDataSetSimTKMatrixColumns(self, data, column_dataset_paths):
        r"""
        writeDataSetSimTKMatrixColumns(H5FileAdapter self, Matrix data, StdVectorString column_dataset_paths)

        Parameters
        ----------
        data: SimTK::Matrix const &
        column_dataset_paths: std::vector< std::string,std::allocator< std::string > >

        """
        return _jam.H5FileAdapter_writeDataSetSimTKMatrixColumns(self, data, column_dataset_paths)

    def writeDataSetSimTKMatrixVec3Columns(self, data, column_dataset_paths):
        r"""
        writeDataSetSimTKMatrixVec3Columns(H5FileAdapter self, MatrixVec3 data, StdVectorString column_dataset_paths)

        Parameters
        ----------
        data: SimTK::Matrix_< SimTK::Vec3 > const &
        column_dataset_paths: std::vector< std::string,std::allocator< std::string > >

        """
        return _jam.H5FileAdapter_writeDataSetSimTKMatrixVec3Columns(self, data, column_dataset_paths)

    def writeTimeDataSet(self, time):
        r"""
        writeTimeDataSet(H5FileAdapter self, ArrayDouble time)

        Parameters
        ----------
        time: OpenSim::Array< double > const &

        """
        return _jam.H5FileAdapter_writeTimeDataSet(self, time)

    def writeStatesDataSet(self, table):
        r"""
        writeStatesDataSet(H5FileAdapter self, TimeSeriesTable table)

        Parameters
        ----------
        table: OpenSim::TimeSeriesTable const &

        """
        return _jam.H5FileAdapter_writeStatesDataSet(self, table)

    def writeComponentGroupDataSet(self, group_name, names, output_double_names, output_double_values):
        r"""
        writeComponentGroupDataSet(H5FileAdapter self, std::string group_name, StdVectorString names, StdVectorString output_double_names, StdVectorMatrix output_double_values)

        Parameters
        ----------
        group_name: std::string
        names: std::vector< std::string,std::allocator< std::string > >
        output_double_names: std::vector< std::string,std::allocator< std::string > >
        output_double_values: std::vector< SimTK::Matrix,std::allocator< SimTK::Matrix > >

        """
        return _jam.H5FileAdapter_writeComponentGroupDataSet(self, group_name, names, output_double_names, output_double_values)

    def writeComponentGroupDataSetVec3(self, group_name, names, output_vec3_names, output_vec3_values):
        r"""
        writeComponentGroupDataSetVec3(H5FileAdapter self, std::string group_name, StdVectorString names, StdVectorString output_vec3_names, std::vector< SimTK::Matrix_< SimTK::Vec3 >,std::allocator< SimTK::Matrix_< SimTK::Vec3 > > > output_vec3_values)

        Parameters
        ----------
        group_name: std::string
        names: std::vector< std::string,std::allocator< std::string > >
        output_vec3_names: std::vector< std::string,std::allocator< std::string > >
        output_vec3_values: std::vector< SimTK::Matrix_< SimTK::Vec3 >,std::allocator< SimTK::Matrix_< SimTK::Vec3 > > >

        """
        return _jam.H5FileAdapter_writeComponentGroupDataSetVec3(self, group_name, names, output_vec3_names, output_vec3_values)

    def writeComponentGroupDataSetVector(self, group_name, names, output_vector_names, output_vector_values):
        r"""
        writeComponentGroupDataSetVector(H5FileAdapter self, std::string group_name, StdVectorString names, StdVectorString output_vector_names, std::vector< std::vector< SimTK::Matrix,std::allocator< SimTK::Matrix > >,std::allocator< std::vector< SimTK::Matrix,std::allocator< SimTK::Matrix > > > > output_vector_values)

        Parameters
        ----------
        group_name: std::string
        names: std::vector< std::string,std::allocator< std::string > >
        output_vector_names: std::vector< std::string,std::allocator< std::string > >
        output_vector_values: std::vector< std::vector< SimTK::Matrix,std::allocator< SimTK::Matrix > >,std::allocator< std::vector< SimTK::Matrix,std::allocator< SimTK::Matrix > > > >

        """
        return _jam.H5FileAdapter_writeComponentGroupDataSetVector(self, group_name, names, output_vector_names, output_vector_values)

# Register H5FileAdapter in _jam:
_jam.H5FileAdapter_swigregister(H5FileAdapter)

class COMAKSecondaryCoordinate(opensim.common.OpenSimObject):
    r"""Proxy of C++ OpenSim::COMAKSecondaryCoordinate class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def safeDownCast(obj):
        r"""
        safeDownCast(OpenSimObject obj) -> COMAKSecondaryCoordinate

        Parameters
        ----------
        obj: OpenSim::Object *

        """
        return _jam.COMAKSecondaryCoordinate_safeDownCast(obj)

    def assign(self, aObject):
        r"""
        assign(COMAKSecondaryCoordinate self, OpenSimObject aObject)

        Parameters
        ----------
        aObject: OpenSim::Object &

        """
        return _jam.COMAKSecondaryCoordinate_assign(self, aObject)

    @staticmethod
    def getClassName():
        r"""getClassName() -> std::string const &"""
        return _jam.COMAKSecondaryCoordinate_getClassName()

    def clone(self):
        r"""clone(COMAKSecondaryCoordinate self) -> COMAKSecondaryCoordinate"""
        return _jam.COMAKSecondaryCoordinate_clone(self)

    def getConcreteClassName(self):
        r"""getConcreteClassName(COMAKSecondaryCoordinate self) -> std::string const &"""
        return _jam.COMAKSecondaryCoordinate_getConcreteClassName(self)

    def copyProperty_coordinate(self, source):
        r"""
        copyProperty_coordinate(COMAKSecondaryCoordinate self, COMAKSecondaryCoordinate source)

        Parameters
        ----------
        source: OpenSim::COMAKSecondaryCoordinate::Self const &

        """
        return _jam.COMAKSecondaryCoordinate_copyProperty_coordinate(self, source)

    def append_coordinate(self, value):
        r"""
        append_coordinate(COMAKSecondaryCoordinate self, std::string const & value) -> int

        Parameters
        ----------
        value: std::string const &

        """
        return _jam.COMAKSecondaryCoordinate_append_coordinate(self, value)

    def constructProperty_coordinate(self, initValue):
        r"""
        constructProperty_coordinate(COMAKSecondaryCoordinate self, std::string const & initValue)

        Parameters
        ----------
        initValue: std::string const &

        """
        return _jam.COMAKSecondaryCoordinate_constructProperty_coordinate(self, initValue)

    def get_coordinate(self, *args):
        r"""
        get_coordinate(COMAKSecondaryCoordinate self, int i) -> std::string const

        Parameters
        ----------
        i: int

        get_coordinate(COMAKSecondaryCoordinate self) -> std::string const &
        """
        return _jam.COMAKSecondaryCoordinate_get_coordinate(self, *args)

    def upd_coordinate(self, *args):
        r"""
        upd_coordinate(COMAKSecondaryCoordinate self, int i) -> std::string

        Parameters
        ----------
        i: int

        upd_coordinate(COMAKSecondaryCoordinate self) -> std::string &
        """
        return _jam.COMAKSecondaryCoordinate_upd_coordinate(self, *args)

    def set_coordinate(self, *args):
        r"""
        set_coordinate(COMAKSecondaryCoordinate self, int i, std::string const & value)

        Parameters
        ----------
        i: int
        value: std::string const &

        set_coordinate(COMAKSecondaryCoordinate self, std::string const & value)

        Parameters
        ----------
        value: std::string const &

        """
        return _jam.COMAKSecondaryCoordinate_set_coordinate(self, *args)

    def copyProperty_max_change(self, source):
        r"""
        copyProperty_max_change(COMAKSecondaryCoordinate self, COMAKSecondaryCoordinate source)

        Parameters
        ----------
        source: OpenSim::COMAKSecondaryCoordinate::Self const &

        """
        return _jam.COMAKSecondaryCoordinate_copyProperty_max_change(self, source)

    def append_max_change(self, value):
        r"""
        append_max_change(COMAKSecondaryCoordinate self, double const & value) -> int

        Parameters
        ----------
        value: double const &

        """
        return _jam.COMAKSecondaryCoordinate_append_max_change(self, value)

    def constructProperty_max_change(self, initValue):
        r"""
        constructProperty_max_change(COMAKSecondaryCoordinate self, double const & initValue)

        Parameters
        ----------
        initValue: double const &

        """
        return _jam.COMAKSecondaryCoordinate_constructProperty_max_change(self, initValue)

    def get_max_change(self, *args):
        r"""
        get_max_change(COMAKSecondaryCoordinate self, int i) -> double const

        Parameters
        ----------
        i: int

        get_max_change(COMAKSecondaryCoordinate self) -> double const &
        """
        return _jam.COMAKSecondaryCoordinate_get_max_change(self, *args)

    def upd_max_change(self, *args):
        r"""
        upd_max_change(COMAKSecondaryCoordinate self, int i) -> double

        Parameters
        ----------
        i: int

        upd_max_change(COMAKSecondaryCoordinate self) -> double &
        """
        return _jam.COMAKSecondaryCoordinate_upd_max_change(self, *args)

    def set_max_change(self, *args):
        r"""
        set_max_change(COMAKSecondaryCoordinate self, int i, double const & value)

        Parameters
        ----------
        i: int
        value: double const &

        set_max_change(COMAKSecondaryCoordinate self, double const & value)

        Parameters
        ----------
        value: double const &

        """
        return _jam.COMAKSecondaryCoordinate_set_max_change(self, *args)

    def __init__(self):
        r"""__init__(COMAKSecondaryCoordinate self) -> COMAKSecondaryCoordinate"""
        _jam.COMAKSecondaryCoordinate_swiginit(self, _jam.new_COMAKSecondaryCoordinate())

    def constructProperties(self):
        r"""constructProperties(COMAKSecondaryCoordinate self)"""
        return _jam.COMAKSecondaryCoordinate_constructProperties(self)
    __swig_destroy__ = _jam.delete_COMAKSecondaryCoordinate

# Register COMAKSecondaryCoordinate in _jam:
_jam.COMAKSecondaryCoordinate_swigregister(COMAKSecondaryCoordinate)

def COMAKSecondaryCoordinate_safeDownCast(obj):
    r"""
    COMAKSecondaryCoordinate_safeDownCast(OpenSimObject obj) -> COMAKSecondaryCoordinate

    Parameters
    ----------
    obj: OpenSim::Object *

    """
    return _jam.COMAKSecondaryCoordinate_safeDownCast(obj)

def COMAKSecondaryCoordinate_getClassName():
    r"""COMAKSecondaryCoordinate_getClassName() -> std::string const &"""
    return _jam.COMAKSecondaryCoordinate_getClassName()

class COMAKCostFunctionParameter(opensim.common.OpenSimObject):
    r"""Proxy of C++ OpenSim::COMAKCostFunctionParameter class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def safeDownCast(obj):
        r"""
        safeDownCast(OpenSimObject obj) -> COMAKCostFunctionParameter

        Parameters
        ----------
        obj: OpenSim::Object *

        """
        return _jam.COMAKCostFunctionParameter_safeDownCast(obj)

    def assign(self, aObject):
        r"""
        assign(COMAKCostFunctionParameter self, OpenSimObject aObject)

        Parameters
        ----------
        aObject: OpenSim::Object &

        """
        return _jam.COMAKCostFunctionParameter_assign(self, aObject)

    @staticmethod
    def getClassName():
        r"""getClassName() -> std::string const &"""
        return _jam.COMAKCostFunctionParameter_getClassName()

    def clone(self):
        r"""clone(COMAKCostFunctionParameter self) -> COMAKCostFunctionParameter"""
        return _jam.COMAKCostFunctionParameter_clone(self)

    def getConcreteClassName(self):
        r"""getConcreteClassName(COMAKCostFunctionParameter self) -> std::string const &"""
        return _jam.COMAKCostFunctionParameter_getConcreteClassName(self)

    def copyProperty_actuator(self, source):
        r"""
        copyProperty_actuator(COMAKCostFunctionParameter self, COMAKCostFunctionParameter source)

        Parameters
        ----------
        source: OpenSim::COMAKCostFunctionParameter::Self const &

        """
        return _jam.COMAKCostFunctionParameter_copyProperty_actuator(self, source)

    def append_actuator(self, value):
        r"""
        append_actuator(COMAKCostFunctionParameter self, std::string const & value) -> int

        Parameters
        ----------
        value: std::string const &

        """
        return _jam.COMAKCostFunctionParameter_append_actuator(self, value)

    def constructProperty_actuator(self, initValue):
        r"""
        constructProperty_actuator(COMAKCostFunctionParameter self, std::string const & initValue)

        Parameters
        ----------
        initValue: std::string const &

        """
        return _jam.COMAKCostFunctionParameter_constructProperty_actuator(self, initValue)

    def get_actuator(self, *args):
        r"""
        get_actuator(COMAKCostFunctionParameter self, int i) -> std::string const

        Parameters
        ----------
        i: int

        get_actuator(COMAKCostFunctionParameter self) -> std::string const &
        """
        return _jam.COMAKCostFunctionParameter_get_actuator(self, *args)

    def upd_actuator(self, *args):
        r"""
        upd_actuator(COMAKCostFunctionParameter self, int i) -> std::string

        Parameters
        ----------
        i: int

        upd_actuator(COMAKCostFunctionParameter self) -> std::string &
        """
        return _jam.COMAKCostFunctionParameter_upd_actuator(self, *args)

    def set_actuator(self, *args):
        r"""
        set_actuator(COMAKCostFunctionParameter self, int i, std::string const & value)

        Parameters
        ----------
        i: int
        value: std::string const &

        set_actuator(COMAKCostFunctionParameter self, std::string const & value)

        Parameters
        ----------
        value: std::string const &

        """
        return _jam.COMAKCostFunctionParameter_set_actuator(self, *args)

    def copyProperty_weight(self, source):
        r"""
        copyProperty_weight(COMAKCostFunctionParameter self, COMAKCostFunctionParameter source)

        Parameters
        ----------
        source: OpenSim::COMAKCostFunctionParameter::Self const &

        """
        return _jam.COMAKCostFunctionParameter_copyProperty_weight(self, source)

    def append_weight(self, value):
        r"""
        append_weight(COMAKCostFunctionParameter self, Function value) -> int

        Parameters
        ----------
        value: OpenSim::Function const &

        """
        return _jam.COMAKCostFunctionParameter_append_weight(self, value)

    def constructProperty_weight(self, initValue):
        r"""
        constructProperty_weight(COMAKCostFunctionParameter self, Function initValue)

        Parameters
        ----------
        initValue: OpenSim::Function const &

        """
        return _jam.COMAKCostFunctionParameter_constructProperty_weight(self, initValue)

    def get_weight(self, *args):
        r"""
        get_weight(COMAKCostFunctionParameter self, int i) -> Function

        Parameters
        ----------
        i: int

        get_weight(COMAKCostFunctionParameter self) -> Function
        """
        return _jam.COMAKCostFunctionParameter_get_weight(self, *args)

    def upd_weight(self, *args):
        r"""
        upd_weight(COMAKCostFunctionParameter self, int i) -> Function

        Parameters
        ----------
        i: int

        upd_weight(COMAKCostFunctionParameter self) -> Function
        """
        return _jam.COMAKCostFunctionParameter_upd_weight(self, *args)

    def set_weight(self, *args):
        r"""
        set_weight(COMAKCostFunctionParameter self, int i, Function value)

        Parameters
        ----------
        i: int
        value: OpenSim::Function const &

        set_weight(COMAKCostFunctionParameter self, Function value)

        Parameters
        ----------
        value: OpenSim::Function const &

        """
        return _jam.COMAKCostFunctionParameter_set_weight(self, *args)

    def copyProperty_desired_activation(self, source):
        r"""
        copyProperty_desired_activation(COMAKCostFunctionParameter self, COMAKCostFunctionParameter source)

        Parameters
        ----------
        source: OpenSim::COMAKCostFunctionParameter::Self const &

        """
        return _jam.COMAKCostFunctionParameter_copyProperty_desired_activation(self, source)

    def append_desired_activation(self, value):
        r"""
        append_desired_activation(COMAKCostFunctionParameter self, Function value) -> int

        Parameters
        ----------
        value: OpenSim::Function const &

        """
        return _jam.COMAKCostFunctionParameter_append_desired_activation(self, value)

    def constructProperty_desired_activation(self, initValue):
        r"""
        constructProperty_desired_activation(COMAKCostFunctionParameter self, Function initValue)

        Parameters
        ----------
        initValue: OpenSim::Function const &

        """
        return _jam.COMAKCostFunctionParameter_constructProperty_desired_activation(self, initValue)

    def get_desired_activation(self, *args):
        r"""
        get_desired_activation(COMAKCostFunctionParameter self, int i) -> Function

        Parameters
        ----------
        i: int

        get_desired_activation(COMAKCostFunctionParameter self) -> Function
        """
        return _jam.COMAKCostFunctionParameter_get_desired_activation(self, *args)

    def upd_desired_activation(self, *args):
        r"""
        upd_desired_activation(COMAKCostFunctionParameter self, int i) -> Function

        Parameters
        ----------
        i: int

        upd_desired_activation(COMAKCostFunctionParameter self) -> Function
        """
        return _jam.COMAKCostFunctionParameter_upd_desired_activation(self, *args)

    def set_desired_activation(self, *args):
        r"""
        set_desired_activation(COMAKCostFunctionParameter self, int i, Function value)

        Parameters
        ----------
        i: int
        value: OpenSim::Function const &

        set_desired_activation(COMAKCostFunctionParameter self, Function value)

        Parameters
        ----------
        value: OpenSim::Function const &

        """
        return _jam.COMAKCostFunctionParameter_set_desired_activation(self, *args)

    def copyProperty_activation_lower_bound(self, source):
        r"""
        copyProperty_activation_lower_bound(COMAKCostFunctionParameter self, COMAKCostFunctionParameter source)

        Parameters
        ----------
        source: OpenSim::COMAKCostFunctionParameter::Self const &

        """
        return _jam.COMAKCostFunctionParameter_copyProperty_activation_lower_bound(self, source)

    def append_activation_lower_bound(self, value):
        r"""
        append_activation_lower_bound(COMAKCostFunctionParameter self, Function value) -> int

        Parameters
        ----------
        value: OpenSim::Function const &

        """
        return _jam.COMAKCostFunctionParameter_append_activation_lower_bound(self, value)

    def constructProperty_activation_lower_bound(self, initValue):
        r"""
        constructProperty_activation_lower_bound(COMAKCostFunctionParameter self, Function initValue)

        Parameters
        ----------
        initValue: OpenSim::Function const &

        """
        return _jam.COMAKCostFunctionParameter_constructProperty_activation_lower_bound(self, initValue)

    def get_activation_lower_bound(self, *args):
        r"""
        get_activation_lower_bound(COMAKCostFunctionParameter self, int i) -> Function

        Parameters
        ----------
        i: int

        get_activation_lower_bound(COMAKCostFunctionParameter self) -> Function
        """
        return _jam.COMAKCostFunctionParameter_get_activation_lower_bound(self, *args)

    def upd_activation_lower_bound(self, *args):
        r"""
        upd_activation_lower_bound(COMAKCostFunctionParameter self, int i) -> Function

        Parameters
        ----------
        i: int

        upd_activation_lower_bound(COMAKCostFunctionParameter self) -> Function
        """
        return _jam.COMAKCostFunctionParameter_upd_activation_lower_bound(self, *args)

    def set_activation_lower_bound(self, *args):
        r"""
        set_activation_lower_bound(COMAKCostFunctionParameter self, int i, Function value)

        Parameters
        ----------
        i: int
        value: OpenSim::Function const &

        set_activation_lower_bound(COMAKCostFunctionParameter self, Function value)

        Parameters
        ----------
        value: OpenSim::Function const &

        """
        return _jam.COMAKCostFunctionParameter_set_activation_lower_bound(self, *args)

    def copyProperty_activation_upper_bound(self, source):
        r"""
        copyProperty_activation_upper_bound(COMAKCostFunctionParameter self, COMAKCostFunctionParameter source)

        Parameters
        ----------
        source: OpenSim::COMAKCostFunctionParameter::Self const &

        """
        return _jam.COMAKCostFunctionParameter_copyProperty_activation_upper_bound(self, source)

    def append_activation_upper_bound(self, value):
        r"""
        append_activation_upper_bound(COMAKCostFunctionParameter self, Function value) -> int

        Parameters
        ----------
        value: OpenSim::Function const &

        """
        return _jam.COMAKCostFunctionParameter_append_activation_upper_bound(self, value)

    def constructProperty_activation_upper_bound(self, initValue):
        r"""
        constructProperty_activation_upper_bound(COMAKCostFunctionParameter self, Function initValue)

        Parameters
        ----------
        initValue: OpenSim::Function const &

        """
        return _jam.COMAKCostFunctionParameter_constructProperty_activation_upper_bound(self, initValue)

    def get_activation_upper_bound(self, *args):
        r"""
        get_activation_upper_bound(COMAKCostFunctionParameter self, int i) -> Function

        Parameters
        ----------
        i: int

        get_activation_upper_bound(COMAKCostFunctionParameter self) -> Function
        """
        return _jam.COMAKCostFunctionParameter_get_activation_upper_bound(self, *args)

    def upd_activation_upper_bound(self, *args):
        r"""
        upd_activation_upper_bound(COMAKCostFunctionParameter self, int i) -> Function

        Parameters
        ----------
        i: int

        upd_activation_upper_bound(COMAKCostFunctionParameter self) -> Function
        """
        return _jam.COMAKCostFunctionParameter_upd_activation_upper_bound(self, *args)

    def set_activation_upper_bound(self, *args):
        r"""
        set_activation_upper_bound(COMAKCostFunctionParameter self, int i, Function value)

        Parameters
        ----------
        i: int
        value: OpenSim::Function const &

        set_activation_upper_bound(COMAKCostFunctionParameter self, Function value)

        Parameters
        ----------
        value: OpenSim::Function const &

        """
        return _jam.COMAKCostFunctionParameter_set_activation_upper_bound(self, *args)

    def __init__(self):
        r"""__init__(COMAKCostFunctionParameter self) -> COMAKCostFunctionParameter"""
        _jam.COMAKCostFunctionParameter_swiginit(self, _jam.new_COMAKCostFunctionParameter())

    def constructProperties(self):
        r"""constructProperties(COMAKCostFunctionParameter self)"""
        return _jam.COMAKCostFunctionParameter_constructProperties(self)
    __swig_destroy__ = _jam.delete_COMAKCostFunctionParameter

# Register COMAKCostFunctionParameter in _jam:
_jam.COMAKCostFunctionParameter_swigregister(COMAKCostFunctionParameter)

def COMAKCostFunctionParameter_safeDownCast(obj):
    r"""
    COMAKCostFunctionParameter_safeDownCast(OpenSimObject obj) -> COMAKCostFunctionParameter

    Parameters
    ----------
    obj: OpenSim::Object *

    """
    return _jam.COMAKCostFunctionParameter_safeDownCast(obj)

def COMAKCostFunctionParameter_getClassName():
    r"""COMAKCostFunctionParameter_getClassName() -> std::string const &"""
    return _jam.COMAKCostFunctionParameter_getClassName()

class SetCOMAKSecondaryCoordinates(opensim.common.OpenSimObject):
    r"""Proxy of C++ OpenSim::Set< OpenSim::COMAKSecondaryCoordinate,OpenSim::Object > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def safeDownCast(obj):
        r"""
        safeDownCast(OpenSimObject obj) -> SetCOMAKSecondaryCoordinates

        Parameters
        ----------
        obj: OpenSim::Object *

        """
        return _jam.SetCOMAKSecondaryCoordinates_safeDownCast(obj)

    def assign(self, aObject):
        r"""
        assign(SetCOMAKSecondaryCoordinates self, OpenSimObject aObject)

        Parameters
        ----------
        aObject: OpenSim::Object &

        """
        return _jam.SetCOMAKSecondaryCoordinates_assign(self, aObject)

    @staticmethod
    def getClassName():
        r"""getClassName() -> std::string const &"""
        return _jam.SetCOMAKSecondaryCoordinates_getClassName()

    def clone(self):
        r"""clone(SetCOMAKSecondaryCoordinates self) -> SetCOMAKSecondaryCoordinates"""
        return _jam.SetCOMAKSecondaryCoordinates_clone(self)

    def getConcreteClassName(self):
        r"""getConcreteClassName(SetCOMAKSecondaryCoordinates self) -> std::string const &"""
        return _jam.SetCOMAKSecondaryCoordinates_getConcreteClassName(self)
    __swig_destroy__ = _jam.delete_SetCOMAKSecondaryCoordinates

    def __init__(self, *args):
        r"""
        __init__(SetCOMAKSecondaryCoordinates self) -> SetCOMAKSecondaryCoordinates
        __init__(SetCOMAKSecondaryCoordinates self, std::string const & aFileName, bool aUpdateFromXMLNode=True) -> SetCOMAKSecondaryCoordinates

        Parameters
        ----------
        aFileName: std::string const &
        aUpdateFromXMLNode: bool

        __init__(SetCOMAKSecondaryCoordinates self, SetCOMAKSecondaryCoordinates aSet) -> SetCOMAKSecondaryCoordinates

        Parameters
        ----------
        aSet: OpenSim::Set< OpenSim::COMAKSecondaryCoordinate,OpenSim::Object > const &

        """
        _jam.SetCOMAKSecondaryCoordinates_swiginit(self, _jam.new_SetCOMAKSecondaryCoordinates(*args))

    def setupGroups(self):
        r"""setupGroups(SetCOMAKSecondaryCoordinates self)"""
        return _jam.SetCOMAKSecondaryCoordinates_setupGroups(self)

    def setMemoryOwner(self, aTrueFalse):
        r"""
        setMemoryOwner(SetCOMAKSecondaryCoordinates self, bool aTrueFalse)

        Parameters
        ----------
        aTrueFalse: bool

        """
        return _jam.SetCOMAKSecondaryCoordinates_setMemoryOwner(self, aTrueFalse)

    def setSize(self, aSize):
        r"""
        setSize(SetCOMAKSecondaryCoordinates self, int aSize) -> bool

        Parameters
        ----------
        aSize: int

        """
        return _jam.SetCOMAKSecondaryCoordinates_setSize(self, aSize)

    def getSize(self):
        r"""getSize(SetCOMAKSecondaryCoordinates self) -> int"""
        return _jam.SetCOMAKSecondaryCoordinates_getSize(self)

    def getIndex(self, *args):
        r"""
        getIndex(SetCOMAKSecondaryCoordinates self, COMAKSecondaryCoordinate aObject, int aStartIndex=0) -> int

        Parameters
        ----------
        aObject: OpenSim::COMAKSecondaryCoordinate const *
        aStartIndex: int

        getIndex(SetCOMAKSecondaryCoordinates self, std::string const & aName, int aStartIndex=0) -> int

        Parameters
        ----------
        aName: std::string const &
        aStartIndex: int

        """
        return _jam.SetCOMAKSecondaryCoordinates_getIndex(self, *args)

    def getGroupNamesContaining(self, aObjectName, rGroupNames):
        r"""
        getGroupNamesContaining(SetCOMAKSecondaryCoordinates self, std::string const & aObjectName, ArrayStr rGroupNames)

        Parameters
        ----------
        aObjectName: std::string const &
        rGroupNames: OpenSim::Array< std::string > &

        """
        return _jam.SetCOMAKSecondaryCoordinates_getGroupNamesContaining(self, aObjectName, rGroupNames)

    def adoptAndAppend(self, aObject):
        r"""
        adoptAndAppend(SetCOMAKSecondaryCoordinates self, COMAKSecondaryCoordinate aObject) -> bool

        Parameters
        ----------
        aObject: OpenSim::COMAKSecondaryCoordinate *

        """
        return _jam.SetCOMAKSecondaryCoordinates_adoptAndAppend(self, aObject)

    def cloneAndAppend(self, aObject):
        r"""
        cloneAndAppend(SetCOMAKSecondaryCoordinates self, COMAKSecondaryCoordinate aObject) -> bool

        Parameters
        ----------
        aObject: OpenSim::COMAKSecondaryCoordinate const &

        """
        return _jam.SetCOMAKSecondaryCoordinates_cloneAndAppend(self, aObject)

    def insert(self, aIndex, aObject):
        r"""
        insert(SetCOMAKSecondaryCoordinates self, int aIndex, COMAKSecondaryCoordinate aObject) -> bool

        Parameters
        ----------
        aIndex: int
        aObject: OpenSim::COMAKSecondaryCoordinate *

        """
        return _jam.SetCOMAKSecondaryCoordinates_insert(self, aIndex, aObject)

    def remove(self, *args):
        r"""
        remove(SetCOMAKSecondaryCoordinates self, int aIndex) -> bool

        Parameters
        ----------
        aIndex: int

        remove(SetCOMAKSecondaryCoordinates self, COMAKSecondaryCoordinate aObject) -> bool

        Parameters
        ----------
        aObject: OpenSim::COMAKSecondaryCoordinate const *

        """
        return _jam.SetCOMAKSecondaryCoordinates_remove(self, *args)

    def clearAndDestroy(self):
        r"""clearAndDestroy(SetCOMAKSecondaryCoordinates self)"""
        return _jam.SetCOMAKSecondaryCoordinates_clearAndDestroy(self)

    def set(self, aIndex, aObject, preserveGroups=False):
        r"""
        set(SetCOMAKSecondaryCoordinates self, int aIndex, COMAKSecondaryCoordinate aObject, bool preserveGroups=False) -> bool

        Parameters
        ----------
        aIndex: int
        aObject: OpenSim::COMAKSecondaryCoordinate *
        preserveGroups: bool

        """
        return _jam.SetCOMAKSecondaryCoordinates_set(self, aIndex, aObject, preserveGroups)

    def get(self, *args):
        r"""
        get(SetCOMAKSecondaryCoordinates self, int aIndex) -> COMAKSecondaryCoordinate

        Parameters
        ----------
        aIndex: int

        get(SetCOMAKSecondaryCoordinates self, std::string const & aName) -> COMAKSecondaryCoordinate

        Parameters
        ----------
        aName: std::string const &

        """
        return _jam.SetCOMAKSecondaryCoordinates_get(self, *args)

    def contains(self, aName):
        r"""
        contains(SetCOMAKSecondaryCoordinates self, std::string const & aName) -> bool

        Parameters
        ----------
        aName: std::string const &

        """
        return _jam.SetCOMAKSecondaryCoordinates_contains(self, aName)

    def getNames(self, rNames):
        r"""
        getNames(SetCOMAKSecondaryCoordinates self, ArrayStr rNames)

        Parameters
        ----------
        rNames: OpenSim::Array< std::string > &

        """
        return _jam.SetCOMAKSecondaryCoordinates_getNames(self, rNames)

    def getNumGroups(self):
        r"""getNumGroups(SetCOMAKSecondaryCoordinates self) -> int"""
        return _jam.SetCOMAKSecondaryCoordinates_getNumGroups(self)

    def addGroup(self, aGroupName):
        r"""
        addGroup(SetCOMAKSecondaryCoordinates self, std::string const & aGroupName)

        Parameters
        ----------
        aGroupName: std::string const &

        """
        return _jam.SetCOMAKSecondaryCoordinates_addGroup(self, aGroupName)

    def removeGroup(self, aGroupName):
        r"""
        removeGroup(SetCOMAKSecondaryCoordinates self, std::string const & aGroupName)

        Parameters
        ----------
        aGroupName: std::string const &

        """
        return _jam.SetCOMAKSecondaryCoordinates_removeGroup(self, aGroupName)

    def renameGroup(self, oldGroupName, newGroupName):
        r"""
        renameGroup(SetCOMAKSecondaryCoordinates self, std::string const & oldGroupName, std::string const & newGroupName)

        Parameters
        ----------
        oldGroupName: std::string const &
        newGroupName: std::string const &

        """
        return _jam.SetCOMAKSecondaryCoordinates_renameGroup(self, oldGroupName, newGroupName)

    def addObjectToGroup(self, aGroupName, aObjectName):
        r"""
        addObjectToGroup(SetCOMAKSecondaryCoordinates self, std::string const & aGroupName, std::string const & aObjectName)

        Parameters
        ----------
        aGroupName: std::string const &
        aObjectName: std::string const &

        """
        return _jam.SetCOMAKSecondaryCoordinates_addObjectToGroup(self, aGroupName, aObjectName)

    def getGroupNames(self, rGroupNames):
        r"""
        getGroupNames(SetCOMAKSecondaryCoordinates self, ArrayStr rGroupNames)

        Parameters
        ----------
        rGroupNames: OpenSim::Array< std::string > &

        """
        return _jam.SetCOMAKSecondaryCoordinates_getGroupNames(self, rGroupNames)

    def getGroup(self, *args):
        r"""
        getGroup(SetCOMAKSecondaryCoordinates self, std::string const & aGroupName) -> ObjectGroup

        Parameters
        ----------
        aGroupName: std::string const &

        getGroup(SetCOMAKSecondaryCoordinates self, int aIndex) -> ObjectGroup

        Parameters
        ----------
        aIndex: int

        """
        return _jam.SetCOMAKSecondaryCoordinates_getGroup(self, *args)

    class SetIterator(object):
        """
        Use this object to iterate over a Set. You create an instance of
        this nested class by calling Set.__iter__().
        """
        def __init__(self, set_obj, index):
            """Construct an iterator for the Set `set`."""
            self._set_obj = set_obj
            self._index = index
        def __iter__(self):
            """This iterator is also iterable."""
            return self
        def next(self):
            if self._index < self._set_obj.getSize():
                current_index = self._index
                self._index += 1
                return self._set_obj.get(current_index)
            else:
    # This is how Python knows to stop iterating.
                 raise StopIteration()
        __next__ = next # For Python 3.

    def __iter__(self):
        """Get an iterator for this Set, starting at index 0."""
        return self.SetIterator(self, 0)

    def items(self):
        """
        A generator function that allows you to iterate over the key-value
        pairs of this Set. You can use this in a for-loop as such::

            for key, val in my_function_set.items():
    # `val` is an item in the Set, and `key` is its name.
                print key, val
        """
        index = 0
        while index < self.getSize():
            yield self.get(index).getName(), self.get(index)
            index += 1


# Register SetCOMAKSecondaryCoordinates in _jam:
_jam.SetCOMAKSecondaryCoordinates_swigregister(SetCOMAKSecondaryCoordinates)

def SetCOMAKSecondaryCoordinates_safeDownCast(obj):
    r"""
    SetCOMAKSecondaryCoordinates_safeDownCast(OpenSimObject obj) -> SetCOMAKSecondaryCoordinates

    Parameters
    ----------
    obj: OpenSim::Object *

    """
    return _jam.SetCOMAKSecondaryCoordinates_safeDownCast(obj)

def SetCOMAKSecondaryCoordinates_getClassName():
    r"""SetCOMAKSecondaryCoordinates_getClassName() -> std::string const &"""
    return _jam.SetCOMAKSecondaryCoordinates_getClassName()

class SetCOMAKCostFunctionParameters(opensim.common.OpenSimObject):
    r"""Proxy of C++ OpenSim::Set< OpenSim::COMAKCostFunctionParameter,OpenSim::Object > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def safeDownCast(obj):
        r"""
        safeDownCast(OpenSimObject obj) -> SetCOMAKCostFunctionParameters

        Parameters
        ----------
        obj: OpenSim::Object *

        """
        return _jam.SetCOMAKCostFunctionParameters_safeDownCast(obj)

    def assign(self, aObject):
        r"""
        assign(SetCOMAKCostFunctionParameters self, OpenSimObject aObject)

        Parameters
        ----------
        aObject: OpenSim::Object &

        """
        return _jam.SetCOMAKCostFunctionParameters_assign(self, aObject)

    @staticmethod
    def getClassName():
        r"""getClassName() -> std::string const &"""
        return _jam.SetCOMAKCostFunctionParameters_getClassName()

    def clone(self):
        r"""clone(SetCOMAKCostFunctionParameters self) -> SetCOMAKCostFunctionParameters"""
        return _jam.SetCOMAKCostFunctionParameters_clone(self)

    def getConcreteClassName(self):
        r"""getConcreteClassName(SetCOMAKCostFunctionParameters self) -> std::string const &"""
        return _jam.SetCOMAKCostFunctionParameters_getConcreteClassName(self)
    __swig_destroy__ = _jam.delete_SetCOMAKCostFunctionParameters

    def __init__(self, *args):
        r"""
        __init__(SetCOMAKCostFunctionParameters self) -> SetCOMAKCostFunctionParameters
        __init__(SetCOMAKCostFunctionParameters self, std::string const & aFileName, bool aUpdateFromXMLNode=True) -> SetCOMAKCostFunctionParameters

        Parameters
        ----------
        aFileName: std::string const &
        aUpdateFromXMLNode: bool

        __init__(SetCOMAKCostFunctionParameters self, SetCOMAKCostFunctionParameters aSet) -> SetCOMAKCostFunctionParameters

        Parameters
        ----------
        aSet: OpenSim::Set< OpenSim::COMAKCostFunctionParameter,OpenSim::Object > const &

        """
        _jam.SetCOMAKCostFunctionParameters_swiginit(self, _jam.new_SetCOMAKCostFunctionParameters(*args))

    def setupGroups(self):
        r"""setupGroups(SetCOMAKCostFunctionParameters self)"""
        return _jam.SetCOMAKCostFunctionParameters_setupGroups(self)

    def setMemoryOwner(self, aTrueFalse):
        r"""
        setMemoryOwner(SetCOMAKCostFunctionParameters self, bool aTrueFalse)

        Parameters
        ----------
        aTrueFalse: bool

        """
        return _jam.SetCOMAKCostFunctionParameters_setMemoryOwner(self, aTrueFalse)

    def setSize(self, aSize):
        r"""
        setSize(SetCOMAKCostFunctionParameters self, int aSize) -> bool

        Parameters
        ----------
        aSize: int

        """
        return _jam.SetCOMAKCostFunctionParameters_setSize(self, aSize)

    def getSize(self):
        r"""getSize(SetCOMAKCostFunctionParameters self) -> int"""
        return _jam.SetCOMAKCostFunctionParameters_getSize(self)

    def getIndex(self, *args):
        r"""
        getIndex(SetCOMAKCostFunctionParameters self, COMAKCostFunctionParameter aObject, int aStartIndex=0) -> int

        Parameters
        ----------
        aObject: OpenSim::COMAKCostFunctionParameter const *
        aStartIndex: int

        getIndex(SetCOMAKCostFunctionParameters self, std::string const & aName, int aStartIndex=0) -> int

        Parameters
        ----------
        aName: std::string const &
        aStartIndex: int

        """
        return _jam.SetCOMAKCostFunctionParameters_getIndex(self, *args)

    def getGroupNamesContaining(self, aObjectName, rGroupNames):
        r"""
        getGroupNamesContaining(SetCOMAKCostFunctionParameters self, std::string const & aObjectName, ArrayStr rGroupNames)

        Parameters
        ----------
        aObjectName: std::string const &
        rGroupNames: OpenSim::Array< std::string > &

        """
        return _jam.SetCOMAKCostFunctionParameters_getGroupNamesContaining(self, aObjectName, rGroupNames)

    def adoptAndAppend(self, aObject):
        r"""
        adoptAndAppend(SetCOMAKCostFunctionParameters self, COMAKCostFunctionParameter aObject) -> bool

        Parameters
        ----------
        aObject: OpenSim::COMAKCostFunctionParameter *

        """
        return _jam.SetCOMAKCostFunctionParameters_adoptAndAppend(self, aObject)

    def cloneAndAppend(self, aObject):
        r"""
        cloneAndAppend(SetCOMAKCostFunctionParameters self, COMAKCostFunctionParameter aObject) -> bool

        Parameters
        ----------
        aObject: OpenSim::COMAKCostFunctionParameter const &

        """
        return _jam.SetCOMAKCostFunctionParameters_cloneAndAppend(self, aObject)

    def insert(self, aIndex, aObject):
        r"""
        insert(SetCOMAKCostFunctionParameters self, int aIndex, COMAKCostFunctionParameter aObject) -> bool

        Parameters
        ----------
        aIndex: int
        aObject: OpenSim::COMAKCostFunctionParameter *

        """
        return _jam.SetCOMAKCostFunctionParameters_insert(self, aIndex, aObject)

    def remove(self, *args):
        r"""
        remove(SetCOMAKCostFunctionParameters self, int aIndex) -> bool

        Parameters
        ----------
        aIndex: int

        remove(SetCOMAKCostFunctionParameters self, COMAKCostFunctionParameter aObject) -> bool

        Parameters
        ----------
        aObject: OpenSim::COMAKCostFunctionParameter const *

        """
        return _jam.SetCOMAKCostFunctionParameters_remove(self, *args)

    def clearAndDestroy(self):
        r"""clearAndDestroy(SetCOMAKCostFunctionParameters self)"""
        return _jam.SetCOMAKCostFunctionParameters_clearAndDestroy(self)

    def set(self, aIndex, aObject, preserveGroups=False):
        r"""
        set(SetCOMAKCostFunctionParameters self, int aIndex, COMAKCostFunctionParameter aObject, bool preserveGroups=False) -> bool

        Parameters
        ----------
        aIndex: int
        aObject: OpenSim::COMAKCostFunctionParameter *
        preserveGroups: bool

        """
        return _jam.SetCOMAKCostFunctionParameters_set(self, aIndex, aObject, preserveGroups)

    def get(self, *args):
        r"""
        get(SetCOMAKCostFunctionParameters self, int aIndex) -> COMAKCostFunctionParameter

        Parameters
        ----------
        aIndex: int

        get(SetCOMAKCostFunctionParameters self, std::string const & aName) -> COMAKCostFunctionParameter

        Parameters
        ----------
        aName: std::string const &

        """
        return _jam.SetCOMAKCostFunctionParameters_get(self, *args)

    def contains(self, aName):
        r"""
        contains(SetCOMAKCostFunctionParameters self, std::string const & aName) -> bool

        Parameters
        ----------
        aName: std::string const &

        """
        return _jam.SetCOMAKCostFunctionParameters_contains(self, aName)

    def getNames(self, rNames):
        r"""
        getNames(SetCOMAKCostFunctionParameters self, ArrayStr rNames)

        Parameters
        ----------
        rNames: OpenSim::Array< std::string > &

        """
        return _jam.SetCOMAKCostFunctionParameters_getNames(self, rNames)

    def getNumGroups(self):
        r"""getNumGroups(SetCOMAKCostFunctionParameters self) -> int"""
        return _jam.SetCOMAKCostFunctionParameters_getNumGroups(self)

    def addGroup(self, aGroupName):
        r"""
        addGroup(SetCOMAKCostFunctionParameters self, std::string const & aGroupName)

        Parameters
        ----------
        aGroupName: std::string const &

        """
        return _jam.SetCOMAKCostFunctionParameters_addGroup(self, aGroupName)

    def removeGroup(self, aGroupName):
        r"""
        removeGroup(SetCOMAKCostFunctionParameters self, std::string const & aGroupName)

        Parameters
        ----------
        aGroupName: std::string const &

        """
        return _jam.SetCOMAKCostFunctionParameters_removeGroup(self, aGroupName)

    def renameGroup(self, oldGroupName, newGroupName):
        r"""
        renameGroup(SetCOMAKCostFunctionParameters self, std::string const & oldGroupName, std::string const & newGroupName)

        Parameters
        ----------
        oldGroupName: std::string const &
        newGroupName: std::string const &

        """
        return _jam.SetCOMAKCostFunctionParameters_renameGroup(self, oldGroupName, newGroupName)

    def addObjectToGroup(self, aGroupName, aObjectName):
        r"""
        addObjectToGroup(SetCOMAKCostFunctionParameters self, std::string const & aGroupName, std::string const & aObjectName)

        Parameters
        ----------
        aGroupName: std::string const &
        aObjectName: std::string const &

        """
        return _jam.SetCOMAKCostFunctionParameters_addObjectToGroup(self, aGroupName, aObjectName)

    def getGroupNames(self, rGroupNames):
        r"""
        getGroupNames(SetCOMAKCostFunctionParameters self, ArrayStr rGroupNames)

        Parameters
        ----------
        rGroupNames: OpenSim::Array< std::string > &

        """
        return _jam.SetCOMAKCostFunctionParameters_getGroupNames(self, rGroupNames)

    def getGroup(self, *args):
        r"""
        getGroup(SetCOMAKCostFunctionParameters self, std::string const & aGroupName) -> ObjectGroup

        Parameters
        ----------
        aGroupName: std::string const &

        getGroup(SetCOMAKCostFunctionParameters self, int aIndex) -> ObjectGroup

        Parameters
        ----------
        aIndex: int

        """
        return _jam.SetCOMAKCostFunctionParameters_getGroup(self, *args)

    class SetIterator(object):
        """
        Use this object to iterate over a Set. You create an instance of
        this nested class by calling Set.__iter__().
        """
        def __init__(self, set_obj, index):
            """Construct an iterator for the Set `set`."""
            self._set_obj = set_obj
            self._index = index
        def __iter__(self):
            """This iterator is also iterable."""
            return self
        def next(self):
            if self._index < self._set_obj.getSize():
                current_index = self._index
                self._index += 1
                return self._set_obj.get(current_index)
            else:
    # This is how Python knows to stop iterating.
                 raise StopIteration()
        __next__ = next # For Python 3.

    def __iter__(self):
        """Get an iterator for this Set, starting at index 0."""
        return self.SetIterator(self, 0)

    def items(self):
        """
        A generator function that allows you to iterate over the key-value
        pairs of this Set. You can use this in a for-loop as such::

            for key, val in my_function_set.items():
    # `val` is an item in the Set, and `key` is its name.
                print key, val
        """
        index = 0
        while index < self.getSize():
            yield self.get(index).getName(), self.get(index)
            index += 1


# Register SetCOMAKCostFunctionParameters in _jam:
_jam.SetCOMAKCostFunctionParameters_swigregister(SetCOMAKCostFunctionParameters)

def SetCOMAKCostFunctionParameters_safeDownCast(obj):
    r"""
    SetCOMAKCostFunctionParameters_safeDownCast(OpenSimObject obj) -> SetCOMAKCostFunctionParameters

    Parameters
    ----------
    obj: OpenSim::Object *

    """
    return _jam.SetCOMAKCostFunctionParameters_safeDownCast(obj)

def SetCOMAKCostFunctionParameters_getClassName():
    r"""SetCOMAKCostFunctionParameters_getClassName() -> std::string const &"""
    return _jam.SetCOMAKCostFunctionParameters_getClassName()

class COMAKSecondaryCoordinateSet(SetCOMAKSecondaryCoordinates):
    r"""Proxy of C++ OpenSim::COMAKSecondaryCoordinateSet class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def safeDownCast(obj):
        r"""
        safeDownCast(OpenSimObject obj) -> COMAKSecondaryCoordinateSet

        Parameters
        ----------
        obj: OpenSim::Object *

        """
        return _jam.COMAKSecondaryCoordinateSet_safeDownCast(obj)

    def assign(self, aObject):
        r"""
        assign(COMAKSecondaryCoordinateSet self, OpenSimObject aObject)

        Parameters
        ----------
        aObject: OpenSim::Object &

        """
        return _jam.COMAKSecondaryCoordinateSet_assign(self, aObject)

    @staticmethod
    def getClassName():
        r"""getClassName() -> std::string const &"""
        return _jam.COMAKSecondaryCoordinateSet_getClassName()

    def clone(self):
        r"""clone(COMAKSecondaryCoordinateSet self) -> COMAKSecondaryCoordinateSet"""
        return _jam.COMAKSecondaryCoordinateSet_clone(self)

    def getConcreteClassName(self):
        r"""getConcreteClassName(COMAKSecondaryCoordinateSet self) -> std::string const &"""
        return _jam.COMAKSecondaryCoordinateSet_getConcreteClassName(self)

    def __init__(self):
        r"""__init__(COMAKSecondaryCoordinateSet self) -> COMAKSecondaryCoordinateSet"""
        _jam.COMAKSecondaryCoordinateSet_swiginit(self, _jam.new_COMAKSecondaryCoordinateSet())
    __swig_destroy__ = _jam.delete_COMAKSecondaryCoordinateSet

# Register COMAKSecondaryCoordinateSet in _jam:
_jam.COMAKSecondaryCoordinateSet_swigregister(COMAKSecondaryCoordinateSet)

def COMAKSecondaryCoordinateSet_safeDownCast(obj):
    r"""
    COMAKSecondaryCoordinateSet_safeDownCast(OpenSimObject obj) -> COMAKSecondaryCoordinateSet

    Parameters
    ----------
    obj: OpenSim::Object *

    """
    return _jam.COMAKSecondaryCoordinateSet_safeDownCast(obj)

def COMAKSecondaryCoordinateSet_getClassName():
    r"""COMAKSecondaryCoordinateSet_getClassName() -> std::string const &"""
    return _jam.COMAKSecondaryCoordinateSet_getClassName()

class COMAKCostFunctionParameterSet(SetCOMAKCostFunctionParameters):
    r"""Proxy of C++ OpenSim::COMAKCostFunctionParameterSet class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def safeDownCast(obj):
        r"""
        safeDownCast(OpenSimObject obj) -> COMAKCostFunctionParameterSet

        Parameters
        ----------
        obj: OpenSim::Object *

        """
        return _jam.COMAKCostFunctionParameterSet_safeDownCast(obj)

    def assign(self, aObject):
        r"""
        assign(COMAKCostFunctionParameterSet self, OpenSimObject aObject)

        Parameters
        ----------
        aObject: OpenSim::Object &

        """
        return _jam.COMAKCostFunctionParameterSet_assign(self, aObject)

    @staticmethod
    def getClassName():
        r"""getClassName() -> std::string const &"""
        return _jam.COMAKCostFunctionParameterSet_getClassName()

    def clone(self):
        r"""clone(COMAKCostFunctionParameterSet self) -> COMAKCostFunctionParameterSet"""
        return _jam.COMAKCostFunctionParameterSet_clone(self)

    def getConcreteClassName(self):
        r"""getConcreteClassName(COMAKCostFunctionParameterSet self) -> std::string const &"""
        return _jam.COMAKCostFunctionParameterSet_getConcreteClassName(self)

    def __init__(self):
        r"""__init__(COMAKCostFunctionParameterSet self) -> COMAKCostFunctionParameterSet"""
        _jam.COMAKCostFunctionParameterSet_swiginit(self, _jam.new_COMAKCostFunctionParameterSet())

    def constructProperties(self):
        r"""constructProperties(COMAKCostFunctionParameterSet self)"""
        return _jam.COMAKCostFunctionParameterSet_constructProperties(self)
    __swig_destroy__ = _jam.delete_COMAKCostFunctionParameterSet

# Register COMAKCostFunctionParameterSet in _jam:
_jam.COMAKCostFunctionParameterSet_swigregister(COMAKCostFunctionParameterSet)

def COMAKCostFunctionParameterSet_safeDownCast(obj):
    r"""
    COMAKCostFunctionParameterSet_safeDownCast(OpenSimObject obj) -> COMAKCostFunctionParameterSet

    Parameters
    ----------
    obj: OpenSim::Object *

    """
    return _jam.COMAKCostFunctionParameterSet_safeDownCast(obj)

def COMAKCostFunctionParameterSet_getClassName():
    r"""COMAKCostFunctionParameterSet_getClassName() -> std::string const &"""
    return _jam.COMAKCostFunctionParameterSet_getClassName()

class COMAKInverseKinematicsTool(opensim.common.OpenSimObject):
    r"""Proxy of C++ OpenSim::COMAKInverseKinematicsTool class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def safeDownCast(obj):
        r"""
        safeDownCast(OpenSimObject obj) -> COMAKInverseKinematicsTool

        Parameters
        ----------
        obj: OpenSim::Object *

        """
        return _jam.COMAKInverseKinematicsTool_safeDownCast(obj)

    def assign(self, aObject):
        r"""
        assign(COMAKInverseKinematicsTool self, OpenSimObject aObject)

        Parameters
        ----------
        aObject: OpenSim::Object &

        """
        return _jam.COMAKInverseKinematicsTool_assign(self, aObject)

    @staticmethod
    def getClassName():
        r"""getClassName() -> std::string const &"""
        return _jam.COMAKInverseKinematicsTool_getClassName()

    def clone(self):
        r"""clone(COMAKInverseKinematicsTool self) -> COMAKInverseKinematicsTool"""
        return _jam.COMAKInverseKinematicsTool_clone(self)

    def getConcreteClassName(self):
        r"""getConcreteClassName(COMAKInverseKinematicsTool self) -> std::string const &"""
        return _jam.COMAKInverseKinematicsTool_getConcreteClassName(self)

    def copyProperty_model_file(self, source):
        r"""
        copyProperty_model_file(COMAKInverseKinematicsTool self, COMAKInverseKinematicsTool source)

        Parameters
        ----------
        source: OpenSim::COMAKInverseKinematicsTool::Self const &

        """
        return _jam.COMAKInverseKinematicsTool_copyProperty_model_file(self, source)

    def append_model_file(self, value):
        r"""
        append_model_file(COMAKInverseKinematicsTool self, std::string const & value) -> int

        Parameters
        ----------
        value: std::string const &

        """
        return _jam.COMAKInverseKinematicsTool_append_model_file(self, value)

    def constructProperty_model_file(self, initValue):
        r"""
        constructProperty_model_file(COMAKInverseKinematicsTool self, std::string const & initValue)

        Parameters
        ----------
        initValue: std::string const &

        """
        return _jam.COMAKInverseKinematicsTool_constructProperty_model_file(self, initValue)

    def get_model_file(self, *args):
        r"""
        get_model_file(COMAKInverseKinematicsTool self, int i) -> std::string const

        Parameters
        ----------
        i: int

        get_model_file(COMAKInverseKinematicsTool self) -> std::string const &
        """
        return _jam.COMAKInverseKinematicsTool_get_model_file(self, *args)

    def upd_model_file(self, *args):
        r"""
        upd_model_file(COMAKInverseKinematicsTool self, int i) -> std::string

        Parameters
        ----------
        i: int

        upd_model_file(COMAKInverseKinematicsTool self) -> std::string &
        """
        return _jam.COMAKInverseKinematicsTool_upd_model_file(self, *args)

    def set_model_file(self, *args):
        r"""
        set_model_file(COMAKInverseKinematicsTool self, int i, std::string const & value)

        Parameters
        ----------
        i: int
        value: std::string const &

        set_model_file(COMAKInverseKinematicsTool self, std::string const & value)

        Parameters
        ----------
        value: std::string const &

        """
        return _jam.COMAKInverseKinematicsTool_set_model_file(self, *args)

    def copyProperty_results_directory(self, source):
        r"""
        copyProperty_results_directory(COMAKInverseKinematicsTool self, COMAKInverseKinematicsTool source)

        Parameters
        ----------
        source: OpenSim::COMAKInverseKinematicsTool::Self const &

        """
        return _jam.COMAKInverseKinematicsTool_copyProperty_results_directory(self, source)

    def append_results_directory(self, value):
        r"""
        append_results_directory(COMAKInverseKinematicsTool self, std::string const & value) -> int

        Parameters
        ----------
        value: std::string const &

        """
        return _jam.COMAKInverseKinematicsTool_append_results_directory(self, value)

    def constructProperty_results_directory(self, initValue):
        r"""
        constructProperty_results_directory(COMAKInverseKinematicsTool self, std::string const & initValue)

        Parameters
        ----------
        initValue: std::string const &

        """
        return _jam.COMAKInverseKinematicsTool_constructProperty_results_directory(self, initValue)

    def get_results_directory(self, *args):
        r"""
        get_results_directory(COMAKInverseKinematicsTool self, int i) -> std::string const

        Parameters
        ----------
        i: int

        get_results_directory(COMAKInverseKinematicsTool self) -> std::string const &
        """
        return _jam.COMAKInverseKinematicsTool_get_results_directory(self, *args)

    def upd_results_directory(self, *args):
        r"""
        upd_results_directory(COMAKInverseKinematicsTool self, int i) -> std::string

        Parameters
        ----------
        i: int

        upd_results_directory(COMAKInverseKinematicsTool self) -> std::string &
        """
        return _jam.COMAKInverseKinematicsTool_upd_results_directory(self, *args)

    def set_results_directory(self, *args):
        r"""
        set_results_directory(COMAKInverseKinematicsTool self, int i, std::string const & value)

        Parameters
        ----------
        i: int
        value: std::string const &

        set_results_directory(COMAKInverseKinematicsTool self, std::string const & value)

        Parameters
        ----------
        value: std::string const &

        """
        return _jam.COMAKInverseKinematicsTool_set_results_directory(self, *args)

    def copyProperty_results_prefix(self, source):
        r"""
        copyProperty_results_prefix(COMAKInverseKinematicsTool self, COMAKInverseKinematicsTool source)

        Parameters
        ----------
        source: OpenSim::COMAKInverseKinematicsTool::Self const &

        """
        return _jam.COMAKInverseKinematicsTool_copyProperty_results_prefix(self, source)

    def append_results_prefix(self, value):
        r"""
        append_results_prefix(COMAKInverseKinematicsTool self, std::string const & value) -> int

        Parameters
        ----------
        value: std::string const &

        """
        return _jam.COMAKInverseKinematicsTool_append_results_prefix(self, value)

    def constructProperty_results_prefix(self, initValue):
        r"""
        constructProperty_results_prefix(COMAKInverseKinematicsTool self, std::string const & initValue)

        Parameters
        ----------
        initValue: std::string const &

        """
        return _jam.COMAKInverseKinematicsTool_constructProperty_results_prefix(self, initValue)

    def get_results_prefix(self, *args):
        r"""
        get_results_prefix(COMAKInverseKinematicsTool self, int i) -> std::string const

        Parameters
        ----------
        i: int

        get_results_prefix(COMAKInverseKinematicsTool self) -> std::string const &
        """
        return _jam.COMAKInverseKinematicsTool_get_results_prefix(self, *args)

    def upd_results_prefix(self, *args):
        r"""
        upd_results_prefix(COMAKInverseKinematicsTool self, int i) -> std::string

        Parameters
        ----------
        i: int

        upd_results_prefix(COMAKInverseKinematicsTool self) -> std::string &
        """
        return _jam.COMAKInverseKinematicsTool_upd_results_prefix(self, *args)

    def set_results_prefix(self, *args):
        r"""
        set_results_prefix(COMAKInverseKinematicsTool self, int i, std::string const & value)

        Parameters
        ----------
        i: int
        value: std::string const &

        set_results_prefix(COMAKInverseKinematicsTool self, std::string const & value)

        Parameters
        ----------
        value: std::string const &

        """
        return _jam.COMAKInverseKinematicsTool_set_results_prefix(self, *args)

    def copyProperty_perform_secondary_constraint_sim(self, source):
        r"""
        copyProperty_perform_secondary_constraint_sim(COMAKInverseKinematicsTool self, COMAKInverseKinematicsTool source)

        Parameters
        ----------
        source: OpenSim::COMAKInverseKinematicsTool::Self const &

        """
        return _jam.COMAKInverseKinematicsTool_copyProperty_perform_secondary_constraint_sim(self, source)

    def append_perform_secondary_constraint_sim(self, value):
        r"""
        append_perform_secondary_constraint_sim(COMAKInverseKinematicsTool self, bool const & value) -> int

        Parameters
        ----------
        value: bool const &

        """
        return _jam.COMAKInverseKinematicsTool_append_perform_secondary_constraint_sim(self, value)

    def constructProperty_perform_secondary_constraint_sim(self, initValue):
        r"""
        constructProperty_perform_secondary_constraint_sim(COMAKInverseKinematicsTool self, bool const & initValue)

        Parameters
        ----------
        initValue: bool const &

        """
        return _jam.COMAKInverseKinematicsTool_constructProperty_perform_secondary_constraint_sim(self, initValue)

    def get_perform_secondary_constraint_sim(self, *args):
        r"""
        get_perform_secondary_constraint_sim(COMAKInverseKinematicsTool self, int i) -> bool const

        Parameters
        ----------
        i: int

        get_perform_secondary_constraint_sim(COMAKInverseKinematicsTool self) -> bool const &
        """
        return _jam.COMAKInverseKinematicsTool_get_perform_secondary_constraint_sim(self, *args)

    def upd_perform_secondary_constraint_sim(self, *args):
        r"""
        upd_perform_secondary_constraint_sim(COMAKInverseKinematicsTool self, int i) -> bool

        Parameters
        ----------
        i: int

        upd_perform_secondary_constraint_sim(COMAKInverseKinematicsTool self) -> bool &
        """
        return _jam.COMAKInverseKinematicsTool_upd_perform_secondary_constraint_sim(self, *args)

    def set_perform_secondary_constraint_sim(self, *args):
        r"""
        set_perform_secondary_constraint_sim(COMAKInverseKinematicsTool self, int i, bool const & value)

        Parameters
        ----------
        i: int
        value: bool const &

        set_perform_secondary_constraint_sim(COMAKInverseKinematicsTool self, bool const & value)

        Parameters
        ----------
        value: bool const &

        """
        return _jam.COMAKInverseKinematicsTool_set_perform_secondary_constraint_sim(self, *args)

    def copyProperty_secondary_coordinates(self, source):
        r"""
        copyProperty_secondary_coordinates(COMAKInverseKinematicsTool self, COMAKInverseKinematicsTool source)

        Parameters
        ----------
        source: OpenSim::COMAKInverseKinematicsTool::Self const &

        """
        return _jam.COMAKInverseKinematicsTool_copyProperty_secondary_coordinates(self, source)

    def get_secondary_coordinates(self, i):
        r"""
        get_secondary_coordinates(COMAKInverseKinematicsTool self, int i) -> std::string const &

        Parameters
        ----------
        i: int

        """
        return _jam.COMAKInverseKinematicsTool_get_secondary_coordinates(self, i)

    def upd_secondary_coordinates(self, i):
        r"""
        upd_secondary_coordinates(COMAKInverseKinematicsTool self, int i) -> std::string &

        Parameters
        ----------
        i: int

        """
        return _jam.COMAKInverseKinematicsTool_upd_secondary_coordinates(self, i)

    def set_secondary_coordinates(self, i, value):
        r"""
        set_secondary_coordinates(COMAKInverseKinematicsTool self, int i, std::string const & value)

        Parameters
        ----------
        i: int
        value: std::string const &

        """
        return _jam.COMAKInverseKinematicsTool_set_secondary_coordinates(self, i, value)

    def append_secondary_coordinates(self, value):
        r"""
        append_secondary_coordinates(COMAKInverseKinematicsTool self, std::string const & value) -> int

        Parameters
        ----------
        value: std::string const &

        """
        return _jam.COMAKInverseKinematicsTool_append_secondary_coordinates(self, value)

    def constructProperty_secondary_coordinates(self):
        r"""constructProperty_secondary_coordinates(COMAKInverseKinematicsTool self)"""
        return _jam.COMAKInverseKinematicsTool_constructProperty_secondary_coordinates(self)

    def copyProperty_secondary_coupled_coordinate(self, source):
        r"""
        copyProperty_secondary_coupled_coordinate(COMAKInverseKinematicsTool self, COMAKInverseKinematicsTool source)

        Parameters
        ----------
        source: OpenSim::COMAKInverseKinematicsTool::Self const &

        """
        return _jam.COMAKInverseKinematicsTool_copyProperty_secondary_coupled_coordinate(self, source)

    def append_secondary_coupled_coordinate(self, value):
        r"""
        append_secondary_coupled_coordinate(COMAKInverseKinematicsTool self, std::string const & value) -> int

        Parameters
        ----------
        value: std::string const &

        """
        return _jam.COMAKInverseKinematicsTool_append_secondary_coupled_coordinate(self, value)

    def constructProperty_secondary_coupled_coordinate(self, *args):
        r"""
        constructProperty_secondary_coupled_coordinate(COMAKInverseKinematicsTool self)
        constructProperty_secondary_coupled_coordinate(COMAKInverseKinematicsTool self, std::string const & initValue)

        Parameters
        ----------
        initValue: std::string const &

        """
        return _jam.COMAKInverseKinematicsTool_constructProperty_secondary_coupled_coordinate(self, *args)

    def get_secondary_coupled_coordinate(self, *args):
        r"""
        get_secondary_coupled_coordinate(COMAKInverseKinematicsTool self, int i) -> std::string const

        Parameters
        ----------
        i: int

        get_secondary_coupled_coordinate(COMAKInverseKinematicsTool self) -> std::string const &
        """
        return _jam.COMAKInverseKinematicsTool_get_secondary_coupled_coordinate(self, *args)

    def upd_secondary_coupled_coordinate(self, *args):
        r"""
        upd_secondary_coupled_coordinate(COMAKInverseKinematicsTool self, int i) -> std::string

        Parameters
        ----------
        i: int

        upd_secondary_coupled_coordinate(COMAKInverseKinematicsTool self) -> std::string &
        """
        return _jam.COMAKInverseKinematicsTool_upd_secondary_coupled_coordinate(self, *args)

    def set_secondary_coupled_coordinate(self, *args):
        r"""
        set_secondary_coupled_coordinate(COMAKInverseKinematicsTool self, int i, std::string const & value)

        Parameters
        ----------
        i: int
        value: std::string const &

        set_secondary_coupled_coordinate(COMAKInverseKinematicsTool self, std::string const & value)

        Parameters
        ----------
        value: std::string const &

        """
        return _jam.COMAKInverseKinematicsTool_set_secondary_coupled_coordinate(self, *args)

    def copyProperty_secondary_constraint_sim_settle_threshold(self, source):
        r"""
        copyProperty_secondary_constraint_sim_settle_threshold(COMAKInverseKinematicsTool self, COMAKInverseKinematicsTool source)

        Parameters
        ----------
        source: OpenSim::COMAKInverseKinematicsTool::Self const &

        """
        return _jam.COMAKInverseKinematicsTool_copyProperty_secondary_constraint_sim_settle_threshold(self, source)

    def append_secondary_constraint_sim_settle_threshold(self, value):
        r"""
        append_secondary_constraint_sim_settle_threshold(COMAKInverseKinematicsTool self, double const & value) -> int

        Parameters
        ----------
        value: double const &

        """
        return _jam.COMAKInverseKinematicsTool_append_secondary_constraint_sim_settle_threshold(self, value)

    def constructProperty_secondary_constraint_sim_settle_threshold(self, initValue):
        r"""
        constructProperty_secondary_constraint_sim_settle_threshold(COMAKInverseKinematicsTool self, double const & initValue)

        Parameters
        ----------
        initValue: double const &

        """
        return _jam.COMAKInverseKinematicsTool_constructProperty_secondary_constraint_sim_settle_threshold(self, initValue)

    def get_secondary_constraint_sim_settle_threshold(self, *args):
        r"""
        get_secondary_constraint_sim_settle_threshold(COMAKInverseKinematicsTool self, int i) -> double const

        Parameters
        ----------
        i: int

        get_secondary_constraint_sim_settle_threshold(COMAKInverseKinematicsTool self) -> double const &
        """
        return _jam.COMAKInverseKinematicsTool_get_secondary_constraint_sim_settle_threshold(self, *args)

    def upd_secondary_constraint_sim_settle_threshold(self, *args):
        r"""
        upd_secondary_constraint_sim_settle_threshold(COMAKInverseKinematicsTool self, int i) -> double

        Parameters
        ----------
        i: int

        upd_secondary_constraint_sim_settle_threshold(COMAKInverseKinematicsTool self) -> double &
        """
        return _jam.COMAKInverseKinematicsTool_upd_secondary_constraint_sim_settle_threshold(self, *args)

    def set_secondary_constraint_sim_settle_threshold(self, *args):
        r"""
        set_secondary_constraint_sim_settle_threshold(COMAKInverseKinematicsTool self, int i, double const & value)

        Parameters
        ----------
        i: int
        value: double const &

        set_secondary_constraint_sim_settle_threshold(COMAKInverseKinematicsTool self, double const & value)

        Parameters
        ----------
        value: double const &

        """
        return _jam.COMAKInverseKinematicsTool_set_secondary_constraint_sim_settle_threshold(self, *args)

    def copyProperty_secondary_constraint_sim_sweep_time(self, source):
        r"""
        copyProperty_secondary_constraint_sim_sweep_time(COMAKInverseKinematicsTool self, COMAKInverseKinematicsTool source)

        Parameters
        ----------
        source: OpenSim::COMAKInverseKinematicsTool::Self const &

        """
        return _jam.COMAKInverseKinematicsTool_copyProperty_secondary_constraint_sim_sweep_time(self, source)

    def append_secondary_constraint_sim_sweep_time(self, value):
        r"""
        append_secondary_constraint_sim_sweep_time(COMAKInverseKinematicsTool self, double const & value) -> int

        Parameters
        ----------
        value: double const &

        """
        return _jam.COMAKInverseKinematicsTool_append_secondary_constraint_sim_sweep_time(self, value)

    def constructProperty_secondary_constraint_sim_sweep_time(self, initValue):
        r"""
        constructProperty_secondary_constraint_sim_sweep_time(COMAKInverseKinematicsTool self, double const & initValue)

        Parameters
        ----------
        initValue: double const &

        """
        return _jam.COMAKInverseKinematicsTool_constructProperty_secondary_constraint_sim_sweep_time(self, initValue)

    def get_secondary_constraint_sim_sweep_time(self, *args):
        r"""
        get_secondary_constraint_sim_sweep_time(COMAKInverseKinematicsTool self, int i) -> double const

        Parameters
        ----------
        i: int

        get_secondary_constraint_sim_sweep_time(COMAKInverseKinematicsTool self) -> double const &
        """
        return _jam.COMAKInverseKinematicsTool_get_secondary_constraint_sim_sweep_time(self, *args)

    def upd_secondary_constraint_sim_sweep_time(self, *args):
        r"""
        upd_secondary_constraint_sim_sweep_time(COMAKInverseKinematicsTool self, int i) -> double

        Parameters
        ----------
        i: int

        upd_secondary_constraint_sim_sweep_time(COMAKInverseKinematicsTool self) -> double &
        """
        return _jam.COMAKInverseKinematicsTool_upd_secondary_constraint_sim_sweep_time(self, *args)

    def set_secondary_constraint_sim_sweep_time(self, *args):
        r"""
        set_secondary_constraint_sim_sweep_time(COMAKInverseKinematicsTool self, int i, double const & value)

        Parameters
        ----------
        i: int
        value: double const &

        set_secondary_constraint_sim_sweep_time(COMAKInverseKinematicsTool self, double const & value)

        Parameters
        ----------
        value: double const &

        """
        return _jam.COMAKInverseKinematicsTool_set_secondary_constraint_sim_sweep_time(self, *args)

    def copyProperty_secondary_coupled_coordinate_start_value(self, source):
        r"""
        copyProperty_secondary_coupled_coordinate_start_value(COMAKInverseKinematicsTool self, COMAKInverseKinematicsTool source)

        Parameters
        ----------
        source: OpenSim::COMAKInverseKinematicsTool::Self const &

        """
        return _jam.COMAKInverseKinematicsTool_copyProperty_secondary_coupled_coordinate_start_value(self, source)

    def append_secondary_coupled_coordinate_start_value(self, value):
        r"""
        append_secondary_coupled_coordinate_start_value(COMAKInverseKinematicsTool self, double const & value) -> int

        Parameters
        ----------
        value: double const &

        """
        return _jam.COMAKInverseKinematicsTool_append_secondary_coupled_coordinate_start_value(self, value)

    def constructProperty_secondary_coupled_coordinate_start_value(self, initValue):
        r"""
        constructProperty_secondary_coupled_coordinate_start_value(COMAKInverseKinematicsTool self, double const & initValue)

        Parameters
        ----------
        initValue: double const &

        """
        return _jam.COMAKInverseKinematicsTool_constructProperty_secondary_coupled_coordinate_start_value(self, initValue)

    def get_secondary_coupled_coordinate_start_value(self, *args):
        r"""
        get_secondary_coupled_coordinate_start_value(COMAKInverseKinematicsTool self, int i) -> double const

        Parameters
        ----------
        i: int

        get_secondary_coupled_coordinate_start_value(COMAKInverseKinematicsTool self) -> double const &
        """
        return _jam.COMAKInverseKinematicsTool_get_secondary_coupled_coordinate_start_value(self, *args)

    def upd_secondary_coupled_coordinate_start_value(self, *args):
        r"""
        upd_secondary_coupled_coordinate_start_value(COMAKInverseKinematicsTool self, int i) -> double

        Parameters
        ----------
        i: int

        upd_secondary_coupled_coordinate_start_value(COMAKInverseKinematicsTool self) -> double &
        """
        return _jam.COMAKInverseKinematicsTool_upd_secondary_coupled_coordinate_start_value(self, *args)

    def set_secondary_coupled_coordinate_start_value(self, *args):
        r"""
        set_secondary_coupled_coordinate_start_value(COMAKInverseKinematicsTool self, int i, double const & value)

        Parameters
        ----------
        i: int
        value: double const &

        set_secondary_coupled_coordinate_start_value(COMAKInverseKinematicsTool self, double const & value)

        Parameters
        ----------
        value: double const &

        """
        return _jam.COMAKInverseKinematicsTool_set_secondary_coupled_coordinate_start_value(self, *args)

    def copyProperty_secondary_coupled_coordinate_stop_value(self, source):
        r"""
        copyProperty_secondary_coupled_coordinate_stop_value(COMAKInverseKinematicsTool self, COMAKInverseKinematicsTool source)

        Parameters
        ----------
        source: OpenSim::COMAKInverseKinematicsTool::Self const &

        """
        return _jam.COMAKInverseKinematicsTool_copyProperty_secondary_coupled_coordinate_stop_value(self, source)

    def append_secondary_coupled_coordinate_stop_value(self, value):
        r"""
        append_secondary_coupled_coordinate_stop_value(COMAKInverseKinematicsTool self, double const & value) -> int

        Parameters
        ----------
        value: double const &

        """
        return _jam.COMAKInverseKinematicsTool_append_secondary_coupled_coordinate_stop_value(self, value)

    def constructProperty_secondary_coupled_coordinate_stop_value(self, initValue):
        r"""
        constructProperty_secondary_coupled_coordinate_stop_value(COMAKInverseKinematicsTool self, double const & initValue)

        Parameters
        ----------
        initValue: double const &

        """
        return _jam.COMAKInverseKinematicsTool_constructProperty_secondary_coupled_coordinate_stop_value(self, initValue)

    def get_secondary_coupled_coordinate_stop_value(self, *args):
        r"""
        get_secondary_coupled_coordinate_stop_value(COMAKInverseKinematicsTool self, int i) -> double const

        Parameters
        ----------
        i: int

        get_secondary_coupled_coordinate_stop_value(COMAKInverseKinematicsTool self) -> double const &
        """
        return _jam.COMAKInverseKinematicsTool_get_secondary_coupled_coordinate_stop_value(self, *args)

    def upd_secondary_coupled_coordinate_stop_value(self, *args):
        r"""
        upd_secondary_coupled_coordinate_stop_value(COMAKInverseKinematicsTool self, int i) -> double

        Parameters
        ----------
        i: int

        upd_secondary_coupled_coordinate_stop_value(COMAKInverseKinematicsTool self) -> double &
        """
        return _jam.COMAKInverseKinematicsTool_upd_secondary_coupled_coordinate_stop_value(self, *args)

    def set_secondary_coupled_coordinate_stop_value(self, *args):
        r"""
        set_secondary_coupled_coordinate_stop_value(COMAKInverseKinematicsTool self, int i, double const & value)

        Parameters
        ----------
        i: int
        value: double const &

        set_secondary_coupled_coordinate_stop_value(COMAKInverseKinematicsTool self, double const & value)

        Parameters
        ----------
        value: double const &

        """
        return _jam.COMAKInverseKinematicsTool_set_secondary_coupled_coordinate_stop_value(self, *args)

    def copyProperty_secondary_constraint_sim_integrator_accuracy(self, source):
        r"""
        copyProperty_secondary_constraint_sim_integrator_accuracy(COMAKInverseKinematicsTool self, COMAKInverseKinematicsTool source)

        Parameters
        ----------
        source: OpenSim::COMAKInverseKinematicsTool::Self const &

        """
        return _jam.COMAKInverseKinematicsTool_copyProperty_secondary_constraint_sim_integrator_accuracy(self, source)

    def append_secondary_constraint_sim_integrator_accuracy(self, value):
        r"""
        append_secondary_constraint_sim_integrator_accuracy(COMAKInverseKinematicsTool self, double const & value) -> int

        Parameters
        ----------
        value: double const &

        """
        return _jam.COMAKInverseKinematicsTool_append_secondary_constraint_sim_integrator_accuracy(self, value)

    def constructProperty_secondary_constraint_sim_integrator_accuracy(self, initValue):
        r"""
        constructProperty_secondary_constraint_sim_integrator_accuracy(COMAKInverseKinematicsTool self, double const & initValue)

        Parameters
        ----------
        initValue: double const &

        """
        return _jam.COMAKInverseKinematicsTool_constructProperty_secondary_constraint_sim_integrator_accuracy(self, initValue)

    def get_secondary_constraint_sim_integrator_accuracy(self, *args):
        r"""
        get_secondary_constraint_sim_integrator_accuracy(COMAKInverseKinematicsTool self, int i) -> double const

        Parameters
        ----------
        i: int

        get_secondary_constraint_sim_integrator_accuracy(COMAKInverseKinematicsTool self) -> double const &
        """
        return _jam.COMAKInverseKinematicsTool_get_secondary_constraint_sim_integrator_accuracy(self, *args)

    def upd_secondary_constraint_sim_integrator_accuracy(self, *args):
        r"""
        upd_secondary_constraint_sim_integrator_accuracy(COMAKInverseKinematicsTool self, int i) -> double

        Parameters
        ----------
        i: int

        upd_secondary_constraint_sim_integrator_accuracy(COMAKInverseKinematicsTool self) -> double &
        """
        return _jam.COMAKInverseKinematicsTool_upd_secondary_constraint_sim_integrator_accuracy(self, *args)

    def set_secondary_constraint_sim_integrator_accuracy(self, *args):
        r"""
        set_secondary_constraint_sim_integrator_accuracy(COMAKInverseKinematicsTool self, int i, double const & value)

        Parameters
        ----------
        i: int
        value: double const &

        set_secondary_constraint_sim_integrator_accuracy(COMAKInverseKinematicsTool self, double const & value)

        Parameters
        ----------
        value: double const &

        """
        return _jam.COMAKInverseKinematicsTool_set_secondary_constraint_sim_integrator_accuracy(self, *args)

    def copyProperty_secondary_constraint_sim_internal_step_limit(self, source):
        r"""
        copyProperty_secondary_constraint_sim_internal_step_limit(COMAKInverseKinematicsTool self, COMAKInverseKinematicsTool source)

        Parameters
        ----------
        source: OpenSim::COMAKInverseKinematicsTool::Self const &

        """
        return _jam.COMAKInverseKinematicsTool_copyProperty_secondary_constraint_sim_internal_step_limit(self, source)

    def append_secondary_constraint_sim_internal_step_limit(self, value):
        r"""
        append_secondary_constraint_sim_internal_step_limit(COMAKInverseKinematicsTool self, int const & value) -> int

        Parameters
        ----------
        value: int const &

        """
        return _jam.COMAKInverseKinematicsTool_append_secondary_constraint_sim_internal_step_limit(self, value)

    def constructProperty_secondary_constraint_sim_internal_step_limit(self, initValue):
        r"""
        constructProperty_secondary_constraint_sim_internal_step_limit(COMAKInverseKinematicsTool self, int const & initValue)

        Parameters
        ----------
        initValue: int const &

        """
        return _jam.COMAKInverseKinematicsTool_constructProperty_secondary_constraint_sim_internal_step_limit(self, initValue)

    def get_secondary_constraint_sim_internal_step_limit(self, *args):
        r"""
        get_secondary_constraint_sim_internal_step_limit(COMAKInverseKinematicsTool self, int i) -> int const

        Parameters
        ----------
        i: int

        get_secondary_constraint_sim_internal_step_limit(COMAKInverseKinematicsTool self) -> int const &
        """
        return _jam.COMAKInverseKinematicsTool_get_secondary_constraint_sim_internal_step_limit(self, *args)

    def upd_secondary_constraint_sim_internal_step_limit(self, *args):
        r"""
        upd_secondary_constraint_sim_internal_step_limit(COMAKInverseKinematicsTool self, int i) -> int

        Parameters
        ----------
        i: int

        upd_secondary_constraint_sim_internal_step_limit(COMAKInverseKinematicsTool self) -> int &
        """
        return _jam.COMAKInverseKinematicsTool_upd_secondary_constraint_sim_internal_step_limit(self, *args)

    def set_secondary_constraint_sim_internal_step_limit(self, *args):
        r"""
        set_secondary_constraint_sim_internal_step_limit(COMAKInverseKinematicsTool self, int i, int const & value)

        Parameters
        ----------
        i: int
        value: int const &

        set_secondary_constraint_sim_internal_step_limit(COMAKInverseKinematicsTool self, int const & value)

        Parameters
        ----------
        value: int const &

        """
        return _jam.COMAKInverseKinematicsTool_set_secondary_constraint_sim_internal_step_limit(self, *args)

    def copyProperty_secondary_constraint_function_file(self, source):
        r"""
        copyProperty_secondary_constraint_function_file(COMAKInverseKinematicsTool self, COMAKInverseKinematicsTool source)

        Parameters
        ----------
        source: OpenSim::COMAKInverseKinematicsTool::Self const &

        """
        return _jam.COMAKInverseKinematicsTool_copyProperty_secondary_constraint_function_file(self, source)

    def append_secondary_constraint_function_file(self, value):
        r"""
        append_secondary_constraint_function_file(COMAKInverseKinematicsTool self, std::string const & value) -> int

        Parameters
        ----------
        value: std::string const &

        """
        return _jam.COMAKInverseKinematicsTool_append_secondary_constraint_function_file(self, value)

    def constructProperty_secondary_constraint_function_file(self, initValue):
        r"""
        constructProperty_secondary_constraint_function_file(COMAKInverseKinematicsTool self, std::string const & initValue)

        Parameters
        ----------
        initValue: std::string const &

        """
        return _jam.COMAKInverseKinematicsTool_constructProperty_secondary_constraint_function_file(self, initValue)

    def get_secondary_constraint_function_file(self, *args):
        r"""
        get_secondary_constraint_function_file(COMAKInverseKinematicsTool self, int i) -> std::string const

        Parameters
        ----------
        i: int

        get_secondary_constraint_function_file(COMAKInverseKinematicsTool self) -> std::string const &
        """
        return _jam.COMAKInverseKinematicsTool_get_secondary_constraint_function_file(self, *args)

    def upd_secondary_constraint_function_file(self, *args):
        r"""
        upd_secondary_constraint_function_file(COMAKInverseKinematicsTool self, int i) -> std::string

        Parameters
        ----------
        i: int

        upd_secondary_constraint_function_file(COMAKInverseKinematicsTool self) -> std::string &
        """
        return _jam.COMAKInverseKinematicsTool_upd_secondary_constraint_function_file(self, *args)

    def set_secondary_constraint_function_file(self, *args):
        r"""
        set_secondary_constraint_function_file(COMAKInverseKinematicsTool self, int i, std::string const & value)

        Parameters
        ----------
        i: int
        value: std::string const &

        set_secondary_constraint_function_file(COMAKInverseKinematicsTool self, std::string const & value)

        Parameters
        ----------
        value: std::string const &

        """
        return _jam.COMAKInverseKinematicsTool_set_secondary_constraint_function_file(self, *args)

    def copyProperty_constraint_function_num_interpolation_points(self, source):
        r"""
        copyProperty_constraint_function_num_interpolation_points(COMAKInverseKinematicsTool self, COMAKInverseKinematicsTool source)

        Parameters
        ----------
        source: OpenSim::COMAKInverseKinematicsTool::Self const &

        """
        return _jam.COMAKInverseKinematicsTool_copyProperty_constraint_function_num_interpolation_points(self, source)

    def append_constraint_function_num_interpolation_points(self, value):
        r"""
        append_constraint_function_num_interpolation_points(COMAKInverseKinematicsTool self, int const & value) -> int

        Parameters
        ----------
        value: int const &

        """
        return _jam.COMAKInverseKinematicsTool_append_constraint_function_num_interpolation_points(self, value)

    def constructProperty_constraint_function_num_interpolation_points(self, initValue):
        r"""
        constructProperty_constraint_function_num_interpolation_points(COMAKInverseKinematicsTool self, int const & initValue)

        Parameters
        ----------
        initValue: int const &

        """
        return _jam.COMAKInverseKinematicsTool_constructProperty_constraint_function_num_interpolation_points(self, initValue)

    def get_constraint_function_num_interpolation_points(self, *args):
        r"""
        get_constraint_function_num_interpolation_points(COMAKInverseKinematicsTool self, int i) -> int const

        Parameters
        ----------
        i: int

        get_constraint_function_num_interpolation_points(COMAKInverseKinematicsTool self) -> int const &
        """
        return _jam.COMAKInverseKinematicsTool_get_constraint_function_num_interpolation_points(self, *args)

    def upd_constraint_function_num_interpolation_points(self, *args):
        r"""
        upd_constraint_function_num_interpolation_points(COMAKInverseKinematicsTool self, int i) -> int

        Parameters
        ----------
        i: int

        upd_constraint_function_num_interpolation_points(COMAKInverseKinematicsTool self) -> int &
        """
        return _jam.COMAKInverseKinematicsTool_upd_constraint_function_num_interpolation_points(self, *args)

    def set_constraint_function_num_interpolation_points(self, *args):
        r"""
        set_constraint_function_num_interpolation_points(COMAKInverseKinematicsTool self, int i, int const & value)

        Parameters
        ----------
        i: int
        value: int const &

        set_constraint_function_num_interpolation_points(COMAKInverseKinematicsTool self, int const & value)

        Parameters
        ----------
        value: int const &

        """
        return _jam.COMAKInverseKinematicsTool_set_constraint_function_num_interpolation_points(self, *args)

    def copyProperty_print_secondary_constraint_sim_results(self, source):
        r"""
        copyProperty_print_secondary_constraint_sim_results(COMAKInverseKinematicsTool self, COMAKInverseKinematicsTool source)

        Parameters
        ----------
        source: OpenSim::COMAKInverseKinematicsTool::Self const &

        """
        return _jam.COMAKInverseKinematicsTool_copyProperty_print_secondary_constraint_sim_results(self, source)

    def append_print_secondary_constraint_sim_results(self, value):
        r"""
        append_print_secondary_constraint_sim_results(COMAKInverseKinematicsTool self, bool const & value) -> int

        Parameters
        ----------
        value: bool const &

        """
        return _jam.COMAKInverseKinematicsTool_append_print_secondary_constraint_sim_results(self, value)

    def constructProperty_print_secondary_constraint_sim_results(self, initValue):
        r"""
        constructProperty_print_secondary_constraint_sim_results(COMAKInverseKinematicsTool self, bool const & initValue)

        Parameters
        ----------
        initValue: bool const &

        """
        return _jam.COMAKInverseKinematicsTool_constructProperty_print_secondary_constraint_sim_results(self, initValue)

    def get_print_secondary_constraint_sim_results(self, *args):
        r"""
        get_print_secondary_constraint_sim_results(COMAKInverseKinematicsTool self, int i) -> bool const

        Parameters
        ----------
        i: int

        get_print_secondary_constraint_sim_results(COMAKInverseKinematicsTool self) -> bool const &
        """
        return _jam.COMAKInverseKinematicsTool_get_print_secondary_constraint_sim_results(self, *args)

    def upd_print_secondary_constraint_sim_results(self, *args):
        r"""
        upd_print_secondary_constraint_sim_results(COMAKInverseKinematicsTool self, int i) -> bool

        Parameters
        ----------
        i: int

        upd_print_secondary_constraint_sim_results(COMAKInverseKinematicsTool self) -> bool &
        """
        return _jam.COMAKInverseKinematicsTool_upd_print_secondary_constraint_sim_results(self, *args)

    def set_print_secondary_constraint_sim_results(self, *args):
        r"""
        set_print_secondary_constraint_sim_results(COMAKInverseKinematicsTool self, int i, bool const & value)

        Parameters
        ----------
        i: int
        value: bool const &

        set_print_secondary_constraint_sim_results(COMAKInverseKinematicsTool self, bool const & value)

        Parameters
        ----------
        value: bool const &

        """
        return _jam.COMAKInverseKinematicsTool_set_print_secondary_constraint_sim_results(self, *args)

    def copyProperty_constrained_model_file(self, source):
        r"""
        copyProperty_constrained_model_file(COMAKInverseKinematicsTool self, COMAKInverseKinematicsTool source)

        Parameters
        ----------
        source: OpenSim::COMAKInverseKinematicsTool::Self const &

        """
        return _jam.COMAKInverseKinematicsTool_copyProperty_constrained_model_file(self, source)

    def append_constrained_model_file(self, value):
        r"""
        append_constrained_model_file(COMAKInverseKinematicsTool self, std::string const & value) -> int

        Parameters
        ----------
        value: std::string const &

        """
        return _jam.COMAKInverseKinematicsTool_append_constrained_model_file(self, value)

    def constructProperty_constrained_model_file(self, initValue):
        r"""
        constructProperty_constrained_model_file(COMAKInverseKinematicsTool self, std::string const & initValue)

        Parameters
        ----------
        initValue: std::string const &

        """
        return _jam.COMAKInverseKinematicsTool_constructProperty_constrained_model_file(self, initValue)

    def get_constrained_model_file(self, *args):
        r"""
        get_constrained_model_file(COMAKInverseKinematicsTool self, int i) -> std::string const

        Parameters
        ----------
        i: int

        get_constrained_model_file(COMAKInverseKinematicsTool self) -> std::string const &
        """
        return _jam.COMAKInverseKinematicsTool_get_constrained_model_file(self, *args)

    def upd_constrained_model_file(self, *args):
        r"""
        upd_constrained_model_file(COMAKInverseKinematicsTool self, int i) -> std::string

        Parameters
        ----------
        i: int

        upd_constrained_model_file(COMAKInverseKinematicsTool self) -> std::string &
        """
        return _jam.COMAKInverseKinematicsTool_upd_constrained_model_file(self, *args)

    def set_constrained_model_file(self, *args):
        r"""
        set_constrained_model_file(COMAKInverseKinematicsTool self, int i, std::string const & value)

        Parameters
        ----------
        i: int
        value: std::string const &

        set_constrained_model_file(COMAKInverseKinematicsTool self, std::string const & value)

        Parameters
        ----------
        value: std::string const &

        """
        return _jam.COMAKInverseKinematicsTool_set_constrained_model_file(self, *args)

    def copyProperty_perform_inverse_kinematics(self, source):
        r"""
        copyProperty_perform_inverse_kinematics(COMAKInverseKinematicsTool self, COMAKInverseKinematicsTool source)

        Parameters
        ----------
        source: OpenSim::COMAKInverseKinematicsTool::Self const &

        """
        return _jam.COMAKInverseKinematicsTool_copyProperty_perform_inverse_kinematics(self, source)

    def append_perform_inverse_kinematics(self, value):
        r"""
        append_perform_inverse_kinematics(COMAKInverseKinematicsTool self, bool const & value) -> int

        Parameters
        ----------
        value: bool const &

        """
        return _jam.COMAKInverseKinematicsTool_append_perform_inverse_kinematics(self, value)

    def constructProperty_perform_inverse_kinematics(self, initValue):
        r"""
        constructProperty_perform_inverse_kinematics(COMAKInverseKinematicsTool self, bool const & initValue)

        Parameters
        ----------
        initValue: bool const &

        """
        return _jam.COMAKInverseKinematicsTool_constructProperty_perform_inverse_kinematics(self, initValue)

    def get_perform_inverse_kinematics(self, *args):
        r"""
        get_perform_inverse_kinematics(COMAKInverseKinematicsTool self, int i) -> bool const

        Parameters
        ----------
        i: int

        get_perform_inverse_kinematics(COMAKInverseKinematicsTool self) -> bool const &
        """
        return _jam.COMAKInverseKinematicsTool_get_perform_inverse_kinematics(self, *args)

    def upd_perform_inverse_kinematics(self, *args):
        r"""
        upd_perform_inverse_kinematics(COMAKInverseKinematicsTool self, int i) -> bool

        Parameters
        ----------
        i: int

        upd_perform_inverse_kinematics(COMAKInverseKinematicsTool self) -> bool &
        """
        return _jam.COMAKInverseKinematicsTool_upd_perform_inverse_kinematics(self, *args)

    def set_perform_inverse_kinematics(self, *args):
        r"""
        set_perform_inverse_kinematics(COMAKInverseKinematicsTool self, int i, bool const & value)

        Parameters
        ----------
        i: int
        value: bool const &

        set_perform_inverse_kinematics(COMAKInverseKinematicsTool self, bool const & value)

        Parameters
        ----------
        value: bool const &

        """
        return _jam.COMAKInverseKinematicsTool_set_perform_inverse_kinematics(self, *args)

    def copyProperty_marker_file(self, source):
        r"""
        copyProperty_marker_file(COMAKInverseKinematicsTool self, COMAKInverseKinematicsTool source)

        Parameters
        ----------
        source: OpenSim::COMAKInverseKinematicsTool::Self const &

        """
        return _jam.COMAKInverseKinematicsTool_copyProperty_marker_file(self, source)

    def append_marker_file(self, value):
        r"""
        append_marker_file(COMAKInverseKinematicsTool self, std::string const & value) -> int

        Parameters
        ----------
        value: std::string const &

        """
        return _jam.COMAKInverseKinematicsTool_append_marker_file(self, value)

    def constructProperty_marker_file(self, initValue):
        r"""
        constructProperty_marker_file(COMAKInverseKinematicsTool self, std::string const & initValue)

        Parameters
        ----------
        initValue: std::string const &

        """
        return _jam.COMAKInverseKinematicsTool_constructProperty_marker_file(self, initValue)

    def get_marker_file(self, *args):
        r"""
        get_marker_file(COMAKInverseKinematicsTool self, int i) -> std::string const

        Parameters
        ----------
        i: int

        get_marker_file(COMAKInverseKinematicsTool self) -> std::string const &
        """
        return _jam.COMAKInverseKinematicsTool_get_marker_file(self, *args)

    def upd_marker_file(self, *args):
        r"""
        upd_marker_file(COMAKInverseKinematicsTool self, int i) -> std::string

        Parameters
        ----------
        i: int

        upd_marker_file(COMAKInverseKinematicsTool self) -> std::string &
        """
        return _jam.COMAKInverseKinematicsTool_upd_marker_file(self, *args)

    def set_marker_file(self, *args):
        r"""
        set_marker_file(COMAKInverseKinematicsTool self, int i, std::string const & value)

        Parameters
        ----------
        i: int
        value: std::string const &

        set_marker_file(COMAKInverseKinematicsTool self, std::string const & value)

        Parameters
        ----------
        value: std::string const &

        """
        return _jam.COMAKInverseKinematicsTool_set_marker_file(self, *args)

    def copyProperty_coordinate_file(self, source):
        r"""
        copyProperty_coordinate_file(COMAKInverseKinematicsTool self, COMAKInverseKinematicsTool source)

        Parameters
        ----------
        source: OpenSim::COMAKInverseKinematicsTool::Self const &

        """
        return _jam.COMAKInverseKinematicsTool_copyProperty_coordinate_file(self, source)

    def append_coordinate_file(self, value):
        r"""
        append_coordinate_file(COMAKInverseKinematicsTool self, std::string const & value) -> int

        Parameters
        ----------
        value: std::string const &

        """
        return _jam.COMAKInverseKinematicsTool_append_coordinate_file(self, value)

    def constructProperty_coordinate_file(self, initValue):
        r"""
        constructProperty_coordinate_file(COMAKInverseKinematicsTool self, std::string const & initValue)

        Parameters
        ----------
        initValue: std::string const &

        """
        return _jam.COMAKInverseKinematicsTool_constructProperty_coordinate_file(self, initValue)

    def get_coordinate_file(self, *args):
        r"""
        get_coordinate_file(COMAKInverseKinematicsTool self, int i) -> std::string const

        Parameters
        ----------
        i: int

        get_coordinate_file(COMAKInverseKinematicsTool self) -> std::string const &
        """
        return _jam.COMAKInverseKinematicsTool_get_coordinate_file(self, *args)

    def upd_coordinate_file(self, *args):
        r"""
        upd_coordinate_file(COMAKInverseKinematicsTool self, int i) -> std::string

        Parameters
        ----------
        i: int

        upd_coordinate_file(COMAKInverseKinematicsTool self) -> std::string &
        """
        return _jam.COMAKInverseKinematicsTool_upd_coordinate_file(self, *args)

    def set_coordinate_file(self, *args):
        r"""
        set_coordinate_file(COMAKInverseKinematicsTool self, int i, std::string const & value)

        Parameters
        ----------
        i: int
        value: std::string const &

        set_coordinate_file(COMAKInverseKinematicsTool self, std::string const & value)

        Parameters
        ----------
        value: std::string const &

        """
        return _jam.COMAKInverseKinematicsTool_set_coordinate_file(self, *args)

    def copyProperty_output_motion_file(self, source):
        r"""
        copyProperty_output_motion_file(COMAKInverseKinematicsTool self, COMAKInverseKinematicsTool source)

        Parameters
        ----------
        source: OpenSim::COMAKInverseKinematicsTool::Self const &

        """
        return _jam.COMAKInverseKinematicsTool_copyProperty_output_motion_file(self, source)

    def append_output_motion_file(self, value):
        r"""
        append_output_motion_file(COMAKInverseKinematicsTool self, std::string const & value) -> int

        Parameters
        ----------
        value: std::string const &

        """
        return _jam.COMAKInverseKinematicsTool_append_output_motion_file(self, value)

    def constructProperty_output_motion_file(self, initValue):
        r"""
        constructProperty_output_motion_file(COMAKInverseKinematicsTool self, std::string const & initValue)

        Parameters
        ----------
        initValue: std::string const &

        """
        return _jam.COMAKInverseKinematicsTool_constructProperty_output_motion_file(self, initValue)

    def get_output_motion_file(self, *args):
        r"""
        get_output_motion_file(COMAKInverseKinematicsTool self, int i) -> std::string const

        Parameters
        ----------
        i: int

        get_output_motion_file(COMAKInverseKinematicsTool self) -> std::string const &
        """
        return _jam.COMAKInverseKinematicsTool_get_output_motion_file(self, *args)

    def upd_output_motion_file(self, *args):
        r"""
        upd_output_motion_file(COMAKInverseKinematicsTool self, int i) -> std::string

        Parameters
        ----------
        i: int

        upd_output_motion_file(COMAKInverseKinematicsTool self) -> std::string &
        """
        return _jam.COMAKInverseKinematicsTool_upd_output_motion_file(self, *args)

    def set_output_motion_file(self, *args):
        r"""
        set_output_motion_file(COMAKInverseKinematicsTool self, int i, std::string const & value)

        Parameters
        ----------
        i: int
        value: std::string const &

        set_output_motion_file(COMAKInverseKinematicsTool self, std::string const & value)

        Parameters
        ----------
        value: std::string const &

        """
        return _jam.COMAKInverseKinematicsTool_set_output_motion_file(self, *args)

    def copyProperty_time_range(self, source):
        r"""
        copyProperty_time_range(COMAKInverseKinematicsTool self, COMAKInverseKinematicsTool source)

        Parameters
        ----------
        source: OpenSim::COMAKInverseKinematicsTool::Self const &

        """
        return _jam.COMAKInverseKinematicsTool_copyProperty_time_range(self, source)

    def get_time_range(self, i):
        r"""
        get_time_range(COMAKInverseKinematicsTool self, int i) -> double const &

        Parameters
        ----------
        i: int

        """
        return _jam.COMAKInverseKinematicsTool_get_time_range(self, i)

    def upd_time_range(self, i):
        r"""
        upd_time_range(COMAKInverseKinematicsTool self, int i) -> double &

        Parameters
        ----------
        i: int

        """
        return _jam.COMAKInverseKinematicsTool_upd_time_range(self, i)

    def set_time_range(self, i, value):
        r"""
        set_time_range(COMAKInverseKinematicsTool self, int i, double const & value)

        Parameters
        ----------
        i: int
        value: double const &

        """
        return _jam.COMAKInverseKinematicsTool_set_time_range(self, i, value)

    def append_time_range(self, value):
        r"""
        append_time_range(COMAKInverseKinematicsTool self, double const & value) -> int

        Parameters
        ----------
        value: double const &

        """
        return _jam.COMAKInverseKinematicsTool_append_time_range(self, value)

    def copyProperty_report_errors(self, source):
        r"""
        copyProperty_report_errors(COMAKInverseKinematicsTool self, COMAKInverseKinematicsTool source)

        Parameters
        ----------
        source: OpenSim::COMAKInverseKinematicsTool::Self const &

        """
        return _jam.COMAKInverseKinematicsTool_copyProperty_report_errors(self, source)

    def append_report_errors(self, value):
        r"""
        append_report_errors(COMAKInverseKinematicsTool self, bool const & value) -> int

        Parameters
        ----------
        value: bool const &

        """
        return _jam.COMAKInverseKinematicsTool_append_report_errors(self, value)

    def constructProperty_report_errors(self, initValue):
        r"""
        constructProperty_report_errors(COMAKInverseKinematicsTool self, bool const & initValue)

        Parameters
        ----------
        initValue: bool const &

        """
        return _jam.COMAKInverseKinematicsTool_constructProperty_report_errors(self, initValue)

    def get_report_errors(self, *args):
        r"""
        get_report_errors(COMAKInverseKinematicsTool self, int i) -> bool const

        Parameters
        ----------
        i: int

        get_report_errors(COMAKInverseKinematicsTool self) -> bool const &
        """
        return _jam.COMAKInverseKinematicsTool_get_report_errors(self, *args)

    def upd_report_errors(self, *args):
        r"""
        upd_report_errors(COMAKInverseKinematicsTool self, int i) -> bool

        Parameters
        ----------
        i: int

        upd_report_errors(COMAKInverseKinematicsTool self) -> bool &
        """
        return _jam.COMAKInverseKinematicsTool_upd_report_errors(self, *args)

    def set_report_errors(self, *args):
        r"""
        set_report_errors(COMAKInverseKinematicsTool self, int i, bool const & value)

        Parameters
        ----------
        i: int
        value: bool const &

        set_report_errors(COMAKInverseKinematicsTool self, bool const & value)

        Parameters
        ----------
        value: bool const &

        """
        return _jam.COMAKInverseKinematicsTool_set_report_errors(self, *args)

    def copyProperty_report_marker_locations(self, source):
        r"""
        copyProperty_report_marker_locations(COMAKInverseKinematicsTool self, COMAKInverseKinematicsTool source)

        Parameters
        ----------
        source: OpenSim::COMAKInverseKinematicsTool::Self const &

        """
        return _jam.COMAKInverseKinematicsTool_copyProperty_report_marker_locations(self, source)

    def append_report_marker_locations(self, value):
        r"""
        append_report_marker_locations(COMAKInverseKinematicsTool self, bool const & value) -> int

        Parameters
        ----------
        value: bool const &

        """
        return _jam.COMAKInverseKinematicsTool_append_report_marker_locations(self, value)

    def constructProperty_report_marker_locations(self, initValue):
        r"""
        constructProperty_report_marker_locations(COMAKInverseKinematicsTool self, bool const & initValue)

        Parameters
        ----------
        initValue: bool const &

        """
        return _jam.COMAKInverseKinematicsTool_constructProperty_report_marker_locations(self, initValue)

    def get_report_marker_locations(self, *args):
        r"""
        get_report_marker_locations(COMAKInverseKinematicsTool self, int i) -> bool const

        Parameters
        ----------
        i: int

        get_report_marker_locations(COMAKInverseKinematicsTool self) -> bool const &
        """
        return _jam.COMAKInverseKinematicsTool_get_report_marker_locations(self, *args)

    def upd_report_marker_locations(self, *args):
        r"""
        upd_report_marker_locations(COMAKInverseKinematicsTool self, int i) -> bool

        Parameters
        ----------
        i: int

        upd_report_marker_locations(COMAKInverseKinematicsTool self) -> bool &
        """
        return _jam.COMAKInverseKinematicsTool_upd_report_marker_locations(self, *args)

    def set_report_marker_locations(self, *args):
        r"""
        set_report_marker_locations(COMAKInverseKinematicsTool self, int i, bool const & value)

        Parameters
        ----------
        i: int
        value: bool const &

        set_report_marker_locations(COMAKInverseKinematicsTool self, bool const & value)

        Parameters
        ----------
        value: bool const &

        """
        return _jam.COMAKInverseKinematicsTool_set_report_marker_locations(self, *args)

    def copyProperty_ik_constraint_weight(self, source):
        r"""
        copyProperty_ik_constraint_weight(COMAKInverseKinematicsTool self, COMAKInverseKinematicsTool source)

        Parameters
        ----------
        source: OpenSim::COMAKInverseKinematicsTool::Self const &

        """
        return _jam.COMAKInverseKinematicsTool_copyProperty_ik_constraint_weight(self, source)

    def append_ik_constraint_weight(self, value):
        r"""
        append_ik_constraint_weight(COMAKInverseKinematicsTool self, double const & value) -> int

        Parameters
        ----------
        value: double const &

        """
        return _jam.COMAKInverseKinematicsTool_append_ik_constraint_weight(self, value)

    def constructProperty_ik_constraint_weight(self, initValue):
        r"""
        constructProperty_ik_constraint_weight(COMAKInverseKinematicsTool self, double const & initValue)

        Parameters
        ----------
        initValue: double const &

        """
        return _jam.COMAKInverseKinematicsTool_constructProperty_ik_constraint_weight(self, initValue)

    def get_ik_constraint_weight(self, *args):
        r"""
        get_ik_constraint_weight(COMAKInverseKinematicsTool self, int i) -> double const

        Parameters
        ----------
        i: int

        get_ik_constraint_weight(COMAKInverseKinematicsTool self) -> double const &
        """
        return _jam.COMAKInverseKinematicsTool_get_ik_constraint_weight(self, *args)

    def upd_ik_constraint_weight(self, *args):
        r"""
        upd_ik_constraint_weight(COMAKInverseKinematicsTool self, int i) -> double

        Parameters
        ----------
        i: int

        upd_ik_constraint_weight(COMAKInverseKinematicsTool self) -> double &
        """
        return _jam.COMAKInverseKinematicsTool_upd_ik_constraint_weight(self, *args)

    def set_ik_constraint_weight(self, *args):
        r"""
        set_ik_constraint_weight(COMAKInverseKinematicsTool self, int i, double const & value)

        Parameters
        ----------
        i: int
        value: double const &

        set_ik_constraint_weight(COMAKInverseKinematicsTool self, double const & value)

        Parameters
        ----------
        value: double const &

        """
        return _jam.COMAKInverseKinematicsTool_set_ik_constraint_weight(self, *args)

    def copyProperty_ik_accuracy(self, source):
        r"""
        copyProperty_ik_accuracy(COMAKInverseKinematicsTool self, COMAKInverseKinematicsTool source)

        Parameters
        ----------
        source: OpenSim::COMAKInverseKinematicsTool::Self const &

        """
        return _jam.COMAKInverseKinematicsTool_copyProperty_ik_accuracy(self, source)

    def append_ik_accuracy(self, value):
        r"""
        append_ik_accuracy(COMAKInverseKinematicsTool self, double const & value) -> int

        Parameters
        ----------
        value: double const &

        """
        return _jam.COMAKInverseKinematicsTool_append_ik_accuracy(self, value)

    def constructProperty_ik_accuracy(self, initValue):
        r"""
        constructProperty_ik_accuracy(COMAKInverseKinematicsTool self, double const & initValue)

        Parameters
        ----------
        initValue: double const &

        """
        return _jam.COMAKInverseKinematicsTool_constructProperty_ik_accuracy(self, initValue)

    def get_ik_accuracy(self, *args):
        r"""
        get_ik_accuracy(COMAKInverseKinematicsTool self, int i) -> double const

        Parameters
        ----------
        i: int

        get_ik_accuracy(COMAKInverseKinematicsTool self) -> double const &
        """
        return _jam.COMAKInverseKinematicsTool_get_ik_accuracy(self, *args)

    def upd_ik_accuracy(self, *args):
        r"""
        upd_ik_accuracy(COMAKInverseKinematicsTool self, int i) -> double

        Parameters
        ----------
        i: int

        upd_ik_accuracy(COMAKInverseKinematicsTool self) -> double &
        """
        return _jam.COMAKInverseKinematicsTool_upd_ik_accuracy(self, *args)

    def set_ik_accuracy(self, *args):
        r"""
        set_ik_accuracy(COMAKInverseKinematicsTool self, int i, double const & value)

        Parameters
        ----------
        i: int
        value: double const &

        set_ik_accuracy(COMAKInverseKinematicsTool self, double const & value)

        Parameters
        ----------
        value: double const &

        """
        return _jam.COMAKInverseKinematicsTool_set_ik_accuracy(self, *args)

    def copyProperty_IKTaskSet(self, source):
        r"""
        copyProperty_IKTaskSet(COMAKInverseKinematicsTool self, COMAKInverseKinematicsTool source)

        Parameters
        ----------
        source: OpenSim::COMAKInverseKinematicsTool::Self const &

        """
        return _jam.COMAKInverseKinematicsTool_copyProperty_IKTaskSet(self, source)

    def append_IKTaskSet(self, value):
        r"""
        append_IKTaskSet(COMAKInverseKinematicsTool self, IKTaskSet const & value) -> int

        Parameters
        ----------
        value: IKTaskSet const &

        """
        return _jam.COMAKInverseKinematicsTool_append_IKTaskSet(self, value)

    def constructProperty_IKTaskSet(self, initValue):
        r"""
        constructProperty_IKTaskSet(COMAKInverseKinematicsTool self, IKTaskSet const & initValue)

        Parameters
        ----------
        initValue: IKTaskSet const &

        """
        return _jam.COMAKInverseKinematicsTool_constructProperty_IKTaskSet(self, initValue)

    def get_IKTaskSet(self, *args):
        r"""
        get_IKTaskSet(COMAKInverseKinematicsTool self, int i) -> IKTaskSet const

        Parameters
        ----------
        i: int

        get_IKTaskSet(COMAKInverseKinematicsTool self) -> IKTaskSet const &
        """
        return _jam.COMAKInverseKinematicsTool_get_IKTaskSet(self, *args)

    def upd_IKTaskSet(self, *args):
        r"""
        upd_IKTaskSet(COMAKInverseKinematicsTool self, int i) -> IKTaskSet

        Parameters
        ----------
        i: int

        upd_IKTaskSet(COMAKInverseKinematicsTool self) -> IKTaskSet &
        """
        return _jam.COMAKInverseKinematicsTool_upd_IKTaskSet(self, *args)

    def set_IKTaskSet(self, *args):
        r"""
        set_IKTaskSet(COMAKInverseKinematicsTool self, int i, IKTaskSet const & value)

        Parameters
        ----------
        i: int
        value: IKTaskSet const &

        set_IKTaskSet(COMAKInverseKinematicsTool self, IKTaskSet const & value)

        Parameters
        ----------
        value: IKTaskSet const &

        """
        return _jam.COMAKInverseKinematicsTool_set_IKTaskSet(self, *args)

    def copyProperty_use_visualizer(self, source):
        r"""
        copyProperty_use_visualizer(COMAKInverseKinematicsTool self, COMAKInverseKinematicsTool source)

        Parameters
        ----------
        source: OpenSim::COMAKInverseKinematicsTool::Self const &

        """
        return _jam.COMAKInverseKinematicsTool_copyProperty_use_visualizer(self, source)

    def append_use_visualizer(self, value):
        r"""
        append_use_visualizer(COMAKInverseKinematicsTool self, bool const & value) -> int

        Parameters
        ----------
        value: bool const &

        """
        return _jam.COMAKInverseKinematicsTool_append_use_visualizer(self, value)

    def constructProperty_use_visualizer(self, initValue):
        r"""
        constructProperty_use_visualizer(COMAKInverseKinematicsTool self, bool const & initValue)

        Parameters
        ----------
        initValue: bool const &

        """
        return _jam.COMAKInverseKinematicsTool_constructProperty_use_visualizer(self, initValue)

    def get_use_visualizer(self, *args):
        r"""
        get_use_visualizer(COMAKInverseKinematicsTool self, int i) -> bool const

        Parameters
        ----------
        i: int

        get_use_visualizer(COMAKInverseKinematicsTool self) -> bool const &
        """
        return _jam.COMAKInverseKinematicsTool_get_use_visualizer(self, *args)

    def upd_use_visualizer(self, *args):
        r"""
        upd_use_visualizer(COMAKInverseKinematicsTool self, int i) -> bool

        Parameters
        ----------
        i: int

        upd_use_visualizer(COMAKInverseKinematicsTool self) -> bool &
        """
        return _jam.COMAKInverseKinematicsTool_upd_use_visualizer(self, *args)

    def set_use_visualizer(self, *args):
        r"""
        set_use_visualizer(COMAKInverseKinematicsTool self, int i, bool const & value)

        Parameters
        ----------
        i: int
        value: bool const &

        set_use_visualizer(COMAKInverseKinematicsTool self, bool const & value)

        Parameters
        ----------
        value: bool const &

        """
        return _jam.COMAKInverseKinematicsTool_set_use_visualizer(self, *args)

    def copyProperty_verbose(self, source):
        r"""
        copyProperty_verbose(COMAKInverseKinematicsTool self, COMAKInverseKinematicsTool source)

        Parameters
        ----------
        source: OpenSim::COMAKInverseKinematicsTool::Self const &

        """
        return _jam.COMAKInverseKinematicsTool_copyProperty_verbose(self, source)

    def append_verbose(self, value):
        r"""
        append_verbose(COMAKInverseKinematicsTool self, int const & value) -> int

        Parameters
        ----------
        value: int const &

        """
        return _jam.COMAKInverseKinematicsTool_append_verbose(self, value)

    def constructProperty_verbose(self, initValue):
        r"""
        constructProperty_verbose(COMAKInverseKinematicsTool self, int const & initValue)

        Parameters
        ----------
        initValue: int const &

        """
        return _jam.COMAKInverseKinematicsTool_constructProperty_verbose(self, initValue)

    def get_verbose(self, *args):
        r"""
        get_verbose(COMAKInverseKinematicsTool self, int i) -> int const

        Parameters
        ----------
        i: int

        get_verbose(COMAKInverseKinematicsTool self) -> int const &
        """
        return _jam.COMAKInverseKinematicsTool_get_verbose(self, *args)

    def upd_verbose(self, *args):
        r"""
        upd_verbose(COMAKInverseKinematicsTool self, int i) -> int

        Parameters
        ----------
        i: int

        upd_verbose(COMAKInverseKinematicsTool self) -> int &
        """
        return _jam.COMAKInverseKinematicsTool_upd_verbose(self, *args)

    def set_verbose(self, *args):
        r"""
        set_verbose(COMAKInverseKinematicsTool self, int i, int const & value)

        Parameters
        ----------
        i: int
        value: int const &

        set_verbose(COMAKInverseKinematicsTool self, int const & value)

        Parameters
        ----------
        value: int const &

        """
        return _jam.COMAKInverseKinematicsTool_set_verbose(self, *args)

    def __init__(self, *args):
        r"""
        __init__(COMAKInverseKinematicsTool self) -> COMAKInverseKinematicsTool
        __init__(COMAKInverseKinematicsTool self, std::string const file) -> COMAKInverseKinematicsTool

        Parameters
        ----------
        file: std::string const

        """
        _jam.COMAKInverseKinematicsTool_swiginit(self, _jam.new_COMAKInverseKinematicsTool(*args))

    def initialize(self):
        r"""initialize(COMAKInverseKinematicsTool self) -> bool"""
        return _jam.COMAKInverseKinematicsTool_initialize(self)

    def run(self):
        r"""run(COMAKInverseKinematicsTool self) -> bool"""
        return _jam.COMAKInverseKinematicsTool_run(self)

    def setModel(self, model):
        r"""
        setModel(COMAKInverseKinematicsTool self, Model model)

        Parameters
        ----------
        model: OpenSim::Model &

        """
        return _jam.COMAKInverseKinematicsTool_setModel(self, model)

    def performIKSecondaryConstraintSimulation(self):
        r"""performIKSecondaryConstraintSimulation(COMAKInverseKinematicsTool self)"""
        return _jam.COMAKInverseKinematicsTool_performIKSecondaryConstraintSimulation(self)

    def performIK(self):
        r"""performIK(COMAKInverseKinematicsTool self)"""
        return _jam.COMAKInverseKinematicsTool_performIK(self)

    def runInverseKinematics(self, model):
        r"""
        runInverseKinematics(COMAKInverseKinematicsTool self, Model model)

        Parameters
        ----------
        model: OpenSim::Model &

        """
        return _jam.COMAKInverseKinematicsTool_runInverseKinematics(self, model)

    def populateReferences(self, model, markersReference, coordinateReferences):
        r"""
        populateReferences(COMAKInverseKinematicsTool self, Model model, MarkersReference markersReference, SimTKArrayCoordinateReference coordinateReferences)

        Parameters
        ----------
        model: OpenSim::Model const &
        markersReference: OpenSim::MarkersReference &
        coordinateReferences: SimTK::Array_< OpenSim::CoordinateReference,unsigned int > &

        """
        return _jam.COMAKInverseKinematicsTool_populateReferences(self, model, markersReference, coordinateReferences)
    _model = property(_jam.COMAKInverseKinematicsTool__model_get, _jam.COMAKInverseKinematicsTool__model_set, doc=r"""_model : OpenSim::Model""")
    _model_exists = property(_jam.COMAKInverseKinematicsTool__model_exists_get, _jam.COMAKInverseKinematicsTool__model_exists_set, doc=r"""_model_exists : bool""")
    _state = property(_jam.COMAKInverseKinematicsTool__state_get, _jam.COMAKInverseKinematicsTool__state_set, doc=r"""_state : SimTK::State""")
    _n_prescribed_coord = property(_jam.COMAKInverseKinematicsTool__n_prescribed_coord_get, _jam.COMAKInverseKinematicsTool__n_prescribed_coord_set, doc=r"""_n_prescribed_coord : int""")
    _n_primary_coord = property(_jam.COMAKInverseKinematicsTool__n_primary_coord_get, _jam.COMAKInverseKinematicsTool__n_primary_coord_set, doc=r"""_n_primary_coord : int""")
    _n_secondary_coord = property(_jam.COMAKInverseKinematicsTool__n_secondary_coord_get, _jam.COMAKInverseKinematicsTool__n_secondary_coord_set, doc=r"""_n_secondary_coord : int""")
    _n_muscles = property(_jam.COMAKInverseKinematicsTool__n_muscles_get, _jam.COMAKInverseKinematicsTool__n_muscles_set, doc=r"""_n_muscles : int""")
    _n_reserve_actuators = property(_jam.COMAKInverseKinematicsTool__n_reserve_actuators_get, _jam.COMAKInverseKinematicsTool__n_reserve_actuators_set, doc=r"""_n_reserve_actuators : int""")
    _n_actuators = property(_jam.COMAKInverseKinematicsTool__n_actuators_get, _jam.COMAKInverseKinematicsTool__n_actuators_set, doc=r"""_n_actuators : int""")
    _n_parameters = property(_jam.COMAKInverseKinematicsTool__n_parameters_get, _jam.COMAKInverseKinematicsTool__n_parameters_set, doc=r"""_n_parameters : int""")
    _parameter_names = property(_jam.COMAKInverseKinematicsTool__parameter_names_get, _jam.COMAKInverseKinematicsTool__parameter_names_set, doc=r"""_parameter_names : OpenSim::Array<(std::string)>""")
    _prescribed_coord_name = property(_jam.COMAKInverseKinematicsTool__prescribed_coord_name_get, _jam.COMAKInverseKinematicsTool__prescribed_coord_name_set, doc=r"""_prescribed_coord_name : OpenSim::Array<(std::string)>""")
    _prescribed_coord_path = property(_jam.COMAKInverseKinematicsTool__prescribed_coord_path_get, _jam.COMAKInverseKinematicsTool__prescribed_coord_path_set, doc=r"""_prescribed_coord_path : OpenSim::Array<(std::string)>""")
    _prescribed_coord_index = property(_jam.COMAKInverseKinematicsTool__prescribed_coord_index_get, _jam.COMAKInverseKinematicsTool__prescribed_coord_index_set, doc=r"""_prescribed_coord_index : OpenSim::Array<(int)>""")
    _primary_coord_name = property(_jam.COMAKInverseKinematicsTool__primary_coord_name_get, _jam.COMAKInverseKinematicsTool__primary_coord_name_set, doc=r"""_primary_coord_name : OpenSim::Array<(std::string)>""")
    _primary_coord_path = property(_jam.COMAKInverseKinematicsTool__primary_coord_path_get, _jam.COMAKInverseKinematicsTool__primary_coord_path_set, doc=r"""_primary_coord_path : OpenSim::Array<(std::string)>""")
    _primary_coord_index = property(_jam.COMAKInverseKinematicsTool__primary_coord_index_get, _jam.COMAKInverseKinematicsTool__primary_coord_index_set, doc=r"""_primary_coord_index : OpenSim::Array<(int)>""")
    _secondary_coord_name = property(_jam.COMAKInverseKinematicsTool__secondary_coord_name_get, _jam.COMAKInverseKinematicsTool__secondary_coord_name_set, doc=r"""_secondary_coord_name : OpenSim::Array<(std::string)>""")
    _secondary_coord_path = property(_jam.COMAKInverseKinematicsTool__secondary_coord_path_get, _jam.COMAKInverseKinematicsTool__secondary_coord_path_set, doc=r"""_secondary_coord_path : OpenSim::Array<(std::string)>""")
    _secondary_coord_index = property(_jam.COMAKInverseKinematicsTool__secondary_coord_index_get, _jam.COMAKInverseKinematicsTool__secondary_coord_index_set, doc=r"""_secondary_coord_index : OpenSim::Array<(int)>""")
    _n_frames = property(_jam.COMAKInverseKinematicsTool__n_frames_get, _jam.COMAKInverseKinematicsTool__n_frames_set, doc=r"""_n_frames : int""")
    _n_out_frames = property(_jam.COMAKInverseKinematicsTool__n_out_frames_get, _jam.COMAKInverseKinematicsTool__n_out_frames_set, doc=r"""_n_out_frames : int""")
    _start_frame = property(_jam.COMAKInverseKinematicsTool__start_frame_get, _jam.COMAKInverseKinematicsTool__start_frame_set, doc=r"""_start_frame : int""")
    _time = property(_jam.COMAKInverseKinematicsTool__time_get, _jam.COMAKInverseKinematicsTool__time_set, doc=r"""_time : OpenSim::Array<(double)>""")
    _dt = property(_jam.COMAKInverseKinematicsTool__dt_get, _jam.COMAKInverseKinematicsTool__dt_set, doc=r"""_dt : double""")
    _consecutive_bad_frame = property(_jam.COMAKInverseKinematicsTool__consecutive_bad_frame_get, _jam.COMAKInverseKinematicsTool__consecutive_bad_frame_set, doc=r"""_consecutive_bad_frame : int""")
    _bad_frames = property(_jam.COMAKInverseKinematicsTool__bad_frames_get, _jam.COMAKInverseKinematicsTool__bad_frames_set, doc=r"""_bad_frames : std::vector<(int,std::allocator<(int)>)>""")
    _bad_times = property(_jam.COMAKInverseKinematicsTool__bad_times_get, _jam.COMAKInverseKinematicsTool__bad_times_set, doc=r"""_bad_times : std::vector<(double,std::allocator<(double)>)>""")
    _bad_udot_errors = property(_jam.COMAKInverseKinematicsTool__bad_udot_errors_get, _jam.COMAKInverseKinematicsTool__bad_udot_errors_set, doc=r"""_bad_udot_errors : std::vector<(double,std::allocator<(double)>)>""")
    _bad_udot_coord = property(_jam.COMAKInverseKinematicsTool__bad_udot_coord_get, _jam.COMAKInverseKinematicsTool__bad_udot_coord_set, doc=r"""_bad_udot_coord : std::vector<(std::string,std::allocator<(std::string)>)>""")
    _q_matrix = property(_jam.COMAKInverseKinematicsTool__q_matrix_get, _jam.COMAKInverseKinematicsTool__q_matrix_set, doc=r"""_q_matrix : SimTK::Matrix""")
    _u_matrix = property(_jam.COMAKInverseKinematicsTool__u_matrix_get, _jam.COMAKInverseKinematicsTool__u_matrix_set, doc=r"""_u_matrix : SimTK::Matrix""")
    _udot_matrix = property(_jam.COMAKInverseKinematicsTool__udot_matrix_get, _jam.COMAKInverseKinematicsTool__udot_matrix_set, doc=r"""_udot_matrix : SimTK::Matrix""")
    _secondary_coord_damping = property(_jam.COMAKInverseKinematicsTool__secondary_coord_damping_get, _jam.COMAKInverseKinematicsTool__secondary_coord_damping_set, doc=r"""_secondary_coord_damping : SimTK::Vector""")
    _optimal_force = property(_jam.COMAKInverseKinematicsTool__optimal_force_get, _jam.COMAKInverseKinematicsTool__optimal_force_set, doc=r"""_optimal_force : SimTK::Vector""")
    _prev_secondary_value = property(_jam.COMAKInverseKinematicsTool__prev_secondary_value_get, _jam.COMAKInverseKinematicsTool__prev_secondary_value_set, doc=r"""_prev_secondary_value : SimTK::Vector""")
    _prev_parameters = property(_jam.COMAKInverseKinematicsTool__prev_parameters_get, _jam.COMAKInverseKinematicsTool__prev_parameters_set, doc=r"""_prev_parameters : SimTK::Vector""")
    _parameter_scale = property(_jam.COMAKInverseKinematicsTool__parameter_scale_get, _jam.COMAKInverseKinematicsTool__parameter_scale_set, doc=r"""_parameter_scale : SimTK::Vector""")
    _muscle_volumes = property(_jam.COMAKInverseKinematicsTool__muscle_volumes_get, _jam.COMAKInverseKinematicsTool__muscle_volumes_set, doc=r"""_muscle_volumes : SimTK::Vector""")
    _secondary_constraint_functions = property(_jam.COMAKInverseKinematicsTool__secondary_constraint_functions_get, _jam.COMAKInverseKinematicsTool__secondary_constraint_functions_set, doc=r"""_secondary_constraint_functions : OpenSim::FunctionSet""")
    _directoryOfSetupFile = property(_jam.COMAKInverseKinematicsTool__directoryOfSetupFile_get, _jam.COMAKInverseKinematicsTool__directoryOfSetupFile_set, doc=r"""_directoryOfSetupFile : std::string""")
    __swig_destroy__ = _jam.delete_COMAKInverseKinematicsTool

# Register COMAKInverseKinematicsTool in _jam:
_jam.COMAKInverseKinematicsTool_swigregister(COMAKInverseKinematicsTool)

def COMAKInverseKinematicsTool_safeDownCast(obj):
    r"""
    COMAKInverseKinematicsTool_safeDownCast(OpenSimObject obj) -> COMAKInverseKinematicsTool

    Parameters
    ----------
    obj: OpenSim::Object *

    """
    return _jam.COMAKInverseKinematicsTool_safeDownCast(obj)

def COMAKInverseKinematicsTool_getClassName():
    r"""COMAKInverseKinematicsTool_getClassName() -> std::string const &"""
    return _jam.COMAKInverseKinematicsTool_getClassName()

class COMAKTool(opensim.common.OpenSimObject):
    r"""Proxy of C++ OpenSim::COMAKTool class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def safeDownCast(obj):
        r"""
        safeDownCast(OpenSimObject obj) -> COMAKTool

        Parameters
        ----------
        obj: OpenSim::Object *

        """
        return _jam.COMAKTool_safeDownCast(obj)

    def assign(self, aObject):
        r"""
        assign(COMAKTool self, OpenSimObject aObject)

        Parameters
        ----------
        aObject: OpenSim::Object &

        """
        return _jam.COMAKTool_assign(self, aObject)

    @staticmethod
    def getClassName():
        r"""getClassName() -> std::string const &"""
        return _jam.COMAKTool_getClassName()

    def clone(self):
        r"""clone(COMAKTool self) -> COMAKTool"""
        return _jam.COMAKTool_clone(self)

    def getConcreteClassName(self):
        r"""getConcreteClassName(COMAKTool self) -> std::string const &"""
        return _jam.COMAKTool_getConcreteClassName(self)

    def copyProperty_model_file(self, source):
        r"""
        copyProperty_model_file(COMAKTool self, COMAKTool source)

        Parameters
        ----------
        source: OpenSim::COMAKTool::Self const &

        """
        return _jam.COMAKTool_copyProperty_model_file(self, source)

    def append_model_file(self, value):
        r"""
        append_model_file(COMAKTool self, std::string const & value) -> int

        Parameters
        ----------
        value: std::string const &

        """
        return _jam.COMAKTool_append_model_file(self, value)

    def constructProperty_model_file(self, initValue):
        r"""
        constructProperty_model_file(COMAKTool self, std::string const & initValue)

        Parameters
        ----------
        initValue: std::string const &

        """
        return _jam.COMAKTool_constructProperty_model_file(self, initValue)

    def get_model_file(self, *args):
        r"""
        get_model_file(COMAKTool self, int i) -> std::string const

        Parameters
        ----------
        i: int

        get_model_file(COMAKTool self) -> std::string const &
        """
        return _jam.COMAKTool_get_model_file(self, *args)

    def upd_model_file(self, *args):
        r"""
        upd_model_file(COMAKTool self, int i) -> std::string

        Parameters
        ----------
        i: int

        upd_model_file(COMAKTool self) -> std::string &
        """
        return _jam.COMAKTool_upd_model_file(self, *args)

    def set_model_file(self, *args):
        r"""
        set_model_file(COMAKTool self, int i, std::string const & value)

        Parameters
        ----------
        i: int
        value: std::string const &

        set_model_file(COMAKTool self, std::string const & value)

        Parameters
        ----------
        value: std::string const &

        """
        return _jam.COMAKTool_set_model_file(self, *args)

    def copyProperty_coordinates_file(self, source):
        r"""
        copyProperty_coordinates_file(COMAKTool self, COMAKTool source)

        Parameters
        ----------
        source: OpenSim::COMAKTool::Self const &

        """
        return _jam.COMAKTool_copyProperty_coordinates_file(self, source)

    def append_coordinates_file(self, value):
        r"""
        append_coordinates_file(COMAKTool self, std::string const & value) -> int

        Parameters
        ----------
        value: std::string const &

        """
        return _jam.COMAKTool_append_coordinates_file(self, value)

    def constructProperty_coordinates_file(self, initValue):
        r"""
        constructProperty_coordinates_file(COMAKTool self, std::string const & initValue)

        Parameters
        ----------
        initValue: std::string const &

        """
        return _jam.COMAKTool_constructProperty_coordinates_file(self, initValue)

    def get_coordinates_file(self, *args):
        r"""
        get_coordinates_file(COMAKTool self, int i) -> std::string const

        Parameters
        ----------
        i: int

        get_coordinates_file(COMAKTool self) -> std::string const &
        """
        return _jam.COMAKTool_get_coordinates_file(self, *args)

    def upd_coordinates_file(self, *args):
        r"""
        upd_coordinates_file(COMAKTool self, int i) -> std::string

        Parameters
        ----------
        i: int

        upd_coordinates_file(COMAKTool self) -> std::string &
        """
        return _jam.COMAKTool_upd_coordinates_file(self, *args)

    def set_coordinates_file(self, *args):
        r"""
        set_coordinates_file(COMAKTool self, int i, std::string const & value)

        Parameters
        ----------
        i: int
        value: std::string const &

        set_coordinates_file(COMAKTool self, std::string const & value)

        Parameters
        ----------
        value: std::string const &

        """
        return _jam.COMAKTool_set_coordinates_file(self, *args)

    def copyProperty_external_loads_file(self, source):
        r"""
        copyProperty_external_loads_file(COMAKTool self, COMAKTool source)

        Parameters
        ----------
        source: OpenSim::COMAKTool::Self const &

        """
        return _jam.COMAKTool_copyProperty_external_loads_file(self, source)

    def append_external_loads_file(self, value):
        r"""
        append_external_loads_file(COMAKTool self, std::string const & value) -> int

        Parameters
        ----------
        value: std::string const &

        """
        return _jam.COMAKTool_append_external_loads_file(self, value)

    def constructProperty_external_loads_file(self, initValue):
        r"""
        constructProperty_external_loads_file(COMAKTool self, std::string const & initValue)

        Parameters
        ----------
        initValue: std::string const &

        """
        return _jam.COMAKTool_constructProperty_external_loads_file(self, initValue)

    def get_external_loads_file(self, *args):
        r"""
        get_external_loads_file(COMAKTool self, int i) -> std::string const

        Parameters
        ----------
        i: int

        get_external_loads_file(COMAKTool self) -> std::string const &
        """
        return _jam.COMAKTool_get_external_loads_file(self, *args)

    def upd_external_loads_file(self, *args):
        r"""
        upd_external_loads_file(COMAKTool self, int i) -> std::string

        Parameters
        ----------
        i: int

        upd_external_loads_file(COMAKTool self) -> std::string &
        """
        return _jam.COMAKTool_upd_external_loads_file(self, *args)

    def set_external_loads_file(self, *args):
        r"""
        set_external_loads_file(COMAKTool self, int i, std::string const & value)

        Parameters
        ----------
        i: int
        value: std::string const &

        set_external_loads_file(COMAKTool self, std::string const & value)

        Parameters
        ----------
        value: std::string const &

        """
        return _jam.COMAKTool_set_external_loads_file(self, *args)

    def copyProperty_results_directory(self, source):
        r"""
        copyProperty_results_directory(COMAKTool self, COMAKTool source)

        Parameters
        ----------
        source: OpenSim::COMAKTool::Self const &

        """
        return _jam.COMAKTool_copyProperty_results_directory(self, source)

    def append_results_directory(self, value):
        r"""
        append_results_directory(COMAKTool self, std::string const & value) -> int

        Parameters
        ----------
        value: std::string const &

        """
        return _jam.COMAKTool_append_results_directory(self, value)

    def constructProperty_results_directory(self, initValue):
        r"""
        constructProperty_results_directory(COMAKTool self, std::string const & initValue)

        Parameters
        ----------
        initValue: std::string const &

        """
        return _jam.COMAKTool_constructProperty_results_directory(self, initValue)

    def get_results_directory(self, *args):
        r"""
        get_results_directory(COMAKTool self, int i) -> std::string const

        Parameters
        ----------
        i: int

        get_results_directory(COMAKTool self) -> std::string const &
        """
        return _jam.COMAKTool_get_results_directory(self, *args)

    def upd_results_directory(self, *args):
        r"""
        upd_results_directory(COMAKTool self, int i) -> std::string

        Parameters
        ----------
        i: int

        upd_results_directory(COMAKTool self) -> std::string &
        """
        return _jam.COMAKTool_upd_results_directory(self, *args)

    def set_results_directory(self, *args):
        r"""
        set_results_directory(COMAKTool self, int i, std::string const & value)

        Parameters
        ----------
        i: int
        value: std::string const &

        set_results_directory(COMAKTool self, std::string const & value)

        Parameters
        ----------
        value: std::string const &

        """
        return _jam.COMAKTool_set_results_directory(self, *args)

    def copyProperty_results_prefix(self, source):
        r"""
        copyProperty_results_prefix(COMAKTool self, COMAKTool source)

        Parameters
        ----------
        source: OpenSim::COMAKTool::Self const &

        """
        return _jam.COMAKTool_copyProperty_results_prefix(self, source)

    def append_results_prefix(self, value):
        r"""
        append_results_prefix(COMAKTool self, std::string const & value) -> int

        Parameters
        ----------
        value: std::string const &

        """
        return _jam.COMAKTool_append_results_prefix(self, value)

    def constructProperty_results_prefix(self, initValue):
        r"""
        constructProperty_results_prefix(COMAKTool self, std::string const & initValue)

        Parameters
        ----------
        initValue: std::string const &

        """
        return _jam.COMAKTool_constructProperty_results_prefix(self, initValue)

    def get_results_prefix(self, *args):
        r"""
        get_results_prefix(COMAKTool self, int i) -> std::string const

        Parameters
        ----------
        i: int

        get_results_prefix(COMAKTool self) -> std::string const &
        """
        return _jam.COMAKTool_get_results_prefix(self, *args)

    def upd_results_prefix(self, *args):
        r"""
        upd_results_prefix(COMAKTool self, int i) -> std::string

        Parameters
        ----------
        i: int

        upd_results_prefix(COMAKTool self) -> std::string &
        """
        return _jam.COMAKTool_upd_results_prefix(self, *args)

    def set_results_prefix(self, *args):
        r"""
        set_results_prefix(COMAKTool self, int i, std::string const & value)

        Parameters
        ----------
        i: int
        value: std::string const &

        set_results_prefix(COMAKTool self, std::string const & value)

        Parameters
        ----------
        value: std::string const &

        """
        return _jam.COMAKTool_set_results_prefix(self, *args)

    def copyProperty_replace_force_set(self, source):
        r"""
        copyProperty_replace_force_set(COMAKTool self, COMAKTool source)

        Parameters
        ----------
        source: OpenSim::COMAKTool::Self const &

        """
        return _jam.COMAKTool_copyProperty_replace_force_set(self, source)

    def append_replace_force_set(self, value):
        r"""
        append_replace_force_set(COMAKTool self, bool const & value) -> int

        Parameters
        ----------
        value: bool const &

        """
        return _jam.COMAKTool_append_replace_force_set(self, value)

    def constructProperty_replace_force_set(self, initValue):
        r"""
        constructProperty_replace_force_set(COMAKTool self, bool const & initValue)

        Parameters
        ----------
        initValue: bool const &

        """
        return _jam.COMAKTool_constructProperty_replace_force_set(self, initValue)

    def get_replace_force_set(self, *args):
        r"""
        get_replace_force_set(COMAKTool self, int i) -> bool const

        Parameters
        ----------
        i: int

        get_replace_force_set(COMAKTool self) -> bool const &
        """
        return _jam.COMAKTool_get_replace_force_set(self, *args)

    def upd_replace_force_set(self, *args):
        r"""
        upd_replace_force_set(COMAKTool self, int i) -> bool

        Parameters
        ----------
        i: int

        upd_replace_force_set(COMAKTool self) -> bool &
        """
        return _jam.COMAKTool_upd_replace_force_set(self, *args)

    def set_replace_force_set(self, *args):
        r"""
        set_replace_force_set(COMAKTool self, int i, bool const & value)

        Parameters
        ----------
        i: int
        value: bool const &

        set_replace_force_set(COMAKTool self, bool const & value)

        Parameters
        ----------
        value: bool const &

        """
        return _jam.COMAKTool_set_replace_force_set(self, *args)

    def copyProperty_force_set_file(self, source):
        r"""
        copyProperty_force_set_file(COMAKTool self, COMAKTool source)

        Parameters
        ----------
        source: OpenSim::COMAKTool::Self const &

        """
        return _jam.COMAKTool_copyProperty_force_set_file(self, source)

    def append_force_set_file(self, value):
        r"""
        append_force_set_file(COMAKTool self, std::string const & value) -> int

        Parameters
        ----------
        value: std::string const &

        """
        return _jam.COMAKTool_append_force_set_file(self, value)

    def constructProperty_force_set_file(self, initValue):
        r"""
        constructProperty_force_set_file(COMAKTool self, std::string const & initValue)

        Parameters
        ----------
        initValue: std::string const &

        """
        return _jam.COMAKTool_constructProperty_force_set_file(self, initValue)

    def get_force_set_file(self, *args):
        r"""
        get_force_set_file(COMAKTool self, int i) -> std::string const

        Parameters
        ----------
        i: int

        get_force_set_file(COMAKTool self) -> std::string const &
        """
        return _jam.COMAKTool_get_force_set_file(self, *args)

    def upd_force_set_file(self, *args):
        r"""
        upd_force_set_file(COMAKTool self, int i) -> std::string

        Parameters
        ----------
        i: int

        upd_force_set_file(COMAKTool self) -> std::string &
        """
        return _jam.COMAKTool_upd_force_set_file(self, *args)

    def set_force_set_file(self, *args):
        r"""
        set_force_set_file(COMAKTool self, int i, std::string const & value)

        Parameters
        ----------
        i: int
        value: std::string const &

        set_force_set_file(COMAKTool self, std::string const & value)

        Parameters
        ----------
        value: std::string const &

        """
        return _jam.COMAKTool_set_force_set_file(self, *args)

    def copyProperty_start_time(self, source):
        r"""
        copyProperty_start_time(COMAKTool self, COMAKTool source)

        Parameters
        ----------
        source: OpenSim::COMAKTool::Self const &

        """
        return _jam.COMAKTool_copyProperty_start_time(self, source)

    def append_start_time(self, value):
        r"""
        append_start_time(COMAKTool self, double const & value) -> int

        Parameters
        ----------
        value: double const &

        """
        return _jam.COMAKTool_append_start_time(self, value)

    def constructProperty_start_time(self, initValue):
        r"""
        constructProperty_start_time(COMAKTool self, double const & initValue)

        Parameters
        ----------
        initValue: double const &

        """
        return _jam.COMAKTool_constructProperty_start_time(self, initValue)

    def get_start_time(self, *args):
        r"""
        get_start_time(COMAKTool self, int i) -> double const

        Parameters
        ----------
        i: int

        get_start_time(COMAKTool self) -> double const &
        """
        return _jam.COMAKTool_get_start_time(self, *args)

    def upd_start_time(self, *args):
        r"""
        upd_start_time(COMAKTool self, int i) -> double

        Parameters
        ----------
        i: int

        upd_start_time(COMAKTool self) -> double &
        """
        return _jam.COMAKTool_upd_start_time(self, *args)

    def set_start_time(self, *args):
        r"""
        set_start_time(COMAKTool self, int i, double const & value)

        Parameters
        ----------
        i: int
        value: double const &

        set_start_time(COMAKTool self, double const & value)

        Parameters
        ----------
        value: double const &

        """
        return _jam.COMAKTool_set_start_time(self, *args)

    def copyProperty_stop_time(self, source):
        r"""
        copyProperty_stop_time(COMAKTool self, COMAKTool source)

        Parameters
        ----------
        source: OpenSim::COMAKTool::Self const &

        """
        return _jam.COMAKTool_copyProperty_stop_time(self, source)

    def append_stop_time(self, value):
        r"""
        append_stop_time(COMAKTool self, double const & value) -> int

        Parameters
        ----------
        value: double const &

        """
        return _jam.COMAKTool_append_stop_time(self, value)

    def constructProperty_stop_time(self, initValue):
        r"""
        constructProperty_stop_time(COMAKTool self, double const & initValue)

        Parameters
        ----------
        initValue: double const &

        """
        return _jam.COMAKTool_constructProperty_stop_time(self, initValue)

    def get_stop_time(self, *args):
        r"""
        get_stop_time(COMAKTool self, int i) -> double const

        Parameters
        ----------
        i: int

        get_stop_time(COMAKTool self) -> double const &
        """
        return _jam.COMAKTool_get_stop_time(self, *args)

    def upd_stop_time(self, *args):
        r"""
        upd_stop_time(COMAKTool self, int i) -> double

        Parameters
        ----------
        i: int

        upd_stop_time(COMAKTool self) -> double &
        """
        return _jam.COMAKTool_upd_stop_time(self, *args)

    def set_stop_time(self, *args):
        r"""
        set_stop_time(COMAKTool self, int i, double const & value)

        Parameters
        ----------
        i: int
        value: double const &

        set_stop_time(COMAKTool self, double const & value)

        Parameters
        ----------
        value: double const &

        """
        return _jam.COMAKTool_set_stop_time(self, *args)

    def copyProperty_time_step(self, source):
        r"""
        copyProperty_time_step(COMAKTool self, COMAKTool source)

        Parameters
        ----------
        source: OpenSim::COMAKTool::Self const &

        """
        return _jam.COMAKTool_copyProperty_time_step(self, source)

    def append_time_step(self, value):
        r"""
        append_time_step(COMAKTool self, double const & value) -> int

        Parameters
        ----------
        value: double const &

        """
        return _jam.COMAKTool_append_time_step(self, value)

    def constructProperty_time_step(self, initValue):
        r"""
        constructProperty_time_step(COMAKTool self, double const & initValue)

        Parameters
        ----------
        initValue: double const &

        """
        return _jam.COMAKTool_constructProperty_time_step(self, initValue)

    def get_time_step(self, *args):
        r"""
        get_time_step(COMAKTool self, int i) -> double const

        Parameters
        ----------
        i: int

        get_time_step(COMAKTool self) -> double const &
        """
        return _jam.COMAKTool_get_time_step(self, *args)

    def upd_time_step(self, *args):
        r"""
        upd_time_step(COMAKTool self, int i) -> double

        Parameters
        ----------
        i: int

        upd_time_step(COMAKTool self) -> double &
        """
        return _jam.COMAKTool_upd_time_step(self, *args)

    def set_time_step(self, *args):
        r"""
        set_time_step(COMAKTool self, int i, double const & value)

        Parameters
        ----------
        i: int
        value: double const &

        set_time_step(COMAKTool self, double const & value)

        Parameters
        ----------
        value: double const &

        """
        return _jam.COMAKTool_set_time_step(self, *args)

    def copyProperty_lowpass_filter_frequency(self, source):
        r"""
        copyProperty_lowpass_filter_frequency(COMAKTool self, COMAKTool source)

        Parameters
        ----------
        source: OpenSim::COMAKTool::Self const &

        """
        return _jam.COMAKTool_copyProperty_lowpass_filter_frequency(self, source)

    def append_lowpass_filter_frequency(self, value):
        r"""
        append_lowpass_filter_frequency(COMAKTool self, double const & value) -> int

        Parameters
        ----------
        value: double const &

        """
        return _jam.COMAKTool_append_lowpass_filter_frequency(self, value)

    def constructProperty_lowpass_filter_frequency(self, initValue):
        r"""
        constructProperty_lowpass_filter_frequency(COMAKTool self, double const & initValue)

        Parameters
        ----------
        initValue: double const &

        """
        return _jam.COMAKTool_constructProperty_lowpass_filter_frequency(self, initValue)

    def get_lowpass_filter_frequency(self, *args):
        r"""
        get_lowpass_filter_frequency(COMAKTool self, int i) -> double const

        Parameters
        ----------
        i: int

        get_lowpass_filter_frequency(COMAKTool self) -> double const &
        """
        return _jam.COMAKTool_get_lowpass_filter_frequency(self, *args)

    def upd_lowpass_filter_frequency(self, *args):
        r"""
        upd_lowpass_filter_frequency(COMAKTool self, int i) -> double

        Parameters
        ----------
        i: int

        upd_lowpass_filter_frequency(COMAKTool self) -> double &
        """
        return _jam.COMAKTool_upd_lowpass_filter_frequency(self, *args)

    def set_lowpass_filter_frequency(self, *args):
        r"""
        set_lowpass_filter_frequency(COMAKTool self, int i, double const & value)

        Parameters
        ----------
        i: int
        value: double const &

        set_lowpass_filter_frequency(COMAKTool self, double const & value)

        Parameters
        ----------
        value: double const &

        """
        return _jam.COMAKTool_set_lowpass_filter_frequency(self, *args)

    def copyProperty_print_processed_input_kinematics(self, source):
        r"""
        copyProperty_print_processed_input_kinematics(COMAKTool self, COMAKTool source)

        Parameters
        ----------
        source: OpenSim::COMAKTool::Self const &

        """
        return _jam.COMAKTool_copyProperty_print_processed_input_kinematics(self, source)

    def append_print_processed_input_kinematics(self, value):
        r"""
        append_print_processed_input_kinematics(COMAKTool self, bool const & value) -> int

        Parameters
        ----------
        value: bool const &

        """
        return _jam.COMAKTool_append_print_processed_input_kinematics(self, value)

    def constructProperty_print_processed_input_kinematics(self, initValue):
        r"""
        constructProperty_print_processed_input_kinematics(COMAKTool self, bool const & initValue)

        Parameters
        ----------
        initValue: bool const &

        """
        return _jam.COMAKTool_constructProperty_print_processed_input_kinematics(self, initValue)

    def get_print_processed_input_kinematics(self, *args):
        r"""
        get_print_processed_input_kinematics(COMAKTool self, int i) -> bool const

        Parameters
        ----------
        i: int

        get_print_processed_input_kinematics(COMAKTool self) -> bool const &
        """
        return _jam.COMAKTool_get_print_processed_input_kinematics(self, *args)

    def upd_print_processed_input_kinematics(self, *args):
        r"""
        upd_print_processed_input_kinematics(COMAKTool self, int i) -> bool

        Parameters
        ----------
        i: int

        upd_print_processed_input_kinematics(COMAKTool self) -> bool &
        """
        return _jam.COMAKTool_upd_print_processed_input_kinematics(self, *args)

    def set_print_processed_input_kinematics(self, *args):
        r"""
        set_print_processed_input_kinematics(COMAKTool self, int i, bool const & value)

        Parameters
        ----------
        i: int
        value: bool const &

        set_print_processed_input_kinematics(COMAKTool self, bool const & value)

        Parameters
        ----------
        value: bool const &

        """
        return _jam.COMAKTool_set_print_processed_input_kinematics(self, *args)

    def copyProperty_prescribed_coordinates(self, source):
        r"""
        copyProperty_prescribed_coordinates(COMAKTool self, COMAKTool source)

        Parameters
        ----------
        source: OpenSim::COMAKTool::Self const &

        """
        return _jam.COMAKTool_copyProperty_prescribed_coordinates(self, source)

    def get_prescribed_coordinates(self, i):
        r"""
        get_prescribed_coordinates(COMAKTool self, int i) -> std::string const &

        Parameters
        ----------
        i: int

        """
        return _jam.COMAKTool_get_prescribed_coordinates(self, i)

    def upd_prescribed_coordinates(self, i):
        r"""
        upd_prescribed_coordinates(COMAKTool self, int i) -> std::string &

        Parameters
        ----------
        i: int

        """
        return _jam.COMAKTool_upd_prescribed_coordinates(self, i)

    def set_prescribed_coordinates(self, i, value):
        r"""
        set_prescribed_coordinates(COMAKTool self, int i, std::string const & value)

        Parameters
        ----------
        i: int
        value: std::string const &

        """
        return _jam.COMAKTool_set_prescribed_coordinates(self, i, value)

    def append_prescribed_coordinates(self, value):
        r"""
        append_prescribed_coordinates(COMAKTool self, std::string const & value) -> int

        Parameters
        ----------
        value: std::string const &

        """
        return _jam.COMAKTool_append_prescribed_coordinates(self, value)

    def constructProperty_prescribed_coordinates(self):
        r"""constructProperty_prescribed_coordinates(COMAKTool self)"""
        return _jam.COMAKTool_constructProperty_prescribed_coordinates(self)

    def copyProperty_primary_coordinates(self, source):
        r"""
        copyProperty_primary_coordinates(COMAKTool self, COMAKTool source)

        Parameters
        ----------
        source: OpenSim::COMAKTool::Self const &

        """
        return _jam.COMAKTool_copyProperty_primary_coordinates(self, source)

    def get_primary_coordinates(self, i):
        r"""
        get_primary_coordinates(COMAKTool self, int i) -> std::string const &

        Parameters
        ----------
        i: int

        """
        return _jam.COMAKTool_get_primary_coordinates(self, i)

    def upd_primary_coordinates(self, i):
        r"""
        upd_primary_coordinates(COMAKTool self, int i) -> std::string &

        Parameters
        ----------
        i: int

        """
        return _jam.COMAKTool_upd_primary_coordinates(self, i)

    def set_primary_coordinates(self, i, value):
        r"""
        set_primary_coordinates(COMAKTool self, int i, std::string const & value)

        Parameters
        ----------
        i: int
        value: std::string const &

        """
        return _jam.COMAKTool_set_primary_coordinates(self, i, value)

    def append_primary_coordinates(self, value):
        r"""
        append_primary_coordinates(COMAKTool self, std::string const & value) -> int

        Parameters
        ----------
        value: std::string const &

        """
        return _jam.COMAKTool_append_primary_coordinates(self, value)

    def constructProperty_primary_coordinates(self):
        r"""constructProperty_primary_coordinates(COMAKTool self)"""
        return _jam.COMAKTool_constructProperty_primary_coordinates(self)

    def copyProperty_COMAKSecondaryCoordinateSet(self, source):
        r"""
        copyProperty_COMAKSecondaryCoordinateSet(COMAKTool self, COMAKTool source)

        Parameters
        ----------
        source: OpenSim::COMAKTool::Self const &

        """
        return _jam.COMAKTool_copyProperty_COMAKSecondaryCoordinateSet(self, source)

    def append_COMAKSecondaryCoordinateSet(self, value):
        r"""
        append_COMAKSecondaryCoordinateSet(COMAKTool self, COMAKSecondaryCoordinateSet value) -> int

        Parameters
        ----------
        value: OpenSim::COMAKSecondaryCoordinateSet const &

        """
        return _jam.COMAKTool_append_COMAKSecondaryCoordinateSet(self, value)

    def constructProperty_COMAKSecondaryCoordinateSet(self, initValue):
        r"""
        constructProperty_COMAKSecondaryCoordinateSet(COMAKTool self, COMAKSecondaryCoordinateSet initValue)

        Parameters
        ----------
        initValue: OpenSim::COMAKSecondaryCoordinateSet const &

        """
        return _jam.COMAKTool_constructProperty_COMAKSecondaryCoordinateSet(self, initValue)

    def get_COMAKSecondaryCoordinateSet(self, *args):
        r"""
        get_COMAKSecondaryCoordinateSet(COMAKTool self, int i) -> COMAKSecondaryCoordinateSet

        Parameters
        ----------
        i: int

        get_COMAKSecondaryCoordinateSet(COMAKTool self) -> COMAKSecondaryCoordinateSet
        """
        return _jam.COMAKTool_get_COMAKSecondaryCoordinateSet(self, *args)

    def upd_COMAKSecondaryCoordinateSet(self, *args):
        r"""
        upd_COMAKSecondaryCoordinateSet(COMAKTool self, int i) -> COMAKSecondaryCoordinateSet

        Parameters
        ----------
        i: int

        upd_COMAKSecondaryCoordinateSet(COMAKTool self) -> COMAKSecondaryCoordinateSet
        """
        return _jam.COMAKTool_upd_COMAKSecondaryCoordinateSet(self, *args)

    def set_COMAKSecondaryCoordinateSet(self, *args):
        r"""
        set_COMAKSecondaryCoordinateSet(COMAKTool self, int i, COMAKSecondaryCoordinateSet value)

        Parameters
        ----------
        i: int
        value: OpenSim::COMAKSecondaryCoordinateSet const &

        set_COMAKSecondaryCoordinateSet(COMAKTool self, COMAKSecondaryCoordinateSet value)

        Parameters
        ----------
        value: OpenSim::COMAKSecondaryCoordinateSet const &

        """
        return _jam.COMAKTool_set_COMAKSecondaryCoordinateSet(self, *args)

    def copyProperty_settle_secondary_coordinates_at_start(self, source):
        r"""
        copyProperty_settle_secondary_coordinates_at_start(COMAKTool self, COMAKTool source)

        Parameters
        ----------
        source: OpenSim::COMAKTool::Self const &

        """
        return _jam.COMAKTool_copyProperty_settle_secondary_coordinates_at_start(self, source)

    def append_settle_secondary_coordinates_at_start(self, value):
        r"""
        append_settle_secondary_coordinates_at_start(COMAKTool self, bool const & value) -> int

        Parameters
        ----------
        value: bool const &

        """
        return _jam.COMAKTool_append_settle_secondary_coordinates_at_start(self, value)

    def constructProperty_settle_secondary_coordinates_at_start(self, initValue):
        r"""
        constructProperty_settle_secondary_coordinates_at_start(COMAKTool self, bool const & initValue)

        Parameters
        ----------
        initValue: bool const &

        """
        return _jam.COMAKTool_constructProperty_settle_secondary_coordinates_at_start(self, initValue)

    def get_settle_secondary_coordinates_at_start(self, *args):
        r"""
        get_settle_secondary_coordinates_at_start(COMAKTool self, int i) -> bool const

        Parameters
        ----------
        i: int

        get_settle_secondary_coordinates_at_start(COMAKTool self) -> bool const &
        """
        return _jam.COMAKTool_get_settle_secondary_coordinates_at_start(self, *args)

    def upd_settle_secondary_coordinates_at_start(self, *args):
        r"""
        upd_settle_secondary_coordinates_at_start(COMAKTool self, int i) -> bool

        Parameters
        ----------
        i: int

        upd_settle_secondary_coordinates_at_start(COMAKTool self) -> bool &
        """
        return _jam.COMAKTool_upd_settle_secondary_coordinates_at_start(self, *args)

    def set_settle_secondary_coordinates_at_start(self, *args):
        r"""
        set_settle_secondary_coordinates_at_start(COMAKTool self, int i, bool const & value)

        Parameters
        ----------
        i: int
        value: bool const &

        set_settle_secondary_coordinates_at_start(COMAKTool self, bool const & value)

        Parameters
        ----------
        value: bool const &

        """
        return _jam.COMAKTool_set_settle_secondary_coordinates_at_start(self, *args)

    def copyProperty_settle_threshold(self, source):
        r"""
        copyProperty_settle_threshold(COMAKTool self, COMAKTool source)

        Parameters
        ----------
        source: OpenSim::COMAKTool::Self const &

        """
        return _jam.COMAKTool_copyProperty_settle_threshold(self, source)

    def append_settle_threshold(self, value):
        r"""
        append_settle_threshold(COMAKTool self, double const & value) -> int

        Parameters
        ----------
        value: double const &

        """
        return _jam.COMAKTool_append_settle_threshold(self, value)

    def constructProperty_settle_threshold(self, initValue):
        r"""
        constructProperty_settle_threshold(COMAKTool self, double const & initValue)

        Parameters
        ----------
        initValue: double const &

        """
        return _jam.COMAKTool_constructProperty_settle_threshold(self, initValue)

    def get_settle_threshold(self, *args):
        r"""
        get_settle_threshold(COMAKTool self, int i) -> double const

        Parameters
        ----------
        i: int

        get_settle_threshold(COMAKTool self) -> double const &
        """
        return _jam.COMAKTool_get_settle_threshold(self, *args)

    def upd_settle_threshold(self, *args):
        r"""
        upd_settle_threshold(COMAKTool self, int i) -> double

        Parameters
        ----------
        i: int

        upd_settle_threshold(COMAKTool self) -> double &
        """
        return _jam.COMAKTool_upd_settle_threshold(self, *args)

    def set_settle_threshold(self, *args):
        r"""
        set_settle_threshold(COMAKTool self, int i, double const & value)

        Parameters
        ----------
        i: int
        value: double const &

        set_settle_threshold(COMAKTool self, double const & value)

        Parameters
        ----------
        value: double const &

        """
        return _jam.COMAKTool_set_settle_threshold(self, *args)

    def copyProperty_settle_accuracy(self, source):
        r"""
        copyProperty_settle_accuracy(COMAKTool self, COMAKTool source)

        Parameters
        ----------
        source: OpenSim::COMAKTool::Self const &

        """
        return _jam.COMAKTool_copyProperty_settle_accuracy(self, source)

    def append_settle_accuracy(self, value):
        r"""
        append_settle_accuracy(COMAKTool self, double const & value) -> int

        Parameters
        ----------
        value: double const &

        """
        return _jam.COMAKTool_append_settle_accuracy(self, value)

    def constructProperty_settle_accuracy(self, initValue):
        r"""
        constructProperty_settle_accuracy(COMAKTool self, double const & initValue)

        Parameters
        ----------
        initValue: double const &

        """
        return _jam.COMAKTool_constructProperty_settle_accuracy(self, initValue)

    def get_settle_accuracy(self, *args):
        r"""
        get_settle_accuracy(COMAKTool self, int i) -> double const

        Parameters
        ----------
        i: int

        get_settle_accuracy(COMAKTool self) -> double const &
        """
        return _jam.COMAKTool_get_settle_accuracy(self, *args)

    def upd_settle_accuracy(self, *args):
        r"""
        upd_settle_accuracy(COMAKTool self, int i) -> double

        Parameters
        ----------
        i: int

        upd_settle_accuracy(COMAKTool self) -> double &
        """
        return _jam.COMAKTool_upd_settle_accuracy(self, *args)

    def set_settle_accuracy(self, *args):
        r"""
        set_settle_accuracy(COMAKTool self, int i, double const & value)

        Parameters
        ----------
        i: int
        value: double const &

        set_settle_accuracy(COMAKTool self, double const & value)

        Parameters
        ----------
        value: double const &

        """
        return _jam.COMAKTool_set_settle_accuracy(self, *args)

    def copyProperty_settle_internal_step_limit(self, source):
        r"""
        copyProperty_settle_internal_step_limit(COMAKTool self, COMAKTool source)

        Parameters
        ----------
        source: OpenSim::COMAKTool::Self const &

        """
        return _jam.COMAKTool_copyProperty_settle_internal_step_limit(self, source)

    def append_settle_internal_step_limit(self, value):
        r"""
        append_settle_internal_step_limit(COMAKTool self, int const & value) -> int

        Parameters
        ----------
        value: int const &

        """
        return _jam.COMAKTool_append_settle_internal_step_limit(self, value)

    def constructProperty_settle_internal_step_limit(self, initValue):
        r"""
        constructProperty_settle_internal_step_limit(COMAKTool self, int const & initValue)

        Parameters
        ----------
        initValue: int const &

        """
        return _jam.COMAKTool_constructProperty_settle_internal_step_limit(self, initValue)

    def get_settle_internal_step_limit(self, *args):
        r"""
        get_settle_internal_step_limit(COMAKTool self, int i) -> int const

        Parameters
        ----------
        i: int

        get_settle_internal_step_limit(COMAKTool self) -> int const &
        """
        return _jam.COMAKTool_get_settle_internal_step_limit(self, *args)

    def upd_settle_internal_step_limit(self, *args):
        r"""
        upd_settle_internal_step_limit(COMAKTool self, int i) -> int

        Parameters
        ----------
        i: int

        upd_settle_internal_step_limit(COMAKTool self) -> int &
        """
        return _jam.COMAKTool_upd_settle_internal_step_limit(self, *args)

    def set_settle_internal_step_limit(self, *args):
        r"""
        set_settle_internal_step_limit(COMAKTool self, int i, int const & value)

        Parameters
        ----------
        i: int
        value: int const &

        set_settle_internal_step_limit(COMAKTool self, int const & value)

        Parameters
        ----------
        value: int const &

        """
        return _jam.COMAKTool_set_settle_internal_step_limit(self, *args)

    def copyProperty_print_settle_sim_results(self, source):
        r"""
        copyProperty_print_settle_sim_results(COMAKTool self, COMAKTool source)

        Parameters
        ----------
        source: OpenSim::COMAKTool::Self const &

        """
        return _jam.COMAKTool_copyProperty_print_settle_sim_results(self, source)

    def append_print_settle_sim_results(self, value):
        r"""
        append_print_settle_sim_results(COMAKTool self, bool const & value) -> int

        Parameters
        ----------
        value: bool const &

        """
        return _jam.COMAKTool_append_print_settle_sim_results(self, value)

    def constructProperty_print_settle_sim_results(self, initValue):
        r"""
        constructProperty_print_settle_sim_results(COMAKTool self, bool const & initValue)

        Parameters
        ----------
        initValue: bool const &

        """
        return _jam.COMAKTool_constructProperty_print_settle_sim_results(self, initValue)

    def get_print_settle_sim_results(self, *args):
        r"""
        get_print_settle_sim_results(COMAKTool self, int i) -> bool const

        Parameters
        ----------
        i: int

        get_print_settle_sim_results(COMAKTool self) -> bool const &
        """
        return _jam.COMAKTool_get_print_settle_sim_results(self, *args)

    def upd_print_settle_sim_results(self, *args):
        r"""
        upd_print_settle_sim_results(COMAKTool self, int i) -> bool

        Parameters
        ----------
        i: int

        upd_print_settle_sim_results(COMAKTool self) -> bool &
        """
        return _jam.COMAKTool_upd_print_settle_sim_results(self, *args)

    def set_print_settle_sim_results(self, *args):
        r"""
        set_print_settle_sim_results(COMAKTool self, int i, bool const & value)

        Parameters
        ----------
        i: int
        value: bool const &

        set_print_settle_sim_results(COMAKTool self, bool const & value)

        Parameters
        ----------
        value: bool const &

        """
        return _jam.COMAKTool_set_print_settle_sim_results(self, *args)

    def copyProperty_settle_sim_results_directory(self, source):
        r"""
        copyProperty_settle_sim_results_directory(COMAKTool self, COMAKTool source)

        Parameters
        ----------
        source: OpenSim::COMAKTool::Self const &

        """
        return _jam.COMAKTool_copyProperty_settle_sim_results_directory(self, source)

    def append_settle_sim_results_directory(self, value):
        r"""
        append_settle_sim_results_directory(COMAKTool self, std::string const & value) -> int

        Parameters
        ----------
        value: std::string const &

        """
        return _jam.COMAKTool_append_settle_sim_results_directory(self, value)

    def constructProperty_settle_sim_results_directory(self, initValue):
        r"""
        constructProperty_settle_sim_results_directory(COMAKTool self, std::string const & initValue)

        Parameters
        ----------
        initValue: std::string const &

        """
        return _jam.COMAKTool_constructProperty_settle_sim_results_directory(self, initValue)

    def get_settle_sim_results_directory(self, *args):
        r"""
        get_settle_sim_results_directory(COMAKTool self, int i) -> std::string const

        Parameters
        ----------
        i: int

        get_settle_sim_results_directory(COMAKTool self) -> std::string const &
        """
        return _jam.COMAKTool_get_settle_sim_results_directory(self, *args)

    def upd_settle_sim_results_directory(self, *args):
        r"""
        upd_settle_sim_results_directory(COMAKTool self, int i) -> std::string

        Parameters
        ----------
        i: int

        upd_settle_sim_results_directory(COMAKTool self) -> std::string &
        """
        return _jam.COMAKTool_upd_settle_sim_results_directory(self, *args)

    def set_settle_sim_results_directory(self, *args):
        r"""
        set_settle_sim_results_directory(COMAKTool self, int i, std::string const & value)

        Parameters
        ----------
        i: int
        value: std::string const &

        set_settle_sim_results_directory(COMAKTool self, std::string const & value)

        Parameters
        ----------
        value: std::string const &

        """
        return _jam.COMAKTool_set_settle_sim_results_directory(self, *args)

    def copyProperty_settle_sim_results_prefix(self, source):
        r"""
        copyProperty_settle_sim_results_prefix(COMAKTool self, COMAKTool source)

        Parameters
        ----------
        source: OpenSim::COMAKTool::Self const &

        """
        return _jam.COMAKTool_copyProperty_settle_sim_results_prefix(self, source)

    def append_settle_sim_results_prefix(self, value):
        r"""
        append_settle_sim_results_prefix(COMAKTool self, std::string const & value) -> int

        Parameters
        ----------
        value: std::string const &

        """
        return _jam.COMAKTool_append_settle_sim_results_prefix(self, value)

    def constructProperty_settle_sim_results_prefix(self, initValue):
        r"""
        constructProperty_settle_sim_results_prefix(COMAKTool self, std::string const & initValue)

        Parameters
        ----------
        initValue: std::string const &

        """
        return _jam.COMAKTool_constructProperty_settle_sim_results_prefix(self, initValue)

    def get_settle_sim_results_prefix(self, *args):
        r"""
        get_settle_sim_results_prefix(COMAKTool self, int i) -> std::string const

        Parameters
        ----------
        i: int

        get_settle_sim_results_prefix(COMAKTool self) -> std::string const &
        """
        return _jam.COMAKTool_get_settle_sim_results_prefix(self, *args)

    def upd_settle_sim_results_prefix(self, *args):
        r"""
        upd_settle_sim_results_prefix(COMAKTool self, int i) -> std::string

        Parameters
        ----------
        i: int

        upd_settle_sim_results_prefix(COMAKTool self) -> std::string &
        """
        return _jam.COMAKTool_upd_settle_sim_results_prefix(self, *args)

    def set_settle_sim_results_prefix(self, *args):
        r"""
        set_settle_sim_results_prefix(COMAKTool self, int i, std::string const & value)

        Parameters
        ----------
        i: int
        value: std::string const &

        set_settle_sim_results_prefix(COMAKTool self, std::string const & value)

        Parameters
        ----------
        value: std::string const &

        """
        return _jam.COMAKTool_set_settle_sim_results_prefix(self, *args)

    def copyProperty_max_iterations(self, source):
        r"""
        copyProperty_max_iterations(COMAKTool self, COMAKTool source)

        Parameters
        ----------
        source: OpenSim::COMAKTool::Self const &

        """
        return _jam.COMAKTool_copyProperty_max_iterations(self, source)

    def append_max_iterations(self, value):
        r"""
        append_max_iterations(COMAKTool self, int const & value) -> int

        Parameters
        ----------
        value: int const &

        """
        return _jam.COMAKTool_append_max_iterations(self, value)

    def constructProperty_max_iterations(self, initValue):
        r"""
        constructProperty_max_iterations(COMAKTool self, int const & initValue)

        Parameters
        ----------
        initValue: int const &

        """
        return _jam.COMAKTool_constructProperty_max_iterations(self, initValue)

    def get_max_iterations(self, *args):
        r"""
        get_max_iterations(COMAKTool self, int i) -> int const

        Parameters
        ----------
        i: int

        get_max_iterations(COMAKTool self) -> int const &
        """
        return _jam.COMAKTool_get_max_iterations(self, *args)

    def upd_max_iterations(self, *args):
        r"""
        upd_max_iterations(COMAKTool self, int i) -> int

        Parameters
        ----------
        i: int

        upd_max_iterations(COMAKTool self) -> int &
        """
        return _jam.COMAKTool_upd_max_iterations(self, *args)

    def set_max_iterations(self, *args):
        r"""
        set_max_iterations(COMAKTool self, int i, int const & value)

        Parameters
        ----------
        i: int
        value: int const &

        set_max_iterations(COMAKTool self, int const & value)

        Parameters
        ----------
        value: int const &

        """
        return _jam.COMAKTool_set_max_iterations(self, *args)

    def copyProperty_udot_tolerance(self, source):
        r"""
        copyProperty_udot_tolerance(COMAKTool self, COMAKTool source)

        Parameters
        ----------
        source: OpenSim::COMAKTool::Self const &

        """
        return _jam.COMAKTool_copyProperty_udot_tolerance(self, source)

    def append_udot_tolerance(self, value):
        r"""
        append_udot_tolerance(COMAKTool self, double const & value) -> int

        Parameters
        ----------
        value: double const &

        """
        return _jam.COMAKTool_append_udot_tolerance(self, value)

    def constructProperty_udot_tolerance(self, initValue):
        r"""
        constructProperty_udot_tolerance(COMAKTool self, double const & initValue)

        Parameters
        ----------
        initValue: double const &

        """
        return _jam.COMAKTool_constructProperty_udot_tolerance(self, initValue)

    def get_udot_tolerance(self, *args):
        r"""
        get_udot_tolerance(COMAKTool self, int i) -> double const

        Parameters
        ----------
        i: int

        get_udot_tolerance(COMAKTool self) -> double const &
        """
        return _jam.COMAKTool_get_udot_tolerance(self, *args)

    def upd_udot_tolerance(self, *args):
        r"""
        upd_udot_tolerance(COMAKTool self, int i) -> double

        Parameters
        ----------
        i: int

        upd_udot_tolerance(COMAKTool self) -> double &
        """
        return _jam.COMAKTool_upd_udot_tolerance(self, *args)

    def set_udot_tolerance(self, *args):
        r"""
        set_udot_tolerance(COMAKTool self, int i, double const & value)

        Parameters
        ----------
        i: int
        value: double const &

        set_udot_tolerance(COMAKTool self, double const & value)

        Parameters
        ----------
        value: double const &

        """
        return _jam.COMAKTool_set_udot_tolerance(self, *args)

    def copyProperty_udot_worse_case_tolerance(self, source):
        r"""
        copyProperty_udot_worse_case_tolerance(COMAKTool self, COMAKTool source)

        Parameters
        ----------
        source: OpenSim::COMAKTool::Self const &

        """
        return _jam.COMAKTool_copyProperty_udot_worse_case_tolerance(self, source)

    def append_udot_worse_case_tolerance(self, value):
        r"""
        append_udot_worse_case_tolerance(COMAKTool self, double const & value) -> int

        Parameters
        ----------
        value: double const &

        """
        return _jam.COMAKTool_append_udot_worse_case_tolerance(self, value)

    def constructProperty_udot_worse_case_tolerance(self, initValue):
        r"""
        constructProperty_udot_worse_case_tolerance(COMAKTool self, double const & initValue)

        Parameters
        ----------
        initValue: double const &

        """
        return _jam.COMAKTool_constructProperty_udot_worse_case_tolerance(self, initValue)

    def get_udot_worse_case_tolerance(self, *args):
        r"""
        get_udot_worse_case_tolerance(COMAKTool self, int i) -> double const

        Parameters
        ----------
        i: int

        get_udot_worse_case_tolerance(COMAKTool self) -> double const &
        """
        return _jam.COMAKTool_get_udot_worse_case_tolerance(self, *args)

    def upd_udot_worse_case_tolerance(self, *args):
        r"""
        upd_udot_worse_case_tolerance(COMAKTool self, int i) -> double

        Parameters
        ----------
        i: int

        upd_udot_worse_case_tolerance(COMAKTool self) -> double &
        """
        return _jam.COMAKTool_upd_udot_worse_case_tolerance(self, *args)

    def set_udot_worse_case_tolerance(self, *args):
        r"""
        set_udot_worse_case_tolerance(COMAKTool self, int i, double const & value)

        Parameters
        ----------
        i: int
        value: double const &

        set_udot_worse_case_tolerance(COMAKTool self, double const & value)

        Parameters
        ----------
        value: double const &

        """
        return _jam.COMAKTool_set_udot_worse_case_tolerance(self, *args)

    def copyProperty_unit_udot_epsilon(self, source):
        r"""
        copyProperty_unit_udot_epsilon(COMAKTool self, COMAKTool source)

        Parameters
        ----------
        source: OpenSim::COMAKTool::Self const &

        """
        return _jam.COMAKTool_copyProperty_unit_udot_epsilon(self, source)

    def append_unit_udot_epsilon(self, value):
        r"""
        append_unit_udot_epsilon(COMAKTool self, double const & value) -> int

        Parameters
        ----------
        value: double const &

        """
        return _jam.COMAKTool_append_unit_udot_epsilon(self, value)

    def constructProperty_unit_udot_epsilon(self, initValue):
        r"""
        constructProperty_unit_udot_epsilon(COMAKTool self, double const & initValue)

        Parameters
        ----------
        initValue: double const &

        """
        return _jam.COMAKTool_constructProperty_unit_udot_epsilon(self, initValue)

    def get_unit_udot_epsilon(self, *args):
        r"""
        get_unit_udot_epsilon(COMAKTool self, int i) -> double const

        Parameters
        ----------
        i: int

        get_unit_udot_epsilon(COMAKTool self) -> double const &
        """
        return _jam.COMAKTool_get_unit_udot_epsilon(self, *args)

    def upd_unit_udot_epsilon(self, *args):
        r"""
        upd_unit_udot_epsilon(COMAKTool self, int i) -> double

        Parameters
        ----------
        i: int

        upd_unit_udot_epsilon(COMAKTool self) -> double &
        """
        return _jam.COMAKTool_upd_unit_udot_epsilon(self, *args)

    def set_unit_udot_epsilon(self, *args):
        r"""
        set_unit_udot_epsilon(COMAKTool self, int i, double const & value)

        Parameters
        ----------
        i: int
        value: double const &

        set_unit_udot_epsilon(COMAKTool self, double const & value)

        Parameters
        ----------
        value: double const &

        """
        return _jam.COMAKTool_set_unit_udot_epsilon(self, *args)

    def copyProperty_optimization_scale_delta_coord(self, source):
        r"""
        copyProperty_optimization_scale_delta_coord(COMAKTool self, COMAKTool source)

        Parameters
        ----------
        source: OpenSim::COMAKTool::Self const &

        """
        return _jam.COMAKTool_copyProperty_optimization_scale_delta_coord(self, source)

    def append_optimization_scale_delta_coord(self, value):
        r"""
        append_optimization_scale_delta_coord(COMAKTool self, double const & value) -> int

        Parameters
        ----------
        value: double const &

        """
        return _jam.COMAKTool_append_optimization_scale_delta_coord(self, value)

    def constructProperty_optimization_scale_delta_coord(self, initValue):
        r"""
        constructProperty_optimization_scale_delta_coord(COMAKTool self, double const & initValue)

        Parameters
        ----------
        initValue: double const &

        """
        return _jam.COMAKTool_constructProperty_optimization_scale_delta_coord(self, initValue)

    def get_optimization_scale_delta_coord(self, *args):
        r"""
        get_optimization_scale_delta_coord(COMAKTool self, int i) -> double const

        Parameters
        ----------
        i: int

        get_optimization_scale_delta_coord(COMAKTool self) -> double const &
        """
        return _jam.COMAKTool_get_optimization_scale_delta_coord(self, *args)

    def upd_optimization_scale_delta_coord(self, *args):
        r"""
        upd_optimization_scale_delta_coord(COMAKTool self, int i) -> double

        Parameters
        ----------
        i: int

        upd_optimization_scale_delta_coord(COMAKTool self) -> double &
        """
        return _jam.COMAKTool_upd_optimization_scale_delta_coord(self, *args)

    def set_optimization_scale_delta_coord(self, *args):
        r"""
        set_optimization_scale_delta_coord(COMAKTool self, int i, double const & value)

        Parameters
        ----------
        i: int
        value: double const &

        set_optimization_scale_delta_coord(COMAKTool self, double const & value)

        Parameters
        ----------
        value: double const &

        """
        return _jam.COMAKTool_set_optimization_scale_delta_coord(self, *args)

    def copyProperty_ipopt_diagnostics_level(self, source):
        r"""
        copyProperty_ipopt_diagnostics_level(COMAKTool self, COMAKTool source)

        Parameters
        ----------
        source: OpenSim::COMAKTool::Self const &

        """
        return _jam.COMAKTool_copyProperty_ipopt_diagnostics_level(self, source)

    def append_ipopt_diagnostics_level(self, value):
        r"""
        append_ipopt_diagnostics_level(COMAKTool self, int const & value) -> int

        Parameters
        ----------
        value: int const &

        """
        return _jam.COMAKTool_append_ipopt_diagnostics_level(self, value)

    def constructProperty_ipopt_diagnostics_level(self, initValue):
        r"""
        constructProperty_ipopt_diagnostics_level(COMAKTool self, int const & initValue)

        Parameters
        ----------
        initValue: int const &

        """
        return _jam.COMAKTool_constructProperty_ipopt_diagnostics_level(self, initValue)

    def get_ipopt_diagnostics_level(self, *args):
        r"""
        get_ipopt_diagnostics_level(COMAKTool self, int i) -> int const

        Parameters
        ----------
        i: int

        get_ipopt_diagnostics_level(COMAKTool self) -> int const &
        """
        return _jam.COMAKTool_get_ipopt_diagnostics_level(self, *args)

    def upd_ipopt_diagnostics_level(self, *args):
        r"""
        upd_ipopt_diagnostics_level(COMAKTool self, int i) -> int

        Parameters
        ----------
        i: int

        upd_ipopt_diagnostics_level(COMAKTool self) -> int &
        """
        return _jam.COMAKTool_upd_ipopt_diagnostics_level(self, *args)

    def set_ipopt_diagnostics_level(self, *args):
        r"""
        set_ipopt_diagnostics_level(COMAKTool self, int i, int const & value)

        Parameters
        ----------
        i: int
        value: int const &

        set_ipopt_diagnostics_level(COMAKTool self, int const & value)

        Parameters
        ----------
        value: int const &

        """
        return _jam.COMAKTool_set_ipopt_diagnostics_level(self, *args)

    def copyProperty_ipopt_max_iterations(self, source):
        r"""
        copyProperty_ipopt_max_iterations(COMAKTool self, COMAKTool source)

        Parameters
        ----------
        source: OpenSim::COMAKTool::Self const &

        """
        return _jam.COMAKTool_copyProperty_ipopt_max_iterations(self, source)

    def append_ipopt_max_iterations(self, value):
        r"""
        append_ipopt_max_iterations(COMAKTool self, int const & value) -> int

        Parameters
        ----------
        value: int const &

        """
        return _jam.COMAKTool_append_ipopt_max_iterations(self, value)

    def constructProperty_ipopt_max_iterations(self, initValue):
        r"""
        constructProperty_ipopt_max_iterations(COMAKTool self, int const & initValue)

        Parameters
        ----------
        initValue: int const &

        """
        return _jam.COMAKTool_constructProperty_ipopt_max_iterations(self, initValue)

    def get_ipopt_max_iterations(self, *args):
        r"""
        get_ipopt_max_iterations(COMAKTool self, int i) -> int const

        Parameters
        ----------
        i: int

        get_ipopt_max_iterations(COMAKTool self) -> int const &
        """
        return _jam.COMAKTool_get_ipopt_max_iterations(self, *args)

    def upd_ipopt_max_iterations(self, *args):
        r"""
        upd_ipopt_max_iterations(COMAKTool self, int i) -> int

        Parameters
        ----------
        i: int

        upd_ipopt_max_iterations(COMAKTool self) -> int &
        """
        return _jam.COMAKTool_upd_ipopt_max_iterations(self, *args)

    def set_ipopt_max_iterations(self, *args):
        r"""
        set_ipopt_max_iterations(COMAKTool self, int i, int const & value)

        Parameters
        ----------
        i: int
        value: int const &

        set_ipopt_max_iterations(COMAKTool self, int const & value)

        Parameters
        ----------
        value: int const &

        """
        return _jam.COMAKTool_set_ipopt_max_iterations(self, *args)

    def copyProperty_ipopt_convergence_tolerance(self, source):
        r"""
        copyProperty_ipopt_convergence_tolerance(COMAKTool self, COMAKTool source)

        Parameters
        ----------
        source: OpenSim::COMAKTool::Self const &

        """
        return _jam.COMAKTool_copyProperty_ipopt_convergence_tolerance(self, source)

    def append_ipopt_convergence_tolerance(self, value):
        r"""
        append_ipopt_convergence_tolerance(COMAKTool self, double const & value) -> int

        Parameters
        ----------
        value: double const &

        """
        return _jam.COMAKTool_append_ipopt_convergence_tolerance(self, value)

    def constructProperty_ipopt_convergence_tolerance(self, initValue):
        r"""
        constructProperty_ipopt_convergence_tolerance(COMAKTool self, double const & initValue)

        Parameters
        ----------
        initValue: double const &

        """
        return _jam.COMAKTool_constructProperty_ipopt_convergence_tolerance(self, initValue)

    def get_ipopt_convergence_tolerance(self, *args):
        r"""
        get_ipopt_convergence_tolerance(COMAKTool self, int i) -> double const

        Parameters
        ----------
        i: int

        get_ipopt_convergence_tolerance(COMAKTool self) -> double const &
        """
        return _jam.COMAKTool_get_ipopt_convergence_tolerance(self, *args)

    def upd_ipopt_convergence_tolerance(self, *args):
        r"""
        upd_ipopt_convergence_tolerance(COMAKTool self, int i) -> double

        Parameters
        ----------
        i: int

        upd_ipopt_convergence_tolerance(COMAKTool self) -> double &
        """
        return _jam.COMAKTool_upd_ipopt_convergence_tolerance(self, *args)

    def set_ipopt_convergence_tolerance(self, *args):
        r"""
        set_ipopt_convergence_tolerance(COMAKTool self, int i, double const & value)

        Parameters
        ----------
        i: int
        value: double const &

        set_ipopt_convergence_tolerance(COMAKTool self, double const & value)

        Parameters
        ----------
        value: double const &

        """
        return _jam.COMAKTool_set_ipopt_convergence_tolerance(self, *args)

    def copyProperty_ipopt_constraint_tolerance(self, source):
        r"""
        copyProperty_ipopt_constraint_tolerance(COMAKTool self, COMAKTool source)

        Parameters
        ----------
        source: OpenSim::COMAKTool::Self const &

        """
        return _jam.COMAKTool_copyProperty_ipopt_constraint_tolerance(self, source)

    def append_ipopt_constraint_tolerance(self, value):
        r"""
        append_ipopt_constraint_tolerance(COMAKTool self, double const & value) -> int

        Parameters
        ----------
        value: double const &

        """
        return _jam.COMAKTool_append_ipopt_constraint_tolerance(self, value)

    def constructProperty_ipopt_constraint_tolerance(self, initValue):
        r"""
        constructProperty_ipopt_constraint_tolerance(COMAKTool self, double const & initValue)

        Parameters
        ----------
        initValue: double const &

        """
        return _jam.COMAKTool_constructProperty_ipopt_constraint_tolerance(self, initValue)

    def get_ipopt_constraint_tolerance(self, *args):
        r"""
        get_ipopt_constraint_tolerance(COMAKTool self, int i) -> double const

        Parameters
        ----------
        i: int

        get_ipopt_constraint_tolerance(COMAKTool self) -> double const &
        """
        return _jam.COMAKTool_get_ipopt_constraint_tolerance(self, *args)

    def upd_ipopt_constraint_tolerance(self, *args):
        r"""
        upd_ipopt_constraint_tolerance(COMAKTool self, int i) -> double

        Parameters
        ----------
        i: int

        upd_ipopt_constraint_tolerance(COMAKTool self) -> double &
        """
        return _jam.COMAKTool_upd_ipopt_constraint_tolerance(self, *args)

    def set_ipopt_constraint_tolerance(self, *args):
        r"""
        set_ipopt_constraint_tolerance(COMAKTool self, int i, double const & value)

        Parameters
        ----------
        i: int
        value: double const &

        set_ipopt_constraint_tolerance(COMAKTool self, double const & value)

        Parameters
        ----------
        value: double const &

        """
        return _jam.COMAKTool_set_ipopt_constraint_tolerance(self, *args)

    def copyProperty_ipopt_limited_memory_history(self, source):
        r"""
        copyProperty_ipopt_limited_memory_history(COMAKTool self, COMAKTool source)

        Parameters
        ----------
        source: OpenSim::COMAKTool::Self const &

        """
        return _jam.COMAKTool_copyProperty_ipopt_limited_memory_history(self, source)

    def append_ipopt_limited_memory_history(self, value):
        r"""
        append_ipopt_limited_memory_history(COMAKTool self, int const & value) -> int

        Parameters
        ----------
        value: int const &

        """
        return _jam.COMAKTool_append_ipopt_limited_memory_history(self, value)

    def constructProperty_ipopt_limited_memory_history(self, initValue):
        r"""
        constructProperty_ipopt_limited_memory_history(COMAKTool self, int const & initValue)

        Parameters
        ----------
        initValue: int const &

        """
        return _jam.COMAKTool_constructProperty_ipopt_limited_memory_history(self, initValue)

    def get_ipopt_limited_memory_history(self, *args):
        r"""
        get_ipopt_limited_memory_history(COMAKTool self, int i) -> int const

        Parameters
        ----------
        i: int

        get_ipopt_limited_memory_history(COMAKTool self) -> int const &
        """
        return _jam.COMAKTool_get_ipopt_limited_memory_history(self, *args)

    def upd_ipopt_limited_memory_history(self, *args):
        r"""
        upd_ipopt_limited_memory_history(COMAKTool self, int i) -> int

        Parameters
        ----------
        i: int

        upd_ipopt_limited_memory_history(COMAKTool self) -> int &
        """
        return _jam.COMAKTool_upd_ipopt_limited_memory_history(self, *args)

    def set_ipopt_limited_memory_history(self, *args):
        r"""
        set_ipopt_limited_memory_history(COMAKTool self, int i, int const & value)

        Parameters
        ----------
        i: int
        value: int const &

        set_ipopt_limited_memory_history(COMAKTool self, int const & value)

        Parameters
        ----------
        value: int const &

        """
        return _jam.COMAKTool_set_ipopt_limited_memory_history(self, *args)

    def copyProperty_ipopt_nlp_scaling_max_gradient(self, source):
        r"""
        copyProperty_ipopt_nlp_scaling_max_gradient(COMAKTool self, COMAKTool source)

        Parameters
        ----------
        source: OpenSim::COMAKTool::Self const &

        """
        return _jam.COMAKTool_copyProperty_ipopt_nlp_scaling_max_gradient(self, source)

    def append_ipopt_nlp_scaling_max_gradient(self, value):
        r"""
        append_ipopt_nlp_scaling_max_gradient(COMAKTool self, double const & value) -> int

        Parameters
        ----------
        value: double const &

        """
        return _jam.COMAKTool_append_ipopt_nlp_scaling_max_gradient(self, value)

    def constructProperty_ipopt_nlp_scaling_max_gradient(self, initValue):
        r"""
        constructProperty_ipopt_nlp_scaling_max_gradient(COMAKTool self, double const & initValue)

        Parameters
        ----------
        initValue: double const &

        """
        return _jam.COMAKTool_constructProperty_ipopt_nlp_scaling_max_gradient(self, initValue)

    def get_ipopt_nlp_scaling_max_gradient(self, *args):
        r"""
        get_ipopt_nlp_scaling_max_gradient(COMAKTool self, int i) -> double const

        Parameters
        ----------
        i: int

        get_ipopt_nlp_scaling_max_gradient(COMAKTool self) -> double const &
        """
        return _jam.COMAKTool_get_ipopt_nlp_scaling_max_gradient(self, *args)

    def upd_ipopt_nlp_scaling_max_gradient(self, *args):
        r"""
        upd_ipopt_nlp_scaling_max_gradient(COMAKTool self, int i) -> double

        Parameters
        ----------
        i: int

        upd_ipopt_nlp_scaling_max_gradient(COMAKTool self) -> double &
        """
        return _jam.COMAKTool_upd_ipopt_nlp_scaling_max_gradient(self, *args)

    def set_ipopt_nlp_scaling_max_gradient(self, *args):
        r"""
        set_ipopt_nlp_scaling_max_gradient(COMAKTool self, int i, double const & value)

        Parameters
        ----------
        i: int
        value: double const &

        set_ipopt_nlp_scaling_max_gradient(COMAKTool self, double const & value)

        Parameters
        ----------
        value: double const &

        """
        return _jam.COMAKTool_set_ipopt_nlp_scaling_max_gradient(self, *args)

    def copyProperty_ipopt_nlp_scaling_min_value(self, source):
        r"""
        copyProperty_ipopt_nlp_scaling_min_value(COMAKTool self, COMAKTool source)

        Parameters
        ----------
        source: OpenSim::COMAKTool::Self const &

        """
        return _jam.COMAKTool_copyProperty_ipopt_nlp_scaling_min_value(self, source)

    def append_ipopt_nlp_scaling_min_value(self, value):
        r"""
        append_ipopt_nlp_scaling_min_value(COMAKTool self, double const & value) -> int

        Parameters
        ----------
        value: double const &

        """
        return _jam.COMAKTool_append_ipopt_nlp_scaling_min_value(self, value)

    def constructProperty_ipopt_nlp_scaling_min_value(self, initValue):
        r"""
        constructProperty_ipopt_nlp_scaling_min_value(COMAKTool self, double const & initValue)

        Parameters
        ----------
        initValue: double const &

        """
        return _jam.COMAKTool_constructProperty_ipopt_nlp_scaling_min_value(self, initValue)

    def get_ipopt_nlp_scaling_min_value(self, *args):
        r"""
        get_ipopt_nlp_scaling_min_value(COMAKTool self, int i) -> double const

        Parameters
        ----------
        i: int

        get_ipopt_nlp_scaling_min_value(COMAKTool self) -> double const &
        """
        return _jam.COMAKTool_get_ipopt_nlp_scaling_min_value(self, *args)

    def upd_ipopt_nlp_scaling_min_value(self, *args):
        r"""
        upd_ipopt_nlp_scaling_min_value(COMAKTool self, int i) -> double

        Parameters
        ----------
        i: int

        upd_ipopt_nlp_scaling_min_value(COMAKTool self) -> double &
        """
        return _jam.COMAKTool_upd_ipopt_nlp_scaling_min_value(self, *args)

    def set_ipopt_nlp_scaling_min_value(self, *args):
        r"""
        set_ipopt_nlp_scaling_min_value(COMAKTool self, int i, double const & value)

        Parameters
        ----------
        i: int
        value: double const &

        set_ipopt_nlp_scaling_min_value(COMAKTool self, double const & value)

        Parameters
        ----------
        value: double const &

        """
        return _jam.COMAKTool_set_ipopt_nlp_scaling_min_value(self, *args)

    def copyProperty_ipopt_obj_scaling_factor(self, source):
        r"""
        copyProperty_ipopt_obj_scaling_factor(COMAKTool self, COMAKTool source)

        Parameters
        ----------
        source: OpenSim::COMAKTool::Self const &

        """
        return _jam.COMAKTool_copyProperty_ipopt_obj_scaling_factor(self, source)

    def append_ipopt_obj_scaling_factor(self, value):
        r"""
        append_ipopt_obj_scaling_factor(COMAKTool self, double const & value) -> int

        Parameters
        ----------
        value: double const &

        """
        return _jam.COMAKTool_append_ipopt_obj_scaling_factor(self, value)

    def constructProperty_ipopt_obj_scaling_factor(self, initValue):
        r"""
        constructProperty_ipopt_obj_scaling_factor(COMAKTool self, double const & initValue)

        Parameters
        ----------
        initValue: double const &

        """
        return _jam.COMAKTool_constructProperty_ipopt_obj_scaling_factor(self, initValue)

    def get_ipopt_obj_scaling_factor(self, *args):
        r"""
        get_ipopt_obj_scaling_factor(COMAKTool self, int i) -> double const

        Parameters
        ----------
        i: int

        get_ipopt_obj_scaling_factor(COMAKTool self) -> double const &
        """
        return _jam.COMAKTool_get_ipopt_obj_scaling_factor(self, *args)

    def upd_ipopt_obj_scaling_factor(self, *args):
        r"""
        upd_ipopt_obj_scaling_factor(COMAKTool self, int i) -> double

        Parameters
        ----------
        i: int

        upd_ipopt_obj_scaling_factor(COMAKTool self) -> double &
        """
        return _jam.COMAKTool_upd_ipopt_obj_scaling_factor(self, *args)

    def set_ipopt_obj_scaling_factor(self, *args):
        r"""
        set_ipopt_obj_scaling_factor(COMAKTool self, int i, double const & value)

        Parameters
        ----------
        i: int
        value: double const &

        set_ipopt_obj_scaling_factor(COMAKTool self, double const & value)

        Parameters
        ----------
        value: double const &

        """
        return _jam.COMAKTool_set_ipopt_obj_scaling_factor(self, *args)

    def copyProperty_COMAKCostFunctionParameterSet(self, source):
        r"""
        copyProperty_COMAKCostFunctionParameterSet(COMAKTool self, COMAKTool source)

        Parameters
        ----------
        source: OpenSim::COMAKTool::Self const &

        """
        return _jam.COMAKTool_copyProperty_COMAKCostFunctionParameterSet(self, source)

    def append_COMAKCostFunctionParameterSet(self, value):
        r"""
        append_COMAKCostFunctionParameterSet(COMAKTool self, COMAKCostFunctionParameterSet value) -> int

        Parameters
        ----------
        value: OpenSim::COMAKCostFunctionParameterSet const &

        """
        return _jam.COMAKTool_append_COMAKCostFunctionParameterSet(self, value)

    def constructProperty_COMAKCostFunctionParameterSet(self, initValue):
        r"""
        constructProperty_COMAKCostFunctionParameterSet(COMAKTool self, COMAKCostFunctionParameterSet initValue)

        Parameters
        ----------
        initValue: OpenSim::COMAKCostFunctionParameterSet const &

        """
        return _jam.COMAKTool_constructProperty_COMAKCostFunctionParameterSet(self, initValue)

    def get_COMAKCostFunctionParameterSet(self, *args):
        r"""
        get_COMAKCostFunctionParameterSet(COMAKTool self, int i) -> COMAKCostFunctionParameterSet

        Parameters
        ----------
        i: int

        get_COMAKCostFunctionParameterSet(COMAKTool self) -> COMAKCostFunctionParameterSet
        """
        return _jam.COMAKTool_get_COMAKCostFunctionParameterSet(self, *args)

    def upd_COMAKCostFunctionParameterSet(self, *args):
        r"""
        upd_COMAKCostFunctionParameterSet(COMAKTool self, int i) -> COMAKCostFunctionParameterSet

        Parameters
        ----------
        i: int

        upd_COMAKCostFunctionParameterSet(COMAKTool self) -> COMAKCostFunctionParameterSet
        """
        return _jam.COMAKTool_upd_COMAKCostFunctionParameterSet(self, *args)

    def set_COMAKCostFunctionParameterSet(self, *args):
        r"""
        set_COMAKCostFunctionParameterSet(COMAKTool self, int i, COMAKCostFunctionParameterSet value)

        Parameters
        ----------
        i: int
        value: OpenSim::COMAKCostFunctionParameterSet const &

        set_COMAKCostFunctionParameterSet(COMAKTool self, COMAKCostFunctionParameterSet value)

        Parameters
        ----------
        value: OpenSim::COMAKCostFunctionParameterSet const &

        """
        return _jam.COMAKTool_set_COMAKCostFunctionParameterSet(self, *args)

    def copyProperty_activation_exponent(self, source):
        r"""
        copyProperty_activation_exponent(COMAKTool self, COMAKTool source)

        Parameters
        ----------
        source: OpenSim::COMAKTool::Self const &

        """
        return _jam.COMAKTool_copyProperty_activation_exponent(self, source)

    def append_activation_exponent(self, value):
        r"""
        append_activation_exponent(COMAKTool self, double const & value) -> int

        Parameters
        ----------
        value: double const &

        """
        return _jam.COMAKTool_append_activation_exponent(self, value)

    def constructProperty_activation_exponent(self, initValue):
        r"""
        constructProperty_activation_exponent(COMAKTool self, double const & initValue)

        Parameters
        ----------
        initValue: double const &

        """
        return _jam.COMAKTool_constructProperty_activation_exponent(self, initValue)

    def get_activation_exponent(self, *args):
        r"""
        get_activation_exponent(COMAKTool self, int i) -> double const

        Parameters
        ----------
        i: int

        get_activation_exponent(COMAKTool self) -> double const &
        """
        return _jam.COMAKTool_get_activation_exponent(self, *args)

    def upd_activation_exponent(self, *args):
        r"""
        upd_activation_exponent(COMAKTool self, int i) -> double

        Parameters
        ----------
        i: int

        upd_activation_exponent(COMAKTool self) -> double &
        """
        return _jam.COMAKTool_upd_activation_exponent(self, *args)

    def set_activation_exponent(self, *args):
        r"""
        set_activation_exponent(COMAKTool self, int i, double const & value)

        Parameters
        ----------
        i: int
        value: double const &

        set_activation_exponent(COMAKTool self, double const & value)

        Parameters
        ----------
        value: double const &

        """
        return _jam.COMAKTool_set_activation_exponent(self, *args)

    def copyProperty_contact_energy_weight(self, source):
        r"""
        copyProperty_contact_energy_weight(COMAKTool self, COMAKTool source)

        Parameters
        ----------
        source: OpenSim::COMAKTool::Self const &

        """
        return _jam.COMAKTool_copyProperty_contact_energy_weight(self, source)

    def append_contact_energy_weight(self, value):
        r"""
        append_contact_energy_weight(COMAKTool self, double const & value) -> int

        Parameters
        ----------
        value: double const &

        """
        return _jam.COMAKTool_append_contact_energy_weight(self, value)

    def constructProperty_contact_energy_weight(self, initValue):
        r"""
        constructProperty_contact_energy_weight(COMAKTool self, double const & initValue)

        Parameters
        ----------
        initValue: double const &

        """
        return _jam.COMAKTool_constructProperty_contact_energy_weight(self, initValue)

    def get_contact_energy_weight(self, *args):
        r"""
        get_contact_energy_weight(COMAKTool self, int i) -> double const

        Parameters
        ----------
        i: int

        get_contact_energy_weight(COMAKTool self) -> double const &
        """
        return _jam.COMAKTool_get_contact_energy_weight(self, *args)

    def upd_contact_energy_weight(self, *args):
        r"""
        upd_contact_energy_weight(COMAKTool self, int i) -> double

        Parameters
        ----------
        i: int

        upd_contact_energy_weight(COMAKTool self) -> double &
        """
        return _jam.COMAKTool_upd_contact_energy_weight(self, *args)

    def set_contact_energy_weight(self, *args):
        r"""
        set_contact_energy_weight(COMAKTool self, int i, double const & value)

        Parameters
        ----------
        i: int
        value: double const &

        set_contact_energy_weight(COMAKTool self, double const & value)

        Parameters
        ----------
        value: double const &

        """
        return _jam.COMAKTool_set_contact_energy_weight(self, *args)

    def copyProperty_non_muscle_actuator_weight(self, source):
        r"""
        copyProperty_non_muscle_actuator_weight(COMAKTool self, COMAKTool source)

        Parameters
        ----------
        source: OpenSim::COMAKTool::Self const &

        """
        return _jam.COMAKTool_copyProperty_non_muscle_actuator_weight(self, source)

    def append_non_muscle_actuator_weight(self, value):
        r"""
        append_non_muscle_actuator_weight(COMAKTool self, double const & value) -> int

        Parameters
        ----------
        value: double const &

        """
        return _jam.COMAKTool_append_non_muscle_actuator_weight(self, value)

    def constructProperty_non_muscle_actuator_weight(self, initValue):
        r"""
        constructProperty_non_muscle_actuator_weight(COMAKTool self, double const & initValue)

        Parameters
        ----------
        initValue: double const &

        """
        return _jam.COMAKTool_constructProperty_non_muscle_actuator_weight(self, initValue)

    def get_non_muscle_actuator_weight(self, *args):
        r"""
        get_non_muscle_actuator_weight(COMAKTool self, int i) -> double const

        Parameters
        ----------
        i: int

        get_non_muscle_actuator_weight(COMAKTool self) -> double const &
        """
        return _jam.COMAKTool_get_non_muscle_actuator_weight(self, *args)

    def upd_non_muscle_actuator_weight(self, *args):
        r"""
        upd_non_muscle_actuator_weight(COMAKTool self, int i) -> double

        Parameters
        ----------
        i: int

        upd_non_muscle_actuator_weight(COMAKTool self) -> double &
        """
        return _jam.COMAKTool_upd_non_muscle_actuator_weight(self, *args)

    def set_non_muscle_actuator_weight(self, *args):
        r"""
        set_non_muscle_actuator_weight(COMAKTool self, int i, double const & value)

        Parameters
        ----------
        i: int
        value: double const &

        set_non_muscle_actuator_weight(COMAKTool self, double const & value)

        Parameters
        ----------
        value: double const &

        """
        return _jam.COMAKTool_set_non_muscle_actuator_weight(self, *args)

    def copyProperty_model_assembly_accuracy(self, source):
        r"""
        copyProperty_model_assembly_accuracy(COMAKTool self, COMAKTool source)

        Parameters
        ----------
        source: OpenSim::COMAKTool::Self const &

        """
        return _jam.COMAKTool_copyProperty_model_assembly_accuracy(self, source)

    def append_model_assembly_accuracy(self, value):
        r"""
        append_model_assembly_accuracy(COMAKTool self, double const & value) -> int

        Parameters
        ----------
        value: double const &

        """
        return _jam.COMAKTool_append_model_assembly_accuracy(self, value)

    def constructProperty_model_assembly_accuracy(self, initValue):
        r"""
        constructProperty_model_assembly_accuracy(COMAKTool self, double const & initValue)

        Parameters
        ----------
        initValue: double const &

        """
        return _jam.COMAKTool_constructProperty_model_assembly_accuracy(self, initValue)

    def get_model_assembly_accuracy(self, *args):
        r"""
        get_model_assembly_accuracy(COMAKTool self, int i) -> double const

        Parameters
        ----------
        i: int

        get_model_assembly_accuracy(COMAKTool self) -> double const &
        """
        return _jam.COMAKTool_get_model_assembly_accuracy(self, *args)

    def upd_model_assembly_accuracy(self, *args):
        r"""
        upd_model_assembly_accuracy(COMAKTool self, int i) -> double

        Parameters
        ----------
        i: int

        upd_model_assembly_accuracy(COMAKTool self) -> double &
        """
        return _jam.COMAKTool_upd_model_assembly_accuracy(self, *args)

    def set_model_assembly_accuracy(self, *args):
        r"""
        set_model_assembly_accuracy(COMAKTool self, int i, double const & value)

        Parameters
        ----------
        i: int
        value: double const &

        set_model_assembly_accuracy(COMAKTool self, double const & value)

        Parameters
        ----------
        value: double const &

        """
        return _jam.COMAKTool_set_model_assembly_accuracy(self, *args)

    def copyProperty_use_visualizer(self, source):
        r"""
        copyProperty_use_visualizer(COMAKTool self, COMAKTool source)

        Parameters
        ----------
        source: OpenSim::COMAKTool::Self const &

        """
        return _jam.COMAKTool_copyProperty_use_visualizer(self, source)

    def append_use_visualizer(self, value):
        r"""
        append_use_visualizer(COMAKTool self, bool const & value) -> int

        Parameters
        ----------
        value: bool const &

        """
        return _jam.COMAKTool_append_use_visualizer(self, value)

    def constructProperty_use_visualizer(self, initValue):
        r"""
        constructProperty_use_visualizer(COMAKTool self, bool const & initValue)

        Parameters
        ----------
        initValue: bool const &

        """
        return _jam.COMAKTool_constructProperty_use_visualizer(self, initValue)

    def get_use_visualizer(self, *args):
        r"""
        get_use_visualizer(COMAKTool self, int i) -> bool const

        Parameters
        ----------
        i: int

        get_use_visualizer(COMAKTool self) -> bool const &
        """
        return _jam.COMAKTool_get_use_visualizer(self, *args)

    def upd_use_visualizer(self, *args):
        r"""
        upd_use_visualizer(COMAKTool self, int i) -> bool

        Parameters
        ----------
        i: int

        upd_use_visualizer(COMAKTool self) -> bool &
        """
        return _jam.COMAKTool_upd_use_visualizer(self, *args)

    def set_use_visualizer(self, *args):
        r"""
        set_use_visualizer(COMAKTool self, int i, bool const & value)

        Parameters
        ----------
        i: int
        value: bool const &

        set_use_visualizer(COMAKTool self, bool const & value)

        Parameters
        ----------
        value: bool const &

        """
        return _jam.COMAKTool_set_use_visualizer(self, *args)

    def copyProperty_verbose(self, source):
        r"""
        copyProperty_verbose(COMAKTool self, COMAKTool source)

        Parameters
        ----------
        source: OpenSim::COMAKTool::Self const &

        """
        return _jam.COMAKTool_copyProperty_verbose(self, source)

    def append_verbose(self, value):
        r"""
        append_verbose(COMAKTool self, int const & value) -> int

        Parameters
        ----------
        value: int const &

        """
        return _jam.COMAKTool_append_verbose(self, value)

    def constructProperty_verbose(self, initValue):
        r"""
        constructProperty_verbose(COMAKTool self, int const & initValue)

        Parameters
        ----------
        initValue: int const &

        """
        return _jam.COMAKTool_constructProperty_verbose(self, initValue)

    def get_verbose(self, *args):
        r"""
        get_verbose(COMAKTool self, int i) -> int const

        Parameters
        ----------
        i: int

        get_verbose(COMAKTool self) -> int const &
        """
        return _jam.COMAKTool_get_verbose(self, *args)

    def upd_verbose(self, *args):
        r"""
        upd_verbose(COMAKTool self, int i) -> int

        Parameters
        ----------
        i: int

        upd_verbose(COMAKTool self) -> int &
        """
        return _jam.COMAKTool_upd_verbose(self, *args)

    def set_verbose(self, *args):
        r"""
        set_verbose(COMAKTool self, int i, int const & value)

        Parameters
        ----------
        i: int
        value: int const &

        set_verbose(COMAKTool self, int const & value)

        Parameters
        ----------
        value: int const &

        """
        return _jam.COMAKTool_set_verbose(self, *args)

    def copyProperty_AnalysisSet(self, source):
        r"""
        copyProperty_AnalysisSet(COMAKTool self, COMAKTool source)

        Parameters
        ----------
        source: OpenSim::COMAKTool::Self const &

        """
        return _jam.COMAKTool_copyProperty_AnalysisSet(self, source)

    def append_AnalysisSet(self, value):
        r"""
        append_AnalysisSet(COMAKTool self, AnalysisSet value) -> int

        Parameters
        ----------
        value: OpenSim::AnalysisSet const &

        """
        return _jam.COMAKTool_append_AnalysisSet(self, value)

    def constructProperty_AnalysisSet(self, initValue):
        r"""
        constructProperty_AnalysisSet(COMAKTool self, AnalysisSet initValue)

        Parameters
        ----------
        initValue: OpenSim::AnalysisSet const &

        """
        return _jam.COMAKTool_constructProperty_AnalysisSet(self, initValue)

    def get_AnalysisSet(self, *args):
        r"""
        get_AnalysisSet(COMAKTool self, int i) -> AnalysisSet

        Parameters
        ----------
        i: int

        get_AnalysisSet(COMAKTool self) -> AnalysisSet
        """
        return _jam.COMAKTool_get_AnalysisSet(self, *args)

    def upd_AnalysisSet(self, *args):
        r"""
        upd_AnalysisSet(COMAKTool self, int i) -> AnalysisSet

        Parameters
        ----------
        i: int

        upd_AnalysisSet(COMAKTool self) -> AnalysisSet
        """
        return _jam.COMAKTool_upd_AnalysisSet(self, *args)

    def set_AnalysisSet(self, *args):
        r"""
        set_AnalysisSet(COMAKTool self, int i, AnalysisSet value)

        Parameters
        ----------
        i: int
        value: OpenSim::AnalysisSet const &

        set_AnalysisSet(COMAKTool self, AnalysisSet value)

        Parameters
        ----------
        value: OpenSim::AnalysisSet const &

        """
        return _jam.COMAKTool_set_AnalysisSet(self, *args)

    def __init__(self, *args):
        r"""
        __init__(COMAKTool self) -> COMAKTool
        __init__(COMAKTool self, std::string const file) -> COMAKTool

        Parameters
        ----------
        file: std::string const

        """
        _jam.COMAKTool_swiginit(self, _jam.new_COMAKTool(*args))

    def run(self):
        r"""run(COMAKTool self) -> bool"""
        return _jam.COMAKTool_run(self)

    def setModel(self, model):
        r"""
        setModel(COMAKTool self, Model model)

        Parameters
        ----------
        model: OpenSim::Model &

        """
        return _jam.COMAKTool_setModel(self, model)
    __swig_destroy__ = _jam.delete_COMAKTool

# Register COMAKTool in _jam:
_jam.COMAKTool_swigregister(COMAKTool)

def COMAKTool_safeDownCast(obj):
    r"""
    COMAKTool_safeDownCast(OpenSimObject obj) -> COMAKTool

    Parameters
    ----------
    obj: OpenSim::Object *

    """
    return _jam.COMAKTool_safeDownCast(obj)

def COMAKTool_getClassName():
    r"""COMAKTool_getClassName() -> std::string const &"""
    return _jam.COMAKTool_getClassName()

class ForsimTool(opensim.common.OpenSimObject):
    r"""Proxy of C++ OpenSim::ForsimTool class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def safeDownCast(obj):
        r"""
        safeDownCast(OpenSimObject obj) -> ForsimTool

        Parameters
        ----------
        obj: OpenSim::Object *

        """
        return _jam.ForsimTool_safeDownCast(obj)

    def assign(self, aObject):
        r"""
        assign(ForsimTool self, OpenSimObject aObject)

        Parameters
        ----------
        aObject: OpenSim::Object &

        """
        return _jam.ForsimTool_assign(self, aObject)

    @staticmethod
    def getClassName():
        r"""getClassName() -> std::string const &"""
        return _jam.ForsimTool_getClassName()

    def clone(self):
        r"""clone(ForsimTool self) -> ForsimTool"""
        return _jam.ForsimTool_clone(self)

    def getConcreteClassName(self):
        r"""getConcreteClassName(ForsimTool self) -> std::string const &"""
        return _jam.ForsimTool_getConcreteClassName(self)

    def copyProperty_model_file(self, source):
        r"""
        copyProperty_model_file(ForsimTool self, ForsimTool source)

        Parameters
        ----------
        source: OpenSim::ForsimTool::Self const &

        """
        return _jam.ForsimTool_copyProperty_model_file(self, source)

    def append_model_file(self, value):
        r"""
        append_model_file(ForsimTool self, std::string const & value) -> int

        Parameters
        ----------
        value: std::string const &

        """
        return _jam.ForsimTool_append_model_file(self, value)

    def constructProperty_model_file(self, initValue):
        r"""
        constructProperty_model_file(ForsimTool self, std::string const & initValue)

        Parameters
        ----------
        initValue: std::string const &

        """
        return _jam.ForsimTool_constructProperty_model_file(self, initValue)

    def get_model_file(self, *args):
        r"""
        get_model_file(ForsimTool self, int i) -> std::string const

        Parameters
        ----------
        i: int

        get_model_file(ForsimTool self) -> std::string const &
        """
        return _jam.ForsimTool_get_model_file(self, *args)

    def upd_model_file(self, *args):
        r"""
        upd_model_file(ForsimTool self, int i) -> std::string

        Parameters
        ----------
        i: int

        upd_model_file(ForsimTool self) -> std::string &
        """
        return _jam.ForsimTool_upd_model_file(self, *args)

    def set_model_file(self, *args):
        r"""
        set_model_file(ForsimTool self, int i, std::string const & value)

        Parameters
        ----------
        i: int
        value: std::string const &

        set_model_file(ForsimTool self, std::string const & value)

        Parameters
        ----------
        value: std::string const &

        """
        return _jam.ForsimTool_set_model_file(self, *args)

    def copyProperty_results_directory(self, source):
        r"""
        copyProperty_results_directory(ForsimTool self, ForsimTool source)

        Parameters
        ----------
        source: OpenSim::ForsimTool::Self const &

        """
        return _jam.ForsimTool_copyProperty_results_directory(self, source)

    def append_results_directory(self, value):
        r"""
        append_results_directory(ForsimTool self, std::string const & value) -> int

        Parameters
        ----------
        value: std::string const &

        """
        return _jam.ForsimTool_append_results_directory(self, value)

    def constructProperty_results_directory(self, initValue):
        r"""
        constructProperty_results_directory(ForsimTool self, std::string const & initValue)

        Parameters
        ----------
        initValue: std::string const &

        """
        return _jam.ForsimTool_constructProperty_results_directory(self, initValue)

    def get_results_directory(self, *args):
        r"""
        get_results_directory(ForsimTool self, int i) -> std::string const

        Parameters
        ----------
        i: int

        get_results_directory(ForsimTool self) -> std::string const &
        """
        return _jam.ForsimTool_get_results_directory(self, *args)

    def upd_results_directory(self, *args):
        r"""
        upd_results_directory(ForsimTool self, int i) -> std::string

        Parameters
        ----------
        i: int

        upd_results_directory(ForsimTool self) -> std::string &
        """
        return _jam.ForsimTool_upd_results_directory(self, *args)

    def set_results_directory(self, *args):
        r"""
        set_results_directory(ForsimTool self, int i, std::string const & value)

        Parameters
        ----------
        i: int
        value: std::string const &

        set_results_directory(ForsimTool self, std::string const & value)

        Parameters
        ----------
        value: std::string const &

        """
        return _jam.ForsimTool_set_results_directory(self, *args)

    def copyProperty_results_file_basename(self, source):
        r"""
        copyProperty_results_file_basename(ForsimTool self, ForsimTool source)

        Parameters
        ----------
        source: OpenSim::ForsimTool::Self const &

        """
        return _jam.ForsimTool_copyProperty_results_file_basename(self, source)

    def append_results_file_basename(self, value):
        r"""
        append_results_file_basename(ForsimTool self, std::string const & value) -> int

        Parameters
        ----------
        value: std::string const &

        """
        return _jam.ForsimTool_append_results_file_basename(self, value)

    def constructProperty_results_file_basename(self, initValue):
        r"""
        constructProperty_results_file_basename(ForsimTool self, std::string const & initValue)

        Parameters
        ----------
        initValue: std::string const &

        """
        return _jam.ForsimTool_constructProperty_results_file_basename(self, initValue)

    def get_results_file_basename(self, *args):
        r"""
        get_results_file_basename(ForsimTool self, int i) -> std::string const

        Parameters
        ----------
        i: int

        get_results_file_basename(ForsimTool self) -> std::string const &
        """
        return _jam.ForsimTool_get_results_file_basename(self, *args)

    def upd_results_file_basename(self, *args):
        r"""
        upd_results_file_basename(ForsimTool self, int i) -> std::string

        Parameters
        ----------
        i: int

        upd_results_file_basename(ForsimTool self) -> std::string &
        """
        return _jam.ForsimTool_upd_results_file_basename(self, *args)

    def set_results_file_basename(self, *args):
        r"""
        set_results_file_basename(ForsimTool self, int i, std::string const & value)

        Parameters
        ----------
        i: int
        value: std::string const &

        set_results_file_basename(ForsimTool self, std::string const & value)

        Parameters
        ----------
        value: std::string const &

        """
        return _jam.ForsimTool_set_results_file_basename(self, *args)

    def copyProperty_start_time(self, source):
        r"""
        copyProperty_start_time(ForsimTool self, ForsimTool source)

        Parameters
        ----------
        source: OpenSim::ForsimTool::Self const &

        """
        return _jam.ForsimTool_copyProperty_start_time(self, source)

    def append_start_time(self, value):
        r"""
        append_start_time(ForsimTool self, double const & value) -> int

        Parameters
        ----------
        value: double const &

        """
        return _jam.ForsimTool_append_start_time(self, value)

    def constructProperty_start_time(self, initValue):
        r"""
        constructProperty_start_time(ForsimTool self, double const & initValue)

        Parameters
        ----------
        initValue: double const &

        """
        return _jam.ForsimTool_constructProperty_start_time(self, initValue)

    def get_start_time(self, *args):
        r"""
        get_start_time(ForsimTool self, int i) -> double const

        Parameters
        ----------
        i: int

        get_start_time(ForsimTool self) -> double const &
        """
        return _jam.ForsimTool_get_start_time(self, *args)

    def upd_start_time(self, *args):
        r"""
        upd_start_time(ForsimTool self, int i) -> double

        Parameters
        ----------
        i: int

        upd_start_time(ForsimTool self) -> double &
        """
        return _jam.ForsimTool_upd_start_time(self, *args)

    def set_start_time(self, *args):
        r"""
        set_start_time(ForsimTool self, int i, double const & value)

        Parameters
        ----------
        i: int
        value: double const &

        set_start_time(ForsimTool self, double const & value)

        Parameters
        ----------
        value: double const &

        """
        return _jam.ForsimTool_set_start_time(self, *args)

    def copyProperty_stop_time(self, source):
        r"""
        copyProperty_stop_time(ForsimTool self, ForsimTool source)

        Parameters
        ----------
        source: OpenSim::ForsimTool::Self const &

        """
        return _jam.ForsimTool_copyProperty_stop_time(self, source)

    def append_stop_time(self, value):
        r"""
        append_stop_time(ForsimTool self, double const & value) -> int

        Parameters
        ----------
        value: double const &

        """
        return _jam.ForsimTool_append_stop_time(self, value)

    def constructProperty_stop_time(self, initValue):
        r"""
        constructProperty_stop_time(ForsimTool self, double const & initValue)

        Parameters
        ----------
        initValue: double const &

        """
        return _jam.ForsimTool_constructProperty_stop_time(self, initValue)

    def get_stop_time(self, *args):
        r"""
        get_stop_time(ForsimTool self, int i) -> double const

        Parameters
        ----------
        i: int

        get_stop_time(ForsimTool self) -> double const &
        """
        return _jam.ForsimTool_get_stop_time(self, *args)

    def upd_stop_time(self, *args):
        r"""
        upd_stop_time(ForsimTool self, int i) -> double

        Parameters
        ----------
        i: int

        upd_stop_time(ForsimTool self) -> double &
        """
        return _jam.ForsimTool_upd_stop_time(self, *args)

    def set_stop_time(self, *args):
        r"""
        set_stop_time(ForsimTool self, int i, double const & value)

        Parameters
        ----------
        i: int
        value: double const &

        set_stop_time(ForsimTool self, double const & value)

        Parameters
        ----------
        value: double const &

        """
        return _jam.ForsimTool_set_stop_time(self, *args)

    def copyProperty_report_time_step(self, source):
        r"""
        copyProperty_report_time_step(ForsimTool self, ForsimTool source)

        Parameters
        ----------
        source: OpenSim::ForsimTool::Self const &

        """
        return _jam.ForsimTool_copyProperty_report_time_step(self, source)

    def append_report_time_step(self, value):
        r"""
        append_report_time_step(ForsimTool self, double const & value) -> int

        Parameters
        ----------
        value: double const &

        """
        return _jam.ForsimTool_append_report_time_step(self, value)

    def constructProperty_report_time_step(self, initValue):
        r"""
        constructProperty_report_time_step(ForsimTool self, double const & initValue)

        Parameters
        ----------
        initValue: double const &

        """
        return _jam.ForsimTool_constructProperty_report_time_step(self, initValue)

    def get_report_time_step(self, *args):
        r"""
        get_report_time_step(ForsimTool self, int i) -> double const

        Parameters
        ----------
        i: int

        get_report_time_step(ForsimTool self) -> double const &
        """
        return _jam.ForsimTool_get_report_time_step(self, *args)

    def upd_report_time_step(self, *args):
        r"""
        upd_report_time_step(ForsimTool self, int i) -> double

        Parameters
        ----------
        i: int

        upd_report_time_step(ForsimTool self) -> double &
        """
        return _jam.ForsimTool_upd_report_time_step(self, *args)

    def set_report_time_step(self, *args):
        r"""
        set_report_time_step(ForsimTool self, int i, double const & value)

        Parameters
        ----------
        i: int
        value: double const &

        set_report_time_step(ForsimTool self, double const & value)

        Parameters
        ----------
        value: double const &

        """
        return _jam.ForsimTool_set_report_time_step(self, *args)

    def copyProperty_minimum_time_step(self, source):
        r"""
        copyProperty_minimum_time_step(ForsimTool self, ForsimTool source)

        Parameters
        ----------
        source: OpenSim::ForsimTool::Self const &

        """
        return _jam.ForsimTool_copyProperty_minimum_time_step(self, source)

    def append_minimum_time_step(self, value):
        r"""
        append_minimum_time_step(ForsimTool self, double const & value) -> int

        Parameters
        ----------
        value: double const &

        """
        return _jam.ForsimTool_append_minimum_time_step(self, value)

    def constructProperty_minimum_time_step(self, initValue):
        r"""
        constructProperty_minimum_time_step(ForsimTool self, double const & initValue)

        Parameters
        ----------
        initValue: double const &

        """
        return _jam.ForsimTool_constructProperty_minimum_time_step(self, initValue)

    def get_minimum_time_step(self, *args):
        r"""
        get_minimum_time_step(ForsimTool self, int i) -> double const

        Parameters
        ----------
        i: int

        get_minimum_time_step(ForsimTool self) -> double const &
        """
        return _jam.ForsimTool_get_minimum_time_step(self, *args)

    def upd_minimum_time_step(self, *args):
        r"""
        upd_minimum_time_step(ForsimTool self, int i) -> double

        Parameters
        ----------
        i: int

        upd_minimum_time_step(ForsimTool self) -> double &
        """
        return _jam.ForsimTool_upd_minimum_time_step(self, *args)

    def set_minimum_time_step(self, *args):
        r"""
        set_minimum_time_step(ForsimTool self, int i, double const & value)

        Parameters
        ----------
        i: int
        value: double const &

        set_minimum_time_step(ForsimTool self, double const & value)

        Parameters
        ----------
        value: double const &

        """
        return _jam.ForsimTool_set_minimum_time_step(self, *args)

    def copyProperty_maximum_time_step(self, source):
        r"""
        copyProperty_maximum_time_step(ForsimTool self, ForsimTool source)

        Parameters
        ----------
        source: OpenSim::ForsimTool::Self const &

        """
        return _jam.ForsimTool_copyProperty_maximum_time_step(self, source)

    def append_maximum_time_step(self, value):
        r"""
        append_maximum_time_step(ForsimTool self, double const & value) -> int

        Parameters
        ----------
        value: double const &

        """
        return _jam.ForsimTool_append_maximum_time_step(self, value)

    def constructProperty_maximum_time_step(self, initValue):
        r"""
        constructProperty_maximum_time_step(ForsimTool self, double const & initValue)

        Parameters
        ----------
        initValue: double const &

        """
        return _jam.ForsimTool_constructProperty_maximum_time_step(self, initValue)

    def get_maximum_time_step(self, *args):
        r"""
        get_maximum_time_step(ForsimTool self, int i) -> double const

        Parameters
        ----------
        i: int

        get_maximum_time_step(ForsimTool self) -> double const &
        """
        return _jam.ForsimTool_get_maximum_time_step(self, *args)

    def upd_maximum_time_step(self, *args):
        r"""
        upd_maximum_time_step(ForsimTool self, int i) -> double

        Parameters
        ----------
        i: int

        upd_maximum_time_step(ForsimTool self) -> double &
        """
        return _jam.ForsimTool_upd_maximum_time_step(self, *args)

    def set_maximum_time_step(self, *args):
        r"""
        set_maximum_time_step(ForsimTool self, int i, double const & value)

        Parameters
        ----------
        i: int
        value: double const &

        set_maximum_time_step(ForsimTool self, double const & value)

        Parameters
        ----------
        value: double const &

        """
        return _jam.ForsimTool_set_maximum_time_step(self, *args)

    def copyProperty_integrator_accuracy(self, source):
        r"""
        copyProperty_integrator_accuracy(ForsimTool self, ForsimTool source)

        Parameters
        ----------
        source: OpenSim::ForsimTool::Self const &

        """
        return _jam.ForsimTool_copyProperty_integrator_accuracy(self, source)

    def append_integrator_accuracy(self, value):
        r"""
        append_integrator_accuracy(ForsimTool self, double const & value) -> int

        Parameters
        ----------
        value: double const &

        """
        return _jam.ForsimTool_append_integrator_accuracy(self, value)

    def constructProperty_integrator_accuracy(self, initValue):
        r"""
        constructProperty_integrator_accuracy(ForsimTool self, double const & initValue)

        Parameters
        ----------
        initValue: double const &

        """
        return _jam.ForsimTool_constructProperty_integrator_accuracy(self, initValue)

    def get_integrator_accuracy(self, *args):
        r"""
        get_integrator_accuracy(ForsimTool self, int i) -> double const

        Parameters
        ----------
        i: int

        get_integrator_accuracy(ForsimTool self) -> double const &
        """
        return _jam.ForsimTool_get_integrator_accuracy(self, *args)

    def upd_integrator_accuracy(self, *args):
        r"""
        upd_integrator_accuracy(ForsimTool self, int i) -> double

        Parameters
        ----------
        i: int

        upd_integrator_accuracy(ForsimTool self) -> double &
        """
        return _jam.ForsimTool_upd_integrator_accuracy(self, *args)

    def set_integrator_accuracy(self, *args):
        r"""
        set_integrator_accuracy(ForsimTool self, int i, double const & value)

        Parameters
        ----------
        i: int
        value: double const &

        set_integrator_accuracy(ForsimTool self, double const & value)

        Parameters
        ----------
        value: double const &

        """
        return _jam.ForsimTool_set_integrator_accuracy(self, *args)

    def copyProperty_internal_step_limit(self, source):
        r"""
        copyProperty_internal_step_limit(ForsimTool self, ForsimTool source)

        Parameters
        ----------
        source: OpenSim::ForsimTool::Self const &

        """
        return _jam.ForsimTool_copyProperty_internal_step_limit(self, source)

    def append_internal_step_limit(self, value):
        r"""
        append_internal_step_limit(ForsimTool self, int const & value) -> int

        Parameters
        ----------
        value: int const &

        """
        return _jam.ForsimTool_append_internal_step_limit(self, value)

    def constructProperty_internal_step_limit(self, initValue):
        r"""
        constructProperty_internal_step_limit(ForsimTool self, int const & initValue)

        Parameters
        ----------
        initValue: int const &

        """
        return _jam.ForsimTool_constructProperty_internal_step_limit(self, initValue)

    def get_internal_step_limit(self, *args):
        r"""
        get_internal_step_limit(ForsimTool self, int i) -> int const

        Parameters
        ----------
        i: int

        get_internal_step_limit(ForsimTool self) -> int const &
        """
        return _jam.ForsimTool_get_internal_step_limit(self, *args)

    def upd_internal_step_limit(self, *args):
        r"""
        upd_internal_step_limit(ForsimTool self, int i) -> int

        Parameters
        ----------
        i: int

        upd_internal_step_limit(ForsimTool self) -> int &
        """
        return _jam.ForsimTool_upd_internal_step_limit(self, *args)

    def set_internal_step_limit(self, *args):
        r"""
        set_internal_step_limit(ForsimTool self, int i, int const & value)

        Parameters
        ----------
        i: int
        value: int const &

        set_internal_step_limit(ForsimTool self, int const & value)

        Parameters
        ----------
        value: int const &

        """
        return _jam.ForsimTool_set_internal_step_limit(self, *args)

    def copyProperty_constant_muscle_control(self, source):
        r"""
        copyProperty_constant_muscle_control(ForsimTool self, ForsimTool source)

        Parameters
        ----------
        source: OpenSim::ForsimTool::Self const &

        """
        return _jam.ForsimTool_copyProperty_constant_muscle_control(self, source)

    def append_constant_muscle_control(self, value):
        r"""
        append_constant_muscle_control(ForsimTool self, double const & value) -> int

        Parameters
        ----------
        value: double const &

        """
        return _jam.ForsimTool_append_constant_muscle_control(self, value)

    def constructProperty_constant_muscle_control(self, initValue):
        r"""
        constructProperty_constant_muscle_control(ForsimTool self, double const & initValue)

        Parameters
        ----------
        initValue: double const &

        """
        return _jam.ForsimTool_constructProperty_constant_muscle_control(self, initValue)

    def get_constant_muscle_control(self, *args):
        r"""
        get_constant_muscle_control(ForsimTool self, int i) -> double const

        Parameters
        ----------
        i: int

        get_constant_muscle_control(ForsimTool self) -> double const &
        """
        return _jam.ForsimTool_get_constant_muscle_control(self, *args)

    def upd_constant_muscle_control(self, *args):
        r"""
        upd_constant_muscle_control(ForsimTool self, int i) -> double

        Parameters
        ----------
        i: int

        upd_constant_muscle_control(ForsimTool self) -> double &
        """
        return _jam.ForsimTool_upd_constant_muscle_control(self, *args)

    def set_constant_muscle_control(self, *args):
        r"""
        set_constant_muscle_control(ForsimTool self, int i, double const & value)

        Parameters
        ----------
        i: int
        value: double const &

        set_constant_muscle_control(ForsimTool self, double const & value)

        Parameters
        ----------
        value: double const &

        """
        return _jam.ForsimTool_set_constant_muscle_control(self, *args)

    def copyProperty_ignore_activation_dynamics(self, source):
        r"""
        copyProperty_ignore_activation_dynamics(ForsimTool self, ForsimTool source)

        Parameters
        ----------
        source: OpenSim::ForsimTool::Self const &

        """
        return _jam.ForsimTool_copyProperty_ignore_activation_dynamics(self, source)

    def append_ignore_activation_dynamics(self, value):
        r"""
        append_ignore_activation_dynamics(ForsimTool self, bool const & value) -> int

        Parameters
        ----------
        value: bool const &

        """
        return _jam.ForsimTool_append_ignore_activation_dynamics(self, value)

    def constructProperty_ignore_activation_dynamics(self, initValue):
        r"""
        constructProperty_ignore_activation_dynamics(ForsimTool self, bool const & initValue)

        Parameters
        ----------
        initValue: bool const &

        """
        return _jam.ForsimTool_constructProperty_ignore_activation_dynamics(self, initValue)

    def get_ignore_activation_dynamics(self, *args):
        r"""
        get_ignore_activation_dynamics(ForsimTool self, int i) -> bool const

        Parameters
        ----------
        i: int

        get_ignore_activation_dynamics(ForsimTool self) -> bool const &
        """
        return _jam.ForsimTool_get_ignore_activation_dynamics(self, *args)

    def upd_ignore_activation_dynamics(self, *args):
        r"""
        upd_ignore_activation_dynamics(ForsimTool self, int i) -> bool

        Parameters
        ----------
        i: int

        upd_ignore_activation_dynamics(ForsimTool self) -> bool &
        """
        return _jam.ForsimTool_upd_ignore_activation_dynamics(self, *args)

    def set_ignore_activation_dynamics(self, *args):
        r"""
        set_ignore_activation_dynamics(ForsimTool self, int i, bool const & value)

        Parameters
        ----------
        i: int
        value: bool const &

        set_ignore_activation_dynamics(ForsimTool self, bool const & value)

        Parameters
        ----------
        value: bool const &

        """
        return _jam.ForsimTool_set_ignore_activation_dynamics(self, *args)

    def copyProperty_ignore_tendon_compliance(self, source):
        r"""
        copyProperty_ignore_tendon_compliance(ForsimTool self, ForsimTool source)

        Parameters
        ----------
        source: OpenSim::ForsimTool::Self const &

        """
        return _jam.ForsimTool_copyProperty_ignore_tendon_compliance(self, source)

    def append_ignore_tendon_compliance(self, value):
        r"""
        append_ignore_tendon_compliance(ForsimTool self, bool const & value) -> int

        Parameters
        ----------
        value: bool const &

        """
        return _jam.ForsimTool_append_ignore_tendon_compliance(self, value)

    def constructProperty_ignore_tendon_compliance(self, initValue):
        r"""
        constructProperty_ignore_tendon_compliance(ForsimTool self, bool const & initValue)

        Parameters
        ----------
        initValue: bool const &

        """
        return _jam.ForsimTool_constructProperty_ignore_tendon_compliance(self, initValue)

    def get_ignore_tendon_compliance(self, *args):
        r"""
        get_ignore_tendon_compliance(ForsimTool self, int i) -> bool const

        Parameters
        ----------
        i: int

        get_ignore_tendon_compliance(ForsimTool self) -> bool const &
        """
        return _jam.ForsimTool_get_ignore_tendon_compliance(self, *args)

    def upd_ignore_tendon_compliance(self, *args):
        r"""
        upd_ignore_tendon_compliance(ForsimTool self, int i) -> bool

        Parameters
        ----------
        i: int

        upd_ignore_tendon_compliance(ForsimTool self) -> bool &
        """
        return _jam.ForsimTool_upd_ignore_tendon_compliance(self, *args)

    def set_ignore_tendon_compliance(self, *args):
        r"""
        set_ignore_tendon_compliance(ForsimTool self, int i, bool const & value)

        Parameters
        ----------
        i: int
        value: bool const &

        set_ignore_tendon_compliance(ForsimTool self, bool const & value)

        Parameters
        ----------
        value: bool const &

        """
        return _jam.ForsimTool_set_ignore_tendon_compliance(self, *args)

    def copyProperty_ignore_muscle_dynamics(self, source):
        r"""
        copyProperty_ignore_muscle_dynamics(ForsimTool self, ForsimTool source)

        Parameters
        ----------
        source: OpenSim::ForsimTool::Self const &

        """
        return _jam.ForsimTool_copyProperty_ignore_muscle_dynamics(self, source)

    def append_ignore_muscle_dynamics(self, value):
        r"""
        append_ignore_muscle_dynamics(ForsimTool self, bool const & value) -> int

        Parameters
        ----------
        value: bool const &

        """
        return _jam.ForsimTool_append_ignore_muscle_dynamics(self, value)

    def constructProperty_ignore_muscle_dynamics(self, initValue):
        r"""
        constructProperty_ignore_muscle_dynamics(ForsimTool self, bool const & initValue)

        Parameters
        ----------
        initValue: bool const &

        """
        return _jam.ForsimTool_constructProperty_ignore_muscle_dynamics(self, initValue)

    def get_ignore_muscle_dynamics(self, *args):
        r"""
        get_ignore_muscle_dynamics(ForsimTool self, int i) -> bool const

        Parameters
        ----------
        i: int

        get_ignore_muscle_dynamics(ForsimTool self) -> bool const &
        """
        return _jam.ForsimTool_get_ignore_muscle_dynamics(self, *args)

    def upd_ignore_muscle_dynamics(self, *args):
        r"""
        upd_ignore_muscle_dynamics(ForsimTool self, int i) -> bool

        Parameters
        ----------
        i: int

        upd_ignore_muscle_dynamics(ForsimTool self) -> bool &
        """
        return _jam.ForsimTool_upd_ignore_muscle_dynamics(self, *args)

    def set_ignore_muscle_dynamics(self, *args):
        r"""
        set_ignore_muscle_dynamics(ForsimTool self, int i, bool const & value)

        Parameters
        ----------
        i: int
        value: bool const &

        set_ignore_muscle_dynamics(ForsimTool self, bool const & value)

        Parameters
        ----------
        value: bool const &

        """
        return _jam.ForsimTool_set_ignore_muscle_dynamics(self, *args)

    def copyProperty_equilibrate_muscles(self, source):
        r"""
        copyProperty_equilibrate_muscles(ForsimTool self, ForsimTool source)

        Parameters
        ----------
        source: OpenSim::ForsimTool::Self const &

        """
        return _jam.ForsimTool_copyProperty_equilibrate_muscles(self, source)

    def append_equilibrate_muscles(self, value):
        r"""
        append_equilibrate_muscles(ForsimTool self, bool const & value) -> int

        Parameters
        ----------
        value: bool const &

        """
        return _jam.ForsimTool_append_equilibrate_muscles(self, value)

    def constructProperty_equilibrate_muscles(self, initValue):
        r"""
        constructProperty_equilibrate_muscles(ForsimTool self, bool const & initValue)

        Parameters
        ----------
        initValue: bool const &

        """
        return _jam.ForsimTool_constructProperty_equilibrate_muscles(self, initValue)

    def get_equilibrate_muscles(self, *args):
        r"""
        get_equilibrate_muscles(ForsimTool self, int i) -> bool const

        Parameters
        ----------
        i: int

        get_equilibrate_muscles(ForsimTool self) -> bool const &
        """
        return _jam.ForsimTool_get_equilibrate_muscles(self, *args)

    def upd_equilibrate_muscles(self, *args):
        r"""
        upd_equilibrate_muscles(ForsimTool self, int i) -> bool

        Parameters
        ----------
        i: int

        upd_equilibrate_muscles(ForsimTool self) -> bool &
        """
        return _jam.ForsimTool_upd_equilibrate_muscles(self, *args)

    def set_equilibrate_muscles(self, *args):
        r"""
        set_equilibrate_muscles(ForsimTool self, int i, bool const & value)

        Parameters
        ----------
        i: int
        value: bool const &

        set_equilibrate_muscles(ForsimTool self, bool const & value)

        Parameters
        ----------
        value: bool const &

        """
        return _jam.ForsimTool_set_equilibrate_muscles(self, *args)

    def copyProperty_unconstrained_coordinates(self, source):
        r"""
        copyProperty_unconstrained_coordinates(ForsimTool self, ForsimTool source)

        Parameters
        ----------
        source: OpenSim::ForsimTool::Self const &

        """
        return _jam.ForsimTool_copyProperty_unconstrained_coordinates(self, source)

    def get_unconstrained_coordinates(self, i):
        r"""
        get_unconstrained_coordinates(ForsimTool self, int i) -> std::string const &

        Parameters
        ----------
        i: int

        """
        return _jam.ForsimTool_get_unconstrained_coordinates(self, i)

    def upd_unconstrained_coordinates(self, i):
        r"""
        upd_unconstrained_coordinates(ForsimTool self, int i) -> std::string &

        Parameters
        ----------
        i: int

        """
        return _jam.ForsimTool_upd_unconstrained_coordinates(self, i)

    def set_unconstrained_coordinates(self, i, value):
        r"""
        set_unconstrained_coordinates(ForsimTool self, int i, std::string const & value)

        Parameters
        ----------
        i: int
        value: std::string const &

        """
        return _jam.ForsimTool_set_unconstrained_coordinates(self, i, value)

    def append_unconstrained_coordinates(self, value):
        r"""
        append_unconstrained_coordinates(ForsimTool self, std::string const & value) -> int

        Parameters
        ----------
        value: std::string const &

        """
        return _jam.ForsimTool_append_unconstrained_coordinates(self, value)

    def constructProperty_unconstrained_coordinates(self):
        r"""constructProperty_unconstrained_coordinates(ForsimTool self)"""
        return _jam.ForsimTool_constructProperty_unconstrained_coordinates(self)

    def copyProperty_actuator_input_file(self, source):
        r"""
        copyProperty_actuator_input_file(ForsimTool self, ForsimTool source)

        Parameters
        ----------
        source: OpenSim::ForsimTool::Self const &

        """
        return _jam.ForsimTool_copyProperty_actuator_input_file(self, source)

    def append_actuator_input_file(self, value):
        r"""
        append_actuator_input_file(ForsimTool self, std::string const & value) -> int

        Parameters
        ----------
        value: std::string const &

        """
        return _jam.ForsimTool_append_actuator_input_file(self, value)

    def constructProperty_actuator_input_file(self, initValue):
        r"""
        constructProperty_actuator_input_file(ForsimTool self, std::string const & initValue)

        Parameters
        ----------
        initValue: std::string const &

        """
        return _jam.ForsimTool_constructProperty_actuator_input_file(self, initValue)

    def get_actuator_input_file(self, *args):
        r"""
        get_actuator_input_file(ForsimTool self, int i) -> std::string const

        Parameters
        ----------
        i: int

        get_actuator_input_file(ForsimTool self) -> std::string const &
        """
        return _jam.ForsimTool_get_actuator_input_file(self, *args)

    def upd_actuator_input_file(self, *args):
        r"""
        upd_actuator_input_file(ForsimTool self, int i) -> std::string

        Parameters
        ----------
        i: int

        upd_actuator_input_file(ForsimTool self) -> std::string &
        """
        return _jam.ForsimTool_upd_actuator_input_file(self, *args)

    def set_actuator_input_file(self, *args):
        r"""
        set_actuator_input_file(ForsimTool self, int i, std::string const & value)

        Parameters
        ----------
        i: int
        value: std::string const &

        set_actuator_input_file(ForsimTool self, std::string const & value)

        Parameters
        ----------
        value: std::string const &

        """
        return _jam.ForsimTool_set_actuator_input_file(self, *args)

    def copyProperty_external_loads_file(self, source):
        r"""
        copyProperty_external_loads_file(ForsimTool self, ForsimTool source)

        Parameters
        ----------
        source: OpenSim::ForsimTool::Self const &

        """
        return _jam.ForsimTool_copyProperty_external_loads_file(self, source)

    def append_external_loads_file(self, value):
        r"""
        append_external_loads_file(ForsimTool self, std::string const & value) -> int

        Parameters
        ----------
        value: std::string const &

        """
        return _jam.ForsimTool_append_external_loads_file(self, value)

    def constructProperty_external_loads_file(self, initValue):
        r"""
        constructProperty_external_loads_file(ForsimTool self, std::string const & initValue)

        Parameters
        ----------
        initValue: std::string const &

        """
        return _jam.ForsimTool_constructProperty_external_loads_file(self, initValue)

    def get_external_loads_file(self, *args):
        r"""
        get_external_loads_file(ForsimTool self, int i) -> std::string const

        Parameters
        ----------
        i: int

        get_external_loads_file(ForsimTool self) -> std::string const &
        """
        return _jam.ForsimTool_get_external_loads_file(self, *args)

    def upd_external_loads_file(self, *args):
        r"""
        upd_external_loads_file(ForsimTool self, int i) -> std::string

        Parameters
        ----------
        i: int

        upd_external_loads_file(ForsimTool self) -> std::string &
        """
        return _jam.ForsimTool_upd_external_loads_file(self, *args)

    def set_external_loads_file(self, *args):
        r"""
        set_external_loads_file(ForsimTool self, int i, std::string const & value)

        Parameters
        ----------
        i: int
        value: std::string const &

        set_external_loads_file(ForsimTool self, std::string const & value)

        Parameters
        ----------
        value: std::string const &

        """
        return _jam.ForsimTool_set_external_loads_file(self, *args)

    def copyProperty_prescribed_coordinates_file(self, source):
        r"""
        copyProperty_prescribed_coordinates_file(ForsimTool self, ForsimTool source)

        Parameters
        ----------
        source: OpenSim::ForsimTool::Self const &

        """
        return _jam.ForsimTool_copyProperty_prescribed_coordinates_file(self, source)

    def append_prescribed_coordinates_file(self, value):
        r"""
        append_prescribed_coordinates_file(ForsimTool self, std::string const & value) -> int

        Parameters
        ----------
        value: std::string const &

        """
        return _jam.ForsimTool_append_prescribed_coordinates_file(self, value)

    def constructProperty_prescribed_coordinates_file(self, initValue):
        r"""
        constructProperty_prescribed_coordinates_file(ForsimTool self, std::string const & initValue)

        Parameters
        ----------
        initValue: std::string const &

        """
        return _jam.ForsimTool_constructProperty_prescribed_coordinates_file(self, initValue)

    def get_prescribed_coordinates_file(self, *args):
        r"""
        get_prescribed_coordinates_file(ForsimTool self, int i) -> std::string const

        Parameters
        ----------
        i: int

        get_prescribed_coordinates_file(ForsimTool self) -> std::string const &
        """
        return _jam.ForsimTool_get_prescribed_coordinates_file(self, *args)

    def upd_prescribed_coordinates_file(self, *args):
        r"""
        upd_prescribed_coordinates_file(ForsimTool self, int i) -> std::string

        Parameters
        ----------
        i: int

        upd_prescribed_coordinates_file(ForsimTool self) -> std::string &
        """
        return _jam.ForsimTool_upd_prescribed_coordinates_file(self, *args)

    def set_prescribed_coordinates_file(self, *args):
        r"""
        set_prescribed_coordinates_file(ForsimTool self, int i, std::string const & value)

        Parameters
        ----------
        i: int
        value: std::string const &

        set_prescribed_coordinates_file(ForsimTool self, std::string const & value)

        Parameters
        ----------
        value: std::string const &

        """
        return _jam.ForsimTool_set_prescribed_coordinates_file(self, *args)

    def copyProperty_use_visualizer(self, source):
        r"""
        copyProperty_use_visualizer(ForsimTool self, ForsimTool source)

        Parameters
        ----------
        source: OpenSim::ForsimTool::Self const &

        """
        return _jam.ForsimTool_copyProperty_use_visualizer(self, source)

    def append_use_visualizer(self, value):
        r"""
        append_use_visualizer(ForsimTool self, bool const & value) -> int

        Parameters
        ----------
        value: bool const &

        """
        return _jam.ForsimTool_append_use_visualizer(self, value)

    def constructProperty_use_visualizer(self, initValue):
        r"""
        constructProperty_use_visualizer(ForsimTool self, bool const & initValue)

        Parameters
        ----------
        initValue: bool const &

        """
        return _jam.ForsimTool_constructProperty_use_visualizer(self, initValue)

    def get_use_visualizer(self, *args):
        r"""
        get_use_visualizer(ForsimTool self, int i) -> bool const

        Parameters
        ----------
        i: int

        get_use_visualizer(ForsimTool self) -> bool const &
        """
        return _jam.ForsimTool_get_use_visualizer(self, *args)

    def upd_use_visualizer(self, *args):
        r"""
        upd_use_visualizer(ForsimTool self, int i) -> bool

        Parameters
        ----------
        i: int

        upd_use_visualizer(ForsimTool self) -> bool &
        """
        return _jam.ForsimTool_upd_use_visualizer(self, *args)

    def set_use_visualizer(self, *args):
        r"""
        set_use_visualizer(ForsimTool self, int i, bool const & value)

        Parameters
        ----------
        i: int
        value: bool const &

        set_use_visualizer(ForsimTool self, bool const & value)

        Parameters
        ----------
        value: bool const &

        """
        return _jam.ForsimTool_set_use_visualizer(self, *args)

    def copyProperty_verbose(self, source):
        r"""
        copyProperty_verbose(ForsimTool self, ForsimTool source)

        Parameters
        ----------
        source: OpenSim::ForsimTool::Self const &

        """
        return _jam.ForsimTool_copyProperty_verbose(self, source)

    def append_verbose(self, value):
        r"""
        append_verbose(ForsimTool self, int const & value) -> int

        Parameters
        ----------
        value: int const &

        """
        return _jam.ForsimTool_append_verbose(self, value)

    def constructProperty_verbose(self, initValue):
        r"""
        constructProperty_verbose(ForsimTool self, int const & initValue)

        Parameters
        ----------
        initValue: int const &

        """
        return _jam.ForsimTool_constructProperty_verbose(self, initValue)

    def get_verbose(self, *args):
        r"""
        get_verbose(ForsimTool self, int i) -> int const

        Parameters
        ----------
        i: int

        get_verbose(ForsimTool self) -> int const &
        """
        return _jam.ForsimTool_get_verbose(self, *args)

    def upd_verbose(self, *args):
        r"""
        upd_verbose(ForsimTool self, int i) -> int

        Parameters
        ----------
        i: int

        upd_verbose(ForsimTool self) -> int &
        """
        return _jam.ForsimTool_upd_verbose(self, *args)

    def set_verbose(self, *args):
        r"""
        set_verbose(ForsimTool self, int i, int const & value)

        Parameters
        ----------
        i: int
        value: int const &

        set_verbose(ForsimTool self, int const & value)

        Parameters
        ----------
        value: int const &

        """
        return _jam.ForsimTool_set_verbose(self, *args)

    def copyProperty_AnalysisSet(self, source):
        r"""
        copyProperty_AnalysisSet(ForsimTool self, ForsimTool source)

        Parameters
        ----------
        source: OpenSim::ForsimTool::Self const &

        """
        return _jam.ForsimTool_copyProperty_AnalysisSet(self, source)

    def append_AnalysisSet(self, value):
        r"""
        append_AnalysisSet(ForsimTool self, AnalysisSet value) -> int

        Parameters
        ----------
        value: OpenSim::AnalysisSet const &

        """
        return _jam.ForsimTool_append_AnalysisSet(self, value)

    def constructProperty_AnalysisSet(self, initValue):
        r"""
        constructProperty_AnalysisSet(ForsimTool self, AnalysisSet initValue)

        Parameters
        ----------
        initValue: OpenSim::AnalysisSet const &

        """
        return _jam.ForsimTool_constructProperty_AnalysisSet(self, initValue)

    def get_AnalysisSet(self, *args):
        r"""
        get_AnalysisSet(ForsimTool self, int i) -> AnalysisSet

        Parameters
        ----------
        i: int

        get_AnalysisSet(ForsimTool self) -> AnalysisSet
        """
        return _jam.ForsimTool_get_AnalysisSet(self, *args)

    def upd_AnalysisSet(self, *args):
        r"""
        upd_AnalysisSet(ForsimTool self, int i) -> AnalysisSet

        Parameters
        ----------
        i: int

        upd_AnalysisSet(ForsimTool self) -> AnalysisSet
        """
        return _jam.ForsimTool_upd_AnalysisSet(self, *args)

    def set_AnalysisSet(self, *args):
        r"""
        set_AnalysisSet(ForsimTool self, int i, AnalysisSet value)

        Parameters
        ----------
        i: int
        value: OpenSim::AnalysisSet const &

        set_AnalysisSet(ForsimTool self, AnalysisSet value)

        Parameters
        ----------
        value: OpenSim::AnalysisSet const &

        """
        return _jam.ForsimTool_set_AnalysisSet(self, *args)

    def __init__(self, *args):
        r"""
        __init__(ForsimTool self) -> ForsimTool
        __init__(ForsimTool self, std::string settings_file) -> ForsimTool

        Parameters
        ----------
        settings_file: std::string

        """
        _jam.ForsimTool_swiginit(self, _jam.new_ForsimTool(*args))

    def setModel(self, aModel):
        r"""
        setModel(ForsimTool self, Model aModel)

        Parameters
        ----------
        aModel: OpenSim::Model &

        """
        return _jam.ForsimTool_setModel(self, aModel)

    def run(self):
        r"""run(ForsimTool self) -> bool"""
        return _jam.ForsimTool_run(self)
    __swig_destroy__ = _jam.delete_ForsimTool

# Register ForsimTool in _jam:
_jam.ForsimTool_swigregister(ForsimTool)

def ForsimTool_safeDownCast(obj):
    r"""
    ForsimTool_safeDownCast(OpenSimObject obj) -> ForsimTool

    Parameters
    ----------
    obj: OpenSim::Object *

    """
    return _jam.ForsimTool_safeDownCast(obj)

def ForsimTool_getClassName():
    r"""ForsimTool_getClassName() -> std::string const &"""
    return _jam.ForsimTool_getClassName()

class JointMechanicsTool(opensim.common.OpenSimObject):
    r"""Proxy of C++ OpenSim::JointMechanicsTool class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def safeDownCast(obj):
        r"""
        safeDownCast(OpenSimObject obj) -> JointMechanicsTool

        Parameters
        ----------
        obj: OpenSim::Object *

        """
        return _jam.JointMechanicsTool_safeDownCast(obj)

    def assign(self, aObject):
        r"""
        assign(JointMechanicsTool self, OpenSimObject aObject)

        Parameters
        ----------
        aObject: OpenSim::Object &

        """
        return _jam.JointMechanicsTool_assign(self, aObject)

    @staticmethod
    def getClassName():
        r"""getClassName() -> std::string const &"""
        return _jam.JointMechanicsTool_getClassName()

    def clone(self):
        r"""clone(JointMechanicsTool self) -> JointMechanicsTool"""
        return _jam.JointMechanicsTool_clone(self)

    def getConcreteClassName(self):
        r"""getConcreteClassName(JointMechanicsTool self) -> std::string const &"""
        return _jam.JointMechanicsTool_getConcreteClassName(self)

    def copyProperty_model_file(self, source):
        r"""
        copyProperty_model_file(JointMechanicsTool self, JointMechanicsTool source)

        Parameters
        ----------
        source: OpenSim::JointMechanicsTool::Self const &

        """
        return _jam.JointMechanicsTool_copyProperty_model_file(self, source)

    def append_model_file(self, value):
        r"""
        append_model_file(JointMechanicsTool self, std::string const & value) -> int

        Parameters
        ----------
        value: std::string const &

        """
        return _jam.JointMechanicsTool_append_model_file(self, value)

    def constructProperty_model_file(self, initValue):
        r"""
        constructProperty_model_file(JointMechanicsTool self, std::string const & initValue)

        Parameters
        ----------
        initValue: std::string const &

        """
        return _jam.JointMechanicsTool_constructProperty_model_file(self, initValue)

    def get_model_file(self, *args):
        r"""
        get_model_file(JointMechanicsTool self, int i) -> std::string const

        Parameters
        ----------
        i: int

        get_model_file(JointMechanicsTool self) -> std::string const &
        """
        return _jam.JointMechanicsTool_get_model_file(self, *args)

    def upd_model_file(self, *args):
        r"""
        upd_model_file(JointMechanicsTool self, int i) -> std::string

        Parameters
        ----------
        i: int

        upd_model_file(JointMechanicsTool self) -> std::string &
        """
        return _jam.JointMechanicsTool_upd_model_file(self, *args)

    def set_model_file(self, *args):
        r"""
        set_model_file(JointMechanicsTool self, int i, std::string const & value)

        Parameters
        ----------
        i: int
        value: std::string const &

        set_model_file(JointMechanicsTool self, std::string const & value)

        Parameters
        ----------
        value: std::string const &

        """
        return _jam.JointMechanicsTool_set_model_file(self, *args)

    def copyProperty_input_states_file(self, source):
        r"""
        copyProperty_input_states_file(JointMechanicsTool self, JointMechanicsTool source)

        Parameters
        ----------
        source: OpenSim::JointMechanicsTool::Self const &

        """
        return _jam.JointMechanicsTool_copyProperty_input_states_file(self, source)

    def append_input_states_file(self, value):
        r"""
        append_input_states_file(JointMechanicsTool self, std::string const & value) -> int

        Parameters
        ----------
        value: std::string const &

        """
        return _jam.JointMechanicsTool_append_input_states_file(self, value)

    def constructProperty_input_states_file(self, initValue):
        r"""
        constructProperty_input_states_file(JointMechanicsTool self, std::string const & initValue)

        Parameters
        ----------
        initValue: std::string const &

        """
        return _jam.JointMechanicsTool_constructProperty_input_states_file(self, initValue)

    def get_input_states_file(self, *args):
        r"""
        get_input_states_file(JointMechanicsTool self, int i) -> std::string const

        Parameters
        ----------
        i: int

        get_input_states_file(JointMechanicsTool self) -> std::string const &
        """
        return _jam.JointMechanicsTool_get_input_states_file(self, *args)

    def upd_input_states_file(self, *args):
        r"""
        upd_input_states_file(JointMechanicsTool self, int i) -> std::string

        Parameters
        ----------
        i: int

        upd_input_states_file(JointMechanicsTool self) -> std::string &
        """
        return _jam.JointMechanicsTool_upd_input_states_file(self, *args)

    def set_input_states_file(self, *args):
        r"""
        set_input_states_file(JointMechanicsTool self, int i, std::string const & value)

        Parameters
        ----------
        i: int
        value: std::string const &

        set_input_states_file(JointMechanicsTool self, std::string const & value)

        Parameters
        ----------
        value: std::string const &

        """
        return _jam.JointMechanicsTool_set_input_states_file(self, *args)

    def copyProperty_use_muscle_physiology(self, source):
        r"""
        copyProperty_use_muscle_physiology(JointMechanicsTool self, JointMechanicsTool source)

        Parameters
        ----------
        source: OpenSim::JointMechanicsTool::Self const &

        """
        return _jam.JointMechanicsTool_copyProperty_use_muscle_physiology(self, source)

    def append_use_muscle_physiology(self, value):
        r"""
        append_use_muscle_physiology(JointMechanicsTool self, bool const & value) -> int

        Parameters
        ----------
        value: bool const &

        """
        return _jam.JointMechanicsTool_append_use_muscle_physiology(self, value)

    def constructProperty_use_muscle_physiology(self, initValue):
        r"""
        constructProperty_use_muscle_physiology(JointMechanicsTool self, bool const & initValue)

        Parameters
        ----------
        initValue: bool const &

        """
        return _jam.JointMechanicsTool_constructProperty_use_muscle_physiology(self, initValue)

    def get_use_muscle_physiology(self, *args):
        r"""
        get_use_muscle_physiology(JointMechanicsTool self, int i) -> bool const

        Parameters
        ----------
        i: int

        get_use_muscle_physiology(JointMechanicsTool self) -> bool const &
        """
        return _jam.JointMechanicsTool_get_use_muscle_physiology(self, *args)

    def upd_use_muscle_physiology(self, *args):
        r"""
        upd_use_muscle_physiology(JointMechanicsTool self, int i) -> bool

        Parameters
        ----------
        i: int

        upd_use_muscle_physiology(JointMechanicsTool self) -> bool &
        """
        return _jam.JointMechanicsTool_upd_use_muscle_physiology(self, *args)

    def set_use_muscle_physiology(self, *args):
        r"""
        set_use_muscle_physiology(JointMechanicsTool self, int i, bool const & value)

        Parameters
        ----------
        i: int
        value: bool const &

        set_use_muscle_physiology(JointMechanicsTool self, bool const & value)

        Parameters
        ----------
        value: bool const &

        """
        return _jam.JointMechanicsTool_set_use_muscle_physiology(self, *args)

    def copyProperty_input_transforms_file(self, source):
        r"""
        copyProperty_input_transforms_file(JointMechanicsTool self, JointMechanicsTool source)

        Parameters
        ----------
        source: OpenSim::JointMechanicsTool::Self const &

        """
        return _jam.JointMechanicsTool_copyProperty_input_transforms_file(self, source)

    def append_input_transforms_file(self, value):
        r"""
        append_input_transforms_file(JointMechanicsTool self, std::string const & value) -> int

        Parameters
        ----------
        value: std::string const &

        """
        return _jam.JointMechanicsTool_append_input_transforms_file(self, value)

    def constructProperty_input_transforms_file(self, initValue):
        r"""
        constructProperty_input_transforms_file(JointMechanicsTool self, std::string const & initValue)

        Parameters
        ----------
        initValue: std::string const &

        """
        return _jam.JointMechanicsTool_constructProperty_input_transforms_file(self, initValue)

    def get_input_transforms_file(self, *args):
        r"""
        get_input_transforms_file(JointMechanicsTool self, int i) -> std::string const

        Parameters
        ----------
        i: int

        get_input_transforms_file(JointMechanicsTool self) -> std::string const &
        """
        return _jam.JointMechanicsTool_get_input_transforms_file(self, *args)

    def upd_input_transforms_file(self, *args):
        r"""
        upd_input_transforms_file(JointMechanicsTool self, int i) -> std::string

        Parameters
        ----------
        i: int

        upd_input_transforms_file(JointMechanicsTool self) -> std::string &
        """
        return _jam.JointMechanicsTool_upd_input_transforms_file(self, *args)

    def set_input_transforms_file(self, *args):
        r"""
        set_input_transforms_file(JointMechanicsTool self, int i, std::string const & value)

        Parameters
        ----------
        i: int
        value: std::string const &

        set_input_transforms_file(JointMechanicsTool self, std::string const & value)

        Parameters
        ----------
        value: std::string const &

        """
        return _jam.JointMechanicsTool_set_input_transforms_file(self, *args)

    def copyProperty_input_forces_file(self, source):
        r"""
        copyProperty_input_forces_file(JointMechanicsTool self, JointMechanicsTool source)

        Parameters
        ----------
        source: OpenSim::JointMechanicsTool::Self const &

        """
        return _jam.JointMechanicsTool_copyProperty_input_forces_file(self, source)

    def append_input_forces_file(self, value):
        r"""
        append_input_forces_file(JointMechanicsTool self, std::string const & value) -> int

        Parameters
        ----------
        value: std::string const &

        """
        return _jam.JointMechanicsTool_append_input_forces_file(self, value)

    def constructProperty_input_forces_file(self, initValue):
        r"""
        constructProperty_input_forces_file(JointMechanicsTool self, std::string const & initValue)

        Parameters
        ----------
        initValue: std::string const &

        """
        return _jam.JointMechanicsTool_constructProperty_input_forces_file(self, initValue)

    def get_input_forces_file(self, *args):
        r"""
        get_input_forces_file(JointMechanicsTool self, int i) -> std::string const

        Parameters
        ----------
        i: int

        get_input_forces_file(JointMechanicsTool self) -> std::string const &
        """
        return _jam.JointMechanicsTool_get_input_forces_file(self, *args)

    def upd_input_forces_file(self, *args):
        r"""
        upd_input_forces_file(JointMechanicsTool self, int i) -> std::string

        Parameters
        ----------
        i: int

        upd_input_forces_file(JointMechanicsTool self) -> std::string &
        """
        return _jam.JointMechanicsTool_upd_input_forces_file(self, *args)

    def set_input_forces_file(self, *args):
        r"""
        set_input_forces_file(JointMechanicsTool self, int i, std::string const & value)

        Parameters
        ----------
        i: int
        value: std::string const &

        set_input_forces_file(JointMechanicsTool self, std::string const & value)

        Parameters
        ----------
        value: std::string const &

        """
        return _jam.JointMechanicsTool_set_input_forces_file(self, *args)

    def copyProperty_results_directory(self, source):
        r"""
        copyProperty_results_directory(JointMechanicsTool self, JointMechanicsTool source)

        Parameters
        ----------
        source: OpenSim::JointMechanicsTool::Self const &

        """
        return _jam.JointMechanicsTool_copyProperty_results_directory(self, source)

    def append_results_directory(self, value):
        r"""
        append_results_directory(JointMechanicsTool self, std::string const & value) -> int

        Parameters
        ----------
        value: std::string const &

        """
        return _jam.JointMechanicsTool_append_results_directory(self, value)

    def constructProperty_results_directory(self, initValue):
        r"""
        constructProperty_results_directory(JointMechanicsTool self, std::string const & initValue)

        Parameters
        ----------
        initValue: std::string const &

        """
        return _jam.JointMechanicsTool_constructProperty_results_directory(self, initValue)

    def get_results_directory(self, *args):
        r"""
        get_results_directory(JointMechanicsTool self, int i) -> std::string const

        Parameters
        ----------
        i: int

        get_results_directory(JointMechanicsTool self) -> std::string const &
        """
        return _jam.JointMechanicsTool_get_results_directory(self, *args)

    def upd_results_directory(self, *args):
        r"""
        upd_results_directory(JointMechanicsTool self, int i) -> std::string

        Parameters
        ----------
        i: int

        upd_results_directory(JointMechanicsTool self) -> std::string &
        """
        return _jam.JointMechanicsTool_upd_results_directory(self, *args)

    def set_results_directory(self, *args):
        r"""
        set_results_directory(JointMechanicsTool self, int i, std::string const & value)

        Parameters
        ----------
        i: int
        value: std::string const &

        set_results_directory(JointMechanicsTool self, std::string const & value)

        Parameters
        ----------
        value: std::string const &

        """
        return _jam.JointMechanicsTool_set_results_directory(self, *args)

    def copyProperty_results_file_basename(self, source):
        r"""
        copyProperty_results_file_basename(JointMechanicsTool self, JointMechanicsTool source)

        Parameters
        ----------
        source: OpenSim::JointMechanicsTool::Self const &

        """
        return _jam.JointMechanicsTool_copyProperty_results_file_basename(self, source)

    def append_results_file_basename(self, value):
        r"""
        append_results_file_basename(JointMechanicsTool self, std::string const & value) -> int

        Parameters
        ----------
        value: std::string const &

        """
        return _jam.JointMechanicsTool_append_results_file_basename(self, value)

    def constructProperty_results_file_basename(self, initValue):
        r"""
        constructProperty_results_file_basename(JointMechanicsTool self, std::string const & initValue)

        Parameters
        ----------
        initValue: std::string const &

        """
        return _jam.JointMechanicsTool_constructProperty_results_file_basename(self, initValue)

    def get_results_file_basename(self, *args):
        r"""
        get_results_file_basename(JointMechanicsTool self, int i) -> std::string const

        Parameters
        ----------
        i: int

        get_results_file_basename(JointMechanicsTool self) -> std::string const &
        """
        return _jam.JointMechanicsTool_get_results_file_basename(self, *args)

    def upd_results_file_basename(self, *args):
        r"""
        upd_results_file_basename(JointMechanicsTool self, int i) -> std::string

        Parameters
        ----------
        i: int

        upd_results_file_basename(JointMechanicsTool self) -> std::string &
        """
        return _jam.JointMechanicsTool_upd_results_file_basename(self, *args)

    def set_results_file_basename(self, *args):
        r"""
        set_results_file_basename(JointMechanicsTool self, int i, std::string const & value)

        Parameters
        ----------
        i: int
        value: std::string const &

        set_results_file_basename(JointMechanicsTool self, std::string const & value)

        Parameters
        ----------
        value: std::string const &

        """
        return _jam.JointMechanicsTool_set_results_file_basename(self, *args)

    def copyProperty_start_time(self, source):
        r"""
        copyProperty_start_time(JointMechanicsTool self, JointMechanicsTool source)

        Parameters
        ----------
        source: OpenSim::JointMechanicsTool::Self const &

        """
        return _jam.JointMechanicsTool_copyProperty_start_time(self, source)

    def append_start_time(self, value):
        r"""
        append_start_time(JointMechanicsTool self, double const & value) -> int

        Parameters
        ----------
        value: double const &

        """
        return _jam.JointMechanicsTool_append_start_time(self, value)

    def constructProperty_start_time(self, initValue):
        r"""
        constructProperty_start_time(JointMechanicsTool self, double const & initValue)

        Parameters
        ----------
        initValue: double const &

        """
        return _jam.JointMechanicsTool_constructProperty_start_time(self, initValue)

    def get_start_time(self, *args):
        r"""
        get_start_time(JointMechanicsTool self, int i) -> double const

        Parameters
        ----------
        i: int

        get_start_time(JointMechanicsTool self) -> double const &
        """
        return _jam.JointMechanicsTool_get_start_time(self, *args)

    def upd_start_time(self, *args):
        r"""
        upd_start_time(JointMechanicsTool self, int i) -> double

        Parameters
        ----------
        i: int

        upd_start_time(JointMechanicsTool self) -> double &
        """
        return _jam.JointMechanicsTool_upd_start_time(self, *args)

    def set_start_time(self, *args):
        r"""
        set_start_time(JointMechanicsTool self, int i, double const & value)

        Parameters
        ----------
        i: int
        value: double const &

        set_start_time(JointMechanicsTool self, double const & value)

        Parameters
        ----------
        value: double const &

        """
        return _jam.JointMechanicsTool_set_start_time(self, *args)

    def copyProperty_stop_time(self, source):
        r"""
        copyProperty_stop_time(JointMechanicsTool self, JointMechanicsTool source)

        Parameters
        ----------
        source: OpenSim::JointMechanicsTool::Self const &

        """
        return _jam.JointMechanicsTool_copyProperty_stop_time(self, source)

    def append_stop_time(self, value):
        r"""
        append_stop_time(JointMechanicsTool self, double const & value) -> int

        Parameters
        ----------
        value: double const &

        """
        return _jam.JointMechanicsTool_append_stop_time(self, value)

    def constructProperty_stop_time(self, initValue):
        r"""
        constructProperty_stop_time(JointMechanicsTool self, double const & initValue)

        Parameters
        ----------
        initValue: double const &

        """
        return _jam.JointMechanicsTool_constructProperty_stop_time(self, initValue)

    def get_stop_time(self, *args):
        r"""
        get_stop_time(JointMechanicsTool self, int i) -> double const

        Parameters
        ----------
        i: int

        get_stop_time(JointMechanicsTool self) -> double const &
        """
        return _jam.JointMechanicsTool_get_stop_time(self, *args)

    def upd_stop_time(self, *args):
        r"""
        upd_stop_time(JointMechanicsTool self, int i) -> double

        Parameters
        ----------
        i: int

        upd_stop_time(JointMechanicsTool self) -> double &
        """
        return _jam.JointMechanicsTool_upd_stop_time(self, *args)

    def set_stop_time(self, *args):
        r"""
        set_stop_time(JointMechanicsTool self, int i, double const & value)

        Parameters
        ----------
        i: int
        value: double const &

        set_stop_time(JointMechanicsTool self, double const & value)

        Parameters
        ----------
        value: double const &

        """
        return _jam.JointMechanicsTool_set_stop_time(self, *args)

    def copyProperty_resample_step_size(self, source):
        r"""
        copyProperty_resample_step_size(JointMechanicsTool self, JointMechanicsTool source)

        Parameters
        ----------
        source: OpenSim::JointMechanicsTool::Self const &

        """
        return _jam.JointMechanicsTool_copyProperty_resample_step_size(self, source)

    def append_resample_step_size(self, value):
        r"""
        append_resample_step_size(JointMechanicsTool self, double const & value) -> int

        Parameters
        ----------
        value: double const &

        """
        return _jam.JointMechanicsTool_append_resample_step_size(self, value)

    def constructProperty_resample_step_size(self, initValue):
        r"""
        constructProperty_resample_step_size(JointMechanicsTool self, double const & initValue)

        Parameters
        ----------
        initValue: double const &

        """
        return _jam.JointMechanicsTool_constructProperty_resample_step_size(self, initValue)

    def get_resample_step_size(self, *args):
        r"""
        get_resample_step_size(JointMechanicsTool self, int i) -> double const

        Parameters
        ----------
        i: int

        get_resample_step_size(JointMechanicsTool self) -> double const &
        """
        return _jam.JointMechanicsTool_get_resample_step_size(self, *args)

    def upd_resample_step_size(self, *args):
        r"""
        upd_resample_step_size(JointMechanicsTool self, int i) -> double

        Parameters
        ----------
        i: int

        upd_resample_step_size(JointMechanicsTool self) -> double &
        """
        return _jam.JointMechanicsTool_upd_resample_step_size(self, *args)

    def set_resample_step_size(self, *args):
        r"""
        set_resample_step_size(JointMechanicsTool self, int i, double const & value)

        Parameters
        ----------
        i: int
        value: double const &

        set_resample_step_size(JointMechanicsTool self, double const & value)

        Parameters
        ----------
        value: double const &

        """
        return _jam.JointMechanicsTool_set_resample_step_size(self, *args)

    def copyProperty_normalize_to_cycle(self, source):
        r"""
        copyProperty_normalize_to_cycle(JointMechanicsTool self, JointMechanicsTool source)

        Parameters
        ----------
        source: OpenSim::JointMechanicsTool::Self const &

        """
        return _jam.JointMechanicsTool_copyProperty_normalize_to_cycle(self, source)

    def append_normalize_to_cycle(self, value):
        r"""
        append_normalize_to_cycle(JointMechanicsTool self, bool const & value) -> int

        Parameters
        ----------
        value: bool const &

        """
        return _jam.JointMechanicsTool_append_normalize_to_cycle(self, value)

    def constructProperty_normalize_to_cycle(self, initValue):
        r"""
        constructProperty_normalize_to_cycle(JointMechanicsTool self, bool const & initValue)

        Parameters
        ----------
        initValue: bool const &

        """
        return _jam.JointMechanicsTool_constructProperty_normalize_to_cycle(self, initValue)

    def get_normalize_to_cycle(self, *args):
        r"""
        get_normalize_to_cycle(JointMechanicsTool self, int i) -> bool const

        Parameters
        ----------
        i: int

        get_normalize_to_cycle(JointMechanicsTool self) -> bool const &
        """
        return _jam.JointMechanicsTool_get_normalize_to_cycle(self, *args)

    def upd_normalize_to_cycle(self, *args):
        r"""
        upd_normalize_to_cycle(JointMechanicsTool self, int i) -> bool

        Parameters
        ----------
        i: int

        upd_normalize_to_cycle(JointMechanicsTool self) -> bool &
        """
        return _jam.JointMechanicsTool_upd_normalize_to_cycle(self, *args)

    def set_normalize_to_cycle(self, *args):
        r"""
        set_normalize_to_cycle(JointMechanicsTool self, int i, bool const & value)

        Parameters
        ----------
        i: int
        value: bool const &

        set_normalize_to_cycle(JointMechanicsTool self, bool const & value)

        Parameters
        ----------
        value: bool const &

        """
        return _jam.JointMechanicsTool_set_normalize_to_cycle(self, *args)

    def copyProperty_lowpass_filter_frequency(self, source):
        r"""
        copyProperty_lowpass_filter_frequency(JointMechanicsTool self, JointMechanicsTool source)

        Parameters
        ----------
        source: OpenSim::JointMechanicsTool::Self const &

        """
        return _jam.JointMechanicsTool_copyProperty_lowpass_filter_frequency(self, source)

    def append_lowpass_filter_frequency(self, value):
        r"""
        append_lowpass_filter_frequency(JointMechanicsTool self, double const & value) -> int

        Parameters
        ----------
        value: double const &

        """
        return _jam.JointMechanicsTool_append_lowpass_filter_frequency(self, value)

    def constructProperty_lowpass_filter_frequency(self, initValue):
        r"""
        constructProperty_lowpass_filter_frequency(JointMechanicsTool self, double const & initValue)

        Parameters
        ----------
        initValue: double const &

        """
        return _jam.JointMechanicsTool_constructProperty_lowpass_filter_frequency(self, initValue)

    def get_lowpass_filter_frequency(self, *args):
        r"""
        get_lowpass_filter_frequency(JointMechanicsTool self, int i) -> double const

        Parameters
        ----------
        i: int

        get_lowpass_filter_frequency(JointMechanicsTool self) -> double const &
        """
        return _jam.JointMechanicsTool_get_lowpass_filter_frequency(self, *args)

    def upd_lowpass_filter_frequency(self, *args):
        r"""
        upd_lowpass_filter_frequency(JointMechanicsTool self, int i) -> double

        Parameters
        ----------
        i: int

        upd_lowpass_filter_frequency(JointMechanicsTool self) -> double &
        """
        return _jam.JointMechanicsTool_upd_lowpass_filter_frequency(self, *args)

    def set_lowpass_filter_frequency(self, *args):
        r"""
        set_lowpass_filter_frequency(JointMechanicsTool self, int i, double const & value)

        Parameters
        ----------
        i: int
        value: double const &

        set_lowpass_filter_frequency(JointMechanicsTool self, double const & value)

        Parameters
        ----------
        value: double const &

        """
        return _jam.JointMechanicsTool_set_lowpass_filter_frequency(self, *args)

    def copyProperty_print_processed_kinematics(self, source):
        r"""
        copyProperty_print_processed_kinematics(JointMechanicsTool self, JointMechanicsTool source)

        Parameters
        ----------
        source: OpenSim::JointMechanicsTool::Self const &

        """
        return _jam.JointMechanicsTool_copyProperty_print_processed_kinematics(self, source)

    def append_print_processed_kinematics(self, value):
        r"""
        append_print_processed_kinematics(JointMechanicsTool self, bool const & value) -> int

        Parameters
        ----------
        value: bool const &

        """
        return _jam.JointMechanicsTool_append_print_processed_kinematics(self, value)

    def constructProperty_print_processed_kinematics(self, initValue):
        r"""
        constructProperty_print_processed_kinematics(JointMechanicsTool self, bool const & initValue)

        Parameters
        ----------
        initValue: bool const &

        """
        return _jam.JointMechanicsTool_constructProperty_print_processed_kinematics(self, initValue)

    def get_print_processed_kinematics(self, *args):
        r"""
        get_print_processed_kinematics(JointMechanicsTool self, int i) -> bool const

        Parameters
        ----------
        i: int

        get_print_processed_kinematics(JointMechanicsTool self) -> bool const &
        """
        return _jam.JointMechanicsTool_get_print_processed_kinematics(self, *args)

    def upd_print_processed_kinematics(self, *args):
        r"""
        upd_print_processed_kinematics(JointMechanicsTool self, int i) -> bool

        Parameters
        ----------
        i: int

        upd_print_processed_kinematics(JointMechanicsTool self) -> bool &
        """
        return _jam.JointMechanicsTool_upd_print_processed_kinematics(self, *args)

    def set_print_processed_kinematics(self, *args):
        r"""
        set_print_processed_kinematics(JointMechanicsTool self, int i, bool const & value)

        Parameters
        ----------
        i: int
        value: bool const &

        set_print_processed_kinematics(JointMechanicsTool self, bool const & value)

        Parameters
        ----------
        value: bool const &

        """
        return _jam.JointMechanicsTool_set_print_processed_kinematics(self, *args)

    def copyProperty_contacts(self, source):
        r"""
        copyProperty_contacts(JointMechanicsTool self, JointMechanicsTool source)

        Parameters
        ----------
        source: OpenSim::JointMechanicsTool::Self const &

        """
        return _jam.JointMechanicsTool_copyProperty_contacts(self, source)

    def get_contacts(self, i):
        r"""
        get_contacts(JointMechanicsTool self, int i) -> std::string const &

        Parameters
        ----------
        i: int

        """
        return _jam.JointMechanicsTool_get_contacts(self, i)

    def upd_contacts(self, i):
        r"""
        upd_contacts(JointMechanicsTool self, int i) -> std::string &

        Parameters
        ----------
        i: int

        """
        return _jam.JointMechanicsTool_upd_contacts(self, i)

    def set_contacts(self, i, value):
        r"""
        set_contacts(JointMechanicsTool self, int i, std::string const & value)

        Parameters
        ----------
        i: int
        value: std::string const &

        """
        return _jam.JointMechanicsTool_set_contacts(self, i, value)

    def append_contacts(self, value):
        r"""
        append_contacts(JointMechanicsTool self, std::string const & value) -> int

        Parameters
        ----------
        value: std::string const &

        """
        return _jam.JointMechanicsTool_append_contacts(self, value)

    def constructProperty_contacts(self):
        r"""constructProperty_contacts(JointMechanicsTool self)"""
        return _jam.JointMechanicsTool_constructProperty_contacts(self)

    def copyProperty_contact_outputs(self, source):
        r"""
        copyProperty_contact_outputs(JointMechanicsTool self, JointMechanicsTool source)

        Parameters
        ----------
        source: OpenSim::JointMechanicsTool::Self const &

        """
        return _jam.JointMechanicsTool_copyProperty_contact_outputs(self, source)

    def get_contact_outputs(self, i):
        r"""
        get_contact_outputs(JointMechanicsTool self, int i) -> std::string const &

        Parameters
        ----------
        i: int

        """
        return _jam.JointMechanicsTool_get_contact_outputs(self, i)

    def upd_contact_outputs(self, i):
        r"""
        upd_contact_outputs(JointMechanicsTool self, int i) -> std::string &

        Parameters
        ----------
        i: int

        """
        return _jam.JointMechanicsTool_upd_contact_outputs(self, i)

    def set_contact_outputs(self, i, value):
        r"""
        set_contact_outputs(JointMechanicsTool self, int i, std::string const & value)

        Parameters
        ----------
        i: int
        value: std::string const &

        """
        return _jam.JointMechanicsTool_set_contact_outputs(self, i, value)

    def append_contact_outputs(self, value):
        r"""
        append_contact_outputs(JointMechanicsTool self, std::string const & value) -> int

        Parameters
        ----------
        value: std::string const &

        """
        return _jam.JointMechanicsTool_append_contact_outputs(self, value)

    def constructProperty_contact_outputs(self):
        r"""constructProperty_contact_outputs(JointMechanicsTool self)"""
        return _jam.JointMechanicsTool_constructProperty_contact_outputs(self)

    def copyProperty_contact_mesh_properties(self, source):
        r"""
        copyProperty_contact_mesh_properties(JointMechanicsTool self, JointMechanicsTool source)

        Parameters
        ----------
        source: OpenSim::JointMechanicsTool::Self const &

        """
        return _jam.JointMechanicsTool_copyProperty_contact_mesh_properties(self, source)

    def get_contact_mesh_properties(self, i):
        r"""
        get_contact_mesh_properties(JointMechanicsTool self, int i) -> std::string const &

        Parameters
        ----------
        i: int

        """
        return _jam.JointMechanicsTool_get_contact_mesh_properties(self, i)

    def upd_contact_mesh_properties(self, i):
        r"""
        upd_contact_mesh_properties(JointMechanicsTool self, int i) -> std::string &

        Parameters
        ----------
        i: int

        """
        return _jam.JointMechanicsTool_upd_contact_mesh_properties(self, i)

    def set_contact_mesh_properties(self, i, value):
        r"""
        set_contact_mesh_properties(JointMechanicsTool self, int i, std::string const & value)

        Parameters
        ----------
        i: int
        value: std::string const &

        """
        return _jam.JointMechanicsTool_set_contact_mesh_properties(self, i, value)

    def append_contact_mesh_properties(self, value):
        r"""
        append_contact_mesh_properties(JointMechanicsTool self, std::string const & value) -> int

        Parameters
        ----------
        value: std::string const &

        """
        return _jam.JointMechanicsTool_append_contact_mesh_properties(self, value)

    def constructProperty_contact_mesh_properties(self):
        r"""constructProperty_contact_mesh_properties(JointMechanicsTool self)"""
        return _jam.JointMechanicsTool_constructProperty_contact_mesh_properties(self)

    def copyProperty_ligaments(self, source):
        r"""
        copyProperty_ligaments(JointMechanicsTool self, JointMechanicsTool source)

        Parameters
        ----------
        source: OpenSim::JointMechanicsTool::Self const &

        """
        return _jam.JointMechanicsTool_copyProperty_ligaments(self, source)

    def get_ligaments(self, i):
        r"""
        get_ligaments(JointMechanicsTool self, int i) -> std::string const &

        Parameters
        ----------
        i: int

        """
        return _jam.JointMechanicsTool_get_ligaments(self, i)

    def upd_ligaments(self, i):
        r"""
        upd_ligaments(JointMechanicsTool self, int i) -> std::string &

        Parameters
        ----------
        i: int

        """
        return _jam.JointMechanicsTool_upd_ligaments(self, i)

    def set_ligaments(self, i, value):
        r"""
        set_ligaments(JointMechanicsTool self, int i, std::string const & value)

        Parameters
        ----------
        i: int
        value: std::string const &

        """
        return _jam.JointMechanicsTool_set_ligaments(self, i, value)

    def append_ligaments(self, value):
        r"""
        append_ligaments(JointMechanicsTool self, std::string const & value) -> int

        Parameters
        ----------
        value: std::string const &

        """
        return _jam.JointMechanicsTool_append_ligaments(self, value)

    def constructProperty_ligaments(self):
        r"""constructProperty_ligaments(JointMechanicsTool self)"""
        return _jam.JointMechanicsTool_constructProperty_ligaments(self)

    def copyProperty_ligament_outputs(self, source):
        r"""
        copyProperty_ligament_outputs(JointMechanicsTool self, JointMechanicsTool source)

        Parameters
        ----------
        source: OpenSim::JointMechanicsTool::Self const &

        """
        return _jam.JointMechanicsTool_copyProperty_ligament_outputs(self, source)

    def get_ligament_outputs(self, i):
        r"""
        get_ligament_outputs(JointMechanicsTool self, int i) -> std::string const &

        Parameters
        ----------
        i: int

        """
        return _jam.JointMechanicsTool_get_ligament_outputs(self, i)

    def upd_ligament_outputs(self, i):
        r"""
        upd_ligament_outputs(JointMechanicsTool self, int i) -> std::string &

        Parameters
        ----------
        i: int

        """
        return _jam.JointMechanicsTool_upd_ligament_outputs(self, i)

    def set_ligament_outputs(self, i, value):
        r"""
        set_ligament_outputs(JointMechanicsTool self, int i, std::string const & value)

        Parameters
        ----------
        i: int
        value: std::string const &

        """
        return _jam.JointMechanicsTool_set_ligament_outputs(self, i, value)

    def append_ligament_outputs(self, value):
        r"""
        append_ligament_outputs(JointMechanicsTool self, std::string const & value) -> int

        Parameters
        ----------
        value: std::string const &

        """
        return _jam.JointMechanicsTool_append_ligament_outputs(self, value)

    def constructProperty_ligament_outputs(self):
        r"""constructProperty_ligament_outputs(JointMechanicsTool self)"""
        return _jam.JointMechanicsTool_constructProperty_ligament_outputs(self)

    def copyProperty_muscles(self, source):
        r"""
        copyProperty_muscles(JointMechanicsTool self, JointMechanicsTool source)

        Parameters
        ----------
        source: OpenSim::JointMechanicsTool::Self const &

        """
        return _jam.JointMechanicsTool_copyProperty_muscles(self, source)

    def get_muscles(self, i):
        r"""
        get_muscles(JointMechanicsTool self, int i) -> std::string const &

        Parameters
        ----------
        i: int

        """
        return _jam.JointMechanicsTool_get_muscles(self, i)

    def upd_muscles(self, i):
        r"""
        upd_muscles(JointMechanicsTool self, int i) -> std::string &

        Parameters
        ----------
        i: int

        """
        return _jam.JointMechanicsTool_upd_muscles(self, i)

    def set_muscles(self, i, value):
        r"""
        set_muscles(JointMechanicsTool self, int i, std::string const & value)

        Parameters
        ----------
        i: int
        value: std::string const &

        """
        return _jam.JointMechanicsTool_set_muscles(self, i, value)

    def append_muscles(self, value):
        r"""
        append_muscles(JointMechanicsTool self, std::string const & value) -> int

        Parameters
        ----------
        value: std::string const &

        """
        return _jam.JointMechanicsTool_append_muscles(self, value)

    def constructProperty_muscles(self):
        r"""constructProperty_muscles(JointMechanicsTool self)"""
        return _jam.JointMechanicsTool_constructProperty_muscles(self)

    def copyProperty_muscle_outputs(self, source):
        r"""
        copyProperty_muscle_outputs(JointMechanicsTool self, JointMechanicsTool source)

        Parameters
        ----------
        source: OpenSim::JointMechanicsTool::Self const &

        """
        return _jam.JointMechanicsTool_copyProperty_muscle_outputs(self, source)

    def get_muscle_outputs(self, i):
        r"""
        get_muscle_outputs(JointMechanicsTool self, int i) -> std::string const &

        Parameters
        ----------
        i: int

        """
        return _jam.JointMechanicsTool_get_muscle_outputs(self, i)

    def upd_muscle_outputs(self, i):
        r"""
        upd_muscle_outputs(JointMechanicsTool self, int i) -> std::string &

        Parameters
        ----------
        i: int

        """
        return _jam.JointMechanicsTool_upd_muscle_outputs(self, i)

    def set_muscle_outputs(self, i, value):
        r"""
        set_muscle_outputs(JointMechanicsTool self, int i, std::string const & value)

        Parameters
        ----------
        i: int
        value: std::string const &

        """
        return _jam.JointMechanicsTool_set_muscle_outputs(self, i, value)

    def append_muscle_outputs(self, value):
        r"""
        append_muscle_outputs(JointMechanicsTool self, std::string const & value) -> int

        Parameters
        ----------
        value: std::string const &

        """
        return _jam.JointMechanicsTool_append_muscle_outputs(self, value)

    def constructProperty_muscle_outputs(self):
        r"""constructProperty_muscle_outputs(JointMechanicsTool self)"""
        return _jam.JointMechanicsTool_constructProperty_muscle_outputs(self)

    def copyProperty_attached_geometry_bodies(self, source):
        r"""
        copyProperty_attached_geometry_bodies(JointMechanicsTool self, JointMechanicsTool source)

        Parameters
        ----------
        source: OpenSim::JointMechanicsTool::Self const &

        """
        return _jam.JointMechanicsTool_copyProperty_attached_geometry_bodies(self, source)

    def get_attached_geometry_bodies(self, i):
        r"""
        get_attached_geometry_bodies(JointMechanicsTool self, int i) -> std::string const &

        Parameters
        ----------
        i: int

        """
        return _jam.JointMechanicsTool_get_attached_geometry_bodies(self, i)

    def upd_attached_geometry_bodies(self, i):
        r"""
        upd_attached_geometry_bodies(JointMechanicsTool self, int i) -> std::string &

        Parameters
        ----------
        i: int

        """
        return _jam.JointMechanicsTool_upd_attached_geometry_bodies(self, i)

    def set_attached_geometry_bodies(self, i, value):
        r"""
        set_attached_geometry_bodies(JointMechanicsTool self, int i, std::string const & value)

        Parameters
        ----------
        i: int
        value: std::string const &

        """
        return _jam.JointMechanicsTool_set_attached_geometry_bodies(self, i, value)

    def append_attached_geometry_bodies(self, value):
        r"""
        append_attached_geometry_bodies(JointMechanicsTool self, std::string const & value) -> int

        Parameters
        ----------
        value: std::string const &

        """
        return _jam.JointMechanicsTool_append_attached_geometry_bodies(self, value)

    def constructProperty_attached_geometry_bodies(self):
        r"""constructProperty_attached_geometry_bodies(JointMechanicsTool self)"""
        return _jam.JointMechanicsTool_constructProperty_attached_geometry_bodies(self)

    def copyProperty_output_position_frame(self, source):
        r"""
        copyProperty_output_position_frame(JointMechanicsTool self, JointMechanicsTool source)

        Parameters
        ----------
        source: OpenSim::JointMechanicsTool::Self const &

        """
        return _jam.JointMechanicsTool_copyProperty_output_position_frame(self, source)

    def append_output_position_frame(self, value):
        r"""
        append_output_position_frame(JointMechanicsTool self, std::string const & value) -> int

        Parameters
        ----------
        value: std::string const &

        """
        return _jam.JointMechanicsTool_append_output_position_frame(self, value)

    def constructProperty_output_position_frame(self, initValue):
        r"""
        constructProperty_output_position_frame(JointMechanicsTool self, std::string const & initValue)

        Parameters
        ----------
        initValue: std::string const &

        """
        return _jam.JointMechanicsTool_constructProperty_output_position_frame(self, initValue)

    def get_output_position_frame(self, *args):
        r"""
        get_output_position_frame(JointMechanicsTool self, int i) -> std::string const

        Parameters
        ----------
        i: int

        get_output_position_frame(JointMechanicsTool self) -> std::string const &
        """
        return _jam.JointMechanicsTool_get_output_position_frame(self, *args)

    def upd_output_position_frame(self, *args):
        r"""
        upd_output_position_frame(JointMechanicsTool self, int i) -> std::string

        Parameters
        ----------
        i: int

        upd_output_position_frame(JointMechanicsTool self) -> std::string &
        """
        return _jam.JointMechanicsTool_upd_output_position_frame(self, *args)

    def set_output_position_frame(self, *args):
        r"""
        set_output_position_frame(JointMechanicsTool self, int i, std::string const & value)

        Parameters
        ----------
        i: int
        value: std::string const &

        set_output_position_frame(JointMechanicsTool self, std::string const & value)

        Parameters
        ----------
        value: std::string const &

        """
        return _jam.JointMechanicsTool_set_output_position_frame(self, *args)

    def copyProperty_output_orientation_frame(self, source):
        r"""
        copyProperty_output_orientation_frame(JointMechanicsTool self, JointMechanicsTool source)

        Parameters
        ----------
        source: OpenSim::JointMechanicsTool::Self const &

        """
        return _jam.JointMechanicsTool_copyProperty_output_orientation_frame(self, source)

    def append_output_orientation_frame(self, value):
        r"""
        append_output_orientation_frame(JointMechanicsTool self, std::string const & value) -> int

        Parameters
        ----------
        value: std::string const &

        """
        return _jam.JointMechanicsTool_append_output_orientation_frame(self, value)

    def constructProperty_output_orientation_frame(self, initValue):
        r"""
        constructProperty_output_orientation_frame(JointMechanicsTool self, std::string const & initValue)

        Parameters
        ----------
        initValue: std::string const &

        """
        return _jam.JointMechanicsTool_constructProperty_output_orientation_frame(self, initValue)

    def get_output_orientation_frame(self, *args):
        r"""
        get_output_orientation_frame(JointMechanicsTool self, int i) -> std::string const

        Parameters
        ----------
        i: int

        get_output_orientation_frame(JointMechanicsTool self) -> std::string const &
        """
        return _jam.JointMechanicsTool_get_output_orientation_frame(self, *args)

    def upd_output_orientation_frame(self, *args):
        r"""
        upd_output_orientation_frame(JointMechanicsTool self, int i) -> std::string

        Parameters
        ----------
        i: int

        upd_output_orientation_frame(JointMechanicsTool self) -> std::string &
        """
        return _jam.JointMechanicsTool_upd_output_orientation_frame(self, *args)

    def set_output_orientation_frame(self, *args):
        r"""
        set_output_orientation_frame(JointMechanicsTool self, int i, std::string const & value)

        Parameters
        ----------
        i: int
        value: std::string const &

        set_output_orientation_frame(JointMechanicsTool self, std::string const & value)

        Parameters
        ----------
        value: std::string const &

        """
        return _jam.JointMechanicsTool_set_output_orientation_frame(self, *args)

    def copyProperty_write_vtp_files(self, source):
        r"""
        copyProperty_write_vtp_files(JointMechanicsTool self, JointMechanicsTool source)

        Parameters
        ----------
        source: OpenSim::JointMechanicsTool::Self const &

        """
        return _jam.JointMechanicsTool_copyProperty_write_vtp_files(self, source)

    def append_write_vtp_files(self, value):
        r"""
        append_write_vtp_files(JointMechanicsTool self, bool const & value) -> int

        Parameters
        ----------
        value: bool const &

        """
        return _jam.JointMechanicsTool_append_write_vtp_files(self, value)

    def constructProperty_write_vtp_files(self, initValue):
        r"""
        constructProperty_write_vtp_files(JointMechanicsTool self, bool const & initValue)

        Parameters
        ----------
        initValue: bool const &

        """
        return _jam.JointMechanicsTool_constructProperty_write_vtp_files(self, initValue)

    def get_write_vtp_files(self, *args):
        r"""
        get_write_vtp_files(JointMechanicsTool self, int i) -> bool const

        Parameters
        ----------
        i: int

        get_write_vtp_files(JointMechanicsTool self) -> bool const &
        """
        return _jam.JointMechanicsTool_get_write_vtp_files(self, *args)

    def upd_write_vtp_files(self, *args):
        r"""
        upd_write_vtp_files(JointMechanicsTool self, int i) -> bool

        Parameters
        ----------
        i: int

        upd_write_vtp_files(JointMechanicsTool self) -> bool &
        """
        return _jam.JointMechanicsTool_upd_write_vtp_files(self, *args)

    def set_write_vtp_files(self, *args):
        r"""
        set_write_vtp_files(JointMechanicsTool self, int i, bool const & value)

        Parameters
        ----------
        i: int
        value: bool const &

        set_write_vtp_files(JointMechanicsTool self, bool const & value)

        Parameters
        ----------
        value: bool const &

        """
        return _jam.JointMechanicsTool_set_write_vtp_files(self, *args)

    def copyProperty_vtp_file_format(self, source):
        r"""
        copyProperty_vtp_file_format(JointMechanicsTool self, JointMechanicsTool source)

        Parameters
        ----------
        source: OpenSim::JointMechanicsTool::Self const &

        """
        return _jam.JointMechanicsTool_copyProperty_vtp_file_format(self, source)

    def append_vtp_file_format(self, value):
        r"""
        append_vtp_file_format(JointMechanicsTool self, std::string const & value) -> int

        Parameters
        ----------
        value: std::string const &

        """
        return _jam.JointMechanicsTool_append_vtp_file_format(self, value)

    def constructProperty_vtp_file_format(self, initValue):
        r"""
        constructProperty_vtp_file_format(JointMechanicsTool self, std::string const & initValue)

        Parameters
        ----------
        initValue: std::string const &

        """
        return _jam.JointMechanicsTool_constructProperty_vtp_file_format(self, initValue)

    def get_vtp_file_format(self, *args):
        r"""
        get_vtp_file_format(JointMechanicsTool self, int i) -> std::string const

        Parameters
        ----------
        i: int

        get_vtp_file_format(JointMechanicsTool self) -> std::string const &
        """
        return _jam.JointMechanicsTool_get_vtp_file_format(self, *args)

    def upd_vtp_file_format(self, *args):
        r"""
        upd_vtp_file_format(JointMechanicsTool self, int i) -> std::string

        Parameters
        ----------
        i: int

        upd_vtp_file_format(JointMechanicsTool self) -> std::string &
        """
        return _jam.JointMechanicsTool_upd_vtp_file_format(self, *args)

    def set_vtp_file_format(self, *args):
        r"""
        set_vtp_file_format(JointMechanicsTool self, int i, std::string const & value)

        Parameters
        ----------
        i: int
        value: std::string const &

        set_vtp_file_format(JointMechanicsTool self, std::string const & value)

        Parameters
        ----------
        value: std::string const &

        """
        return _jam.JointMechanicsTool_set_vtp_file_format(self, *args)

    def copyProperty_write_h5_file(self, source):
        r"""
        copyProperty_write_h5_file(JointMechanicsTool self, JointMechanicsTool source)

        Parameters
        ----------
        source: OpenSim::JointMechanicsTool::Self const &

        """
        return _jam.JointMechanicsTool_copyProperty_write_h5_file(self, source)

    def append_write_h5_file(self, value):
        r"""
        append_write_h5_file(JointMechanicsTool self, bool const & value) -> int

        Parameters
        ----------
        value: bool const &

        """
        return _jam.JointMechanicsTool_append_write_h5_file(self, value)

    def constructProperty_write_h5_file(self, initValue):
        r"""
        constructProperty_write_h5_file(JointMechanicsTool self, bool const & initValue)

        Parameters
        ----------
        initValue: bool const &

        """
        return _jam.JointMechanicsTool_constructProperty_write_h5_file(self, initValue)

    def get_write_h5_file(self, *args):
        r"""
        get_write_h5_file(JointMechanicsTool self, int i) -> bool const

        Parameters
        ----------
        i: int

        get_write_h5_file(JointMechanicsTool self) -> bool const &
        """
        return _jam.JointMechanicsTool_get_write_h5_file(self, *args)

    def upd_write_h5_file(self, *args):
        r"""
        upd_write_h5_file(JointMechanicsTool self, int i) -> bool

        Parameters
        ----------
        i: int

        upd_write_h5_file(JointMechanicsTool self) -> bool &
        """
        return _jam.JointMechanicsTool_upd_write_h5_file(self, *args)

    def set_write_h5_file(self, *args):
        r"""
        set_write_h5_file(JointMechanicsTool self, int i, bool const & value)

        Parameters
        ----------
        i: int
        value: bool const &

        set_write_h5_file(JointMechanicsTool self, bool const & value)

        Parameters
        ----------
        value: bool const &

        """
        return _jam.JointMechanicsTool_set_write_h5_file(self, *args)

    def copyProperty_h5_states_data(self, source):
        r"""
        copyProperty_h5_states_data(JointMechanicsTool self, JointMechanicsTool source)

        Parameters
        ----------
        source: OpenSim::JointMechanicsTool::Self const &

        """
        return _jam.JointMechanicsTool_copyProperty_h5_states_data(self, source)

    def append_h5_states_data(self, value):
        r"""
        append_h5_states_data(JointMechanicsTool self, bool const & value) -> int

        Parameters
        ----------
        value: bool const &

        """
        return _jam.JointMechanicsTool_append_h5_states_data(self, value)

    def constructProperty_h5_states_data(self, initValue):
        r"""
        constructProperty_h5_states_data(JointMechanicsTool self, bool const & initValue)

        Parameters
        ----------
        initValue: bool const &

        """
        return _jam.JointMechanicsTool_constructProperty_h5_states_data(self, initValue)

    def get_h5_states_data(self, *args):
        r"""
        get_h5_states_data(JointMechanicsTool self, int i) -> bool const

        Parameters
        ----------
        i: int

        get_h5_states_data(JointMechanicsTool self) -> bool const &
        """
        return _jam.JointMechanicsTool_get_h5_states_data(self, *args)

    def upd_h5_states_data(self, *args):
        r"""
        upd_h5_states_data(JointMechanicsTool self, int i) -> bool

        Parameters
        ----------
        i: int

        upd_h5_states_data(JointMechanicsTool self) -> bool &
        """
        return _jam.JointMechanicsTool_upd_h5_states_data(self, *args)

    def set_h5_states_data(self, *args):
        r"""
        set_h5_states_data(JointMechanicsTool self, int i, bool const & value)

        Parameters
        ----------
        i: int
        value: bool const &

        set_h5_states_data(JointMechanicsTool self, bool const & value)

        Parameters
        ----------
        value: bool const &

        """
        return _jam.JointMechanicsTool_set_h5_states_data(self, *args)

    def copyProperty_h5_kinematics_data(self, source):
        r"""
        copyProperty_h5_kinematics_data(JointMechanicsTool self, JointMechanicsTool source)

        Parameters
        ----------
        source: OpenSim::JointMechanicsTool::Self const &

        """
        return _jam.JointMechanicsTool_copyProperty_h5_kinematics_data(self, source)

    def append_h5_kinematics_data(self, value):
        r"""
        append_h5_kinematics_data(JointMechanicsTool self, bool const & value) -> int

        Parameters
        ----------
        value: bool const &

        """
        return _jam.JointMechanicsTool_append_h5_kinematics_data(self, value)

    def constructProperty_h5_kinematics_data(self, initValue):
        r"""
        constructProperty_h5_kinematics_data(JointMechanicsTool self, bool const & initValue)

        Parameters
        ----------
        initValue: bool const &

        """
        return _jam.JointMechanicsTool_constructProperty_h5_kinematics_data(self, initValue)

    def get_h5_kinematics_data(self, *args):
        r"""
        get_h5_kinematics_data(JointMechanicsTool self, int i) -> bool const

        Parameters
        ----------
        i: int

        get_h5_kinematics_data(JointMechanicsTool self) -> bool const &
        """
        return _jam.JointMechanicsTool_get_h5_kinematics_data(self, *args)

    def upd_h5_kinematics_data(self, *args):
        r"""
        upd_h5_kinematics_data(JointMechanicsTool self, int i) -> bool

        Parameters
        ----------
        i: int

        upd_h5_kinematics_data(JointMechanicsTool self) -> bool &
        """
        return _jam.JointMechanicsTool_upd_h5_kinematics_data(self, *args)

    def set_h5_kinematics_data(self, *args):
        r"""
        set_h5_kinematics_data(JointMechanicsTool self, int i, bool const & value)

        Parameters
        ----------
        i: int
        value: bool const &

        set_h5_kinematics_data(JointMechanicsTool self, bool const & value)

        Parameters
        ----------
        value: bool const &

        """
        return _jam.JointMechanicsTool_set_h5_kinematics_data(self, *args)

    def copyProperty_AnalysisSet(self, source):
        r"""
        copyProperty_AnalysisSet(JointMechanicsTool self, JointMechanicsTool source)

        Parameters
        ----------
        source: OpenSim::JointMechanicsTool::Self const &

        """
        return _jam.JointMechanicsTool_copyProperty_AnalysisSet(self, source)

    def append_AnalysisSet(self, value):
        r"""
        append_AnalysisSet(JointMechanicsTool self, AnalysisSet value) -> int

        Parameters
        ----------
        value: OpenSim::AnalysisSet const &

        """
        return _jam.JointMechanicsTool_append_AnalysisSet(self, value)

    def constructProperty_AnalysisSet(self, initValue):
        r"""
        constructProperty_AnalysisSet(JointMechanicsTool self, AnalysisSet initValue)

        Parameters
        ----------
        initValue: OpenSim::AnalysisSet const &

        """
        return _jam.JointMechanicsTool_constructProperty_AnalysisSet(self, initValue)

    def get_AnalysisSet(self, *args):
        r"""
        get_AnalysisSet(JointMechanicsTool self, int i) -> AnalysisSet

        Parameters
        ----------
        i: int

        get_AnalysisSet(JointMechanicsTool self) -> AnalysisSet
        """
        return _jam.JointMechanicsTool_get_AnalysisSet(self, *args)

    def upd_AnalysisSet(self, *args):
        r"""
        upd_AnalysisSet(JointMechanicsTool self, int i) -> AnalysisSet

        Parameters
        ----------
        i: int

        upd_AnalysisSet(JointMechanicsTool self) -> AnalysisSet
        """
        return _jam.JointMechanicsTool_upd_AnalysisSet(self, *args)

    def set_AnalysisSet(self, *args):
        r"""
        set_AnalysisSet(JointMechanicsTool self, int i, AnalysisSet value)

        Parameters
        ----------
        i: int
        value: OpenSim::AnalysisSet const &

        set_AnalysisSet(JointMechanicsTool self, AnalysisSet value)

        Parameters
        ----------
        value: OpenSim::AnalysisSet const &

        """
        return _jam.JointMechanicsTool_set_AnalysisSet(self, *args)

    def copyProperty_write_transforms_file(self, source):
        r"""
        copyProperty_write_transforms_file(JointMechanicsTool self, JointMechanicsTool source)

        Parameters
        ----------
        source: OpenSim::JointMechanicsTool::Self const &

        """
        return _jam.JointMechanicsTool_copyProperty_write_transforms_file(self, source)

    def append_write_transforms_file(self, value):
        r"""
        append_write_transforms_file(JointMechanicsTool self, bool const & value) -> int

        Parameters
        ----------
        value: bool const &

        """
        return _jam.JointMechanicsTool_append_write_transforms_file(self, value)

    def constructProperty_write_transforms_file(self, initValue):
        r"""
        constructProperty_write_transforms_file(JointMechanicsTool self, bool const & initValue)

        Parameters
        ----------
        initValue: bool const &

        """
        return _jam.JointMechanicsTool_constructProperty_write_transforms_file(self, initValue)

    def get_write_transforms_file(self, *args):
        r"""
        get_write_transforms_file(JointMechanicsTool self, int i) -> bool const

        Parameters
        ----------
        i: int

        get_write_transforms_file(JointMechanicsTool self) -> bool const &
        """
        return _jam.JointMechanicsTool_get_write_transforms_file(self, *args)

    def upd_write_transforms_file(self, *args):
        r"""
        upd_write_transforms_file(JointMechanicsTool self, int i) -> bool

        Parameters
        ----------
        i: int

        upd_write_transforms_file(JointMechanicsTool self) -> bool &
        """
        return _jam.JointMechanicsTool_upd_write_transforms_file(self, *args)

    def set_write_transforms_file(self, *args):
        r"""
        set_write_transforms_file(JointMechanicsTool self, int i, bool const & value)

        Parameters
        ----------
        i: int
        value: bool const &

        set_write_transforms_file(JointMechanicsTool self, bool const & value)

        Parameters
        ----------
        value: bool const &

        """
        return _jam.JointMechanicsTool_set_write_transforms_file(self, *args)

    def copyProperty_output_transforms_file_type(self, source):
        r"""
        copyProperty_output_transforms_file_type(JointMechanicsTool self, JointMechanicsTool source)

        Parameters
        ----------
        source: OpenSim::JointMechanicsTool::Self const &

        """
        return _jam.JointMechanicsTool_copyProperty_output_transforms_file_type(self, source)

    def append_output_transforms_file_type(self, value):
        r"""
        append_output_transforms_file_type(JointMechanicsTool self, std::string const & value) -> int

        Parameters
        ----------
        value: std::string const &

        """
        return _jam.JointMechanicsTool_append_output_transforms_file_type(self, value)

    def constructProperty_output_transforms_file_type(self, initValue):
        r"""
        constructProperty_output_transforms_file_type(JointMechanicsTool self, std::string const & initValue)

        Parameters
        ----------
        initValue: std::string const &

        """
        return _jam.JointMechanicsTool_constructProperty_output_transforms_file_type(self, initValue)

    def get_output_transforms_file_type(self, *args):
        r"""
        get_output_transforms_file_type(JointMechanicsTool self, int i) -> std::string const

        Parameters
        ----------
        i: int

        get_output_transforms_file_type(JointMechanicsTool self) -> std::string const &
        """
        return _jam.JointMechanicsTool_get_output_transforms_file_type(self, *args)

    def upd_output_transforms_file_type(self, *args):
        r"""
        upd_output_transforms_file_type(JointMechanicsTool self, int i) -> std::string

        Parameters
        ----------
        i: int

        upd_output_transforms_file_type(JointMechanicsTool self) -> std::string &
        """
        return _jam.JointMechanicsTool_upd_output_transforms_file_type(self, *args)

    def set_output_transforms_file_type(self, *args):
        r"""
        set_output_transforms_file_type(JointMechanicsTool self, int i, std::string const & value)

        Parameters
        ----------
        i: int
        value: std::string const &

        set_output_transforms_file_type(JointMechanicsTool self, std::string const & value)

        Parameters
        ----------
        value: std::string const &

        """
        return _jam.JointMechanicsTool_set_output_transforms_file_type(self, *args)

    def copyProperty_use_visualizer(self, source):
        r"""
        copyProperty_use_visualizer(JointMechanicsTool self, JointMechanicsTool source)

        Parameters
        ----------
        source: OpenSim::JointMechanicsTool::Self const &

        """
        return _jam.JointMechanicsTool_copyProperty_use_visualizer(self, source)

    def append_use_visualizer(self, value):
        r"""
        append_use_visualizer(JointMechanicsTool self, bool const & value) -> int

        Parameters
        ----------
        value: bool const &

        """
        return _jam.JointMechanicsTool_append_use_visualizer(self, value)

    def constructProperty_use_visualizer(self, initValue):
        r"""
        constructProperty_use_visualizer(JointMechanicsTool self, bool const & initValue)

        Parameters
        ----------
        initValue: bool const &

        """
        return _jam.JointMechanicsTool_constructProperty_use_visualizer(self, initValue)

    def get_use_visualizer(self, *args):
        r"""
        get_use_visualizer(JointMechanicsTool self, int i) -> bool const

        Parameters
        ----------
        i: int

        get_use_visualizer(JointMechanicsTool self) -> bool const &
        """
        return _jam.JointMechanicsTool_get_use_visualizer(self, *args)

    def upd_use_visualizer(self, *args):
        r"""
        upd_use_visualizer(JointMechanicsTool self, int i) -> bool

        Parameters
        ----------
        i: int

        upd_use_visualizer(JointMechanicsTool self) -> bool &
        """
        return _jam.JointMechanicsTool_upd_use_visualizer(self, *args)

    def set_use_visualizer(self, *args):
        r"""
        set_use_visualizer(JointMechanicsTool self, int i, bool const & value)

        Parameters
        ----------
        i: int
        value: bool const &

        set_use_visualizer(JointMechanicsTool self, bool const & value)

        Parameters
        ----------
        value: bool const &

        """
        return _jam.JointMechanicsTool_set_use_visualizer(self, *args)

    def copyProperty_verbose(self, source):
        r"""
        copyProperty_verbose(JointMechanicsTool self, JointMechanicsTool source)

        Parameters
        ----------
        source: OpenSim::JointMechanicsTool::Self const &

        """
        return _jam.JointMechanicsTool_copyProperty_verbose(self, source)

    def append_verbose(self, value):
        r"""
        append_verbose(JointMechanicsTool self, int const & value) -> int

        Parameters
        ----------
        value: int const &

        """
        return _jam.JointMechanicsTool_append_verbose(self, value)

    def constructProperty_verbose(self, initValue):
        r"""
        constructProperty_verbose(JointMechanicsTool self, int const & initValue)

        Parameters
        ----------
        initValue: int const &

        """
        return _jam.JointMechanicsTool_constructProperty_verbose(self, initValue)

    def get_verbose(self, *args):
        r"""
        get_verbose(JointMechanicsTool self, int i) -> int const

        Parameters
        ----------
        i: int

        get_verbose(JointMechanicsTool self) -> int const &
        """
        return _jam.JointMechanicsTool_get_verbose(self, *args)

    def upd_verbose(self, *args):
        r"""
        upd_verbose(JointMechanicsTool self, int i) -> int

        Parameters
        ----------
        i: int

        upd_verbose(JointMechanicsTool self) -> int &
        """
        return _jam.JointMechanicsTool_upd_verbose(self, *args)

    def set_verbose(self, *args):
        r"""
        set_verbose(JointMechanicsTool self, int i, int const & value)

        Parameters
        ----------
        i: int
        value: int const &

        set_verbose(JointMechanicsTool self, int const & value)

        Parameters
        ----------
        value: int const &

        """
        return _jam.JointMechanicsTool_set_verbose(self, *args)

    def __init__(self, *args):
        r"""
        __init__(JointMechanicsTool self) -> JointMechanicsTool
        __init__(JointMechanicsTool self, std::string settings_file) -> JointMechanicsTool

        Parameters
        ----------
        settings_file: std::string

        """
        _jam.JointMechanicsTool_swiginit(self, _jam.new_JointMechanicsTool(*args))

    def setModel(self, aModel):
        r"""
        setModel(JointMechanicsTool self, Model aModel)

        Parameters
        ----------
        aModel: OpenSim::Model &

        """
        return _jam.JointMechanicsTool_setModel(self, aModel)

    def run(self):
        r"""run(JointMechanicsTool self) -> bool"""
        return _jam.JointMechanicsTool_run(self)

    def printResults(self, aBaseName, aDir):
        r"""
        printResults(JointMechanicsTool self, std::string const & aBaseName, std::string const & aDir) -> int

        Parameters
        ----------
        aBaseName: std::string const &
        aDir: std::string const &

        """
        return _jam.JointMechanicsTool_printResults(self, aBaseName, aDir)
    __swig_destroy__ = _jam.delete_JointMechanicsTool

# Register JointMechanicsTool in _jam:
_jam.JointMechanicsTool_swigregister(JointMechanicsTool)

def JointMechanicsTool_safeDownCast(obj):
    r"""
    JointMechanicsTool_safeDownCast(OpenSimObject obj) -> JointMechanicsTool

    Parameters
    ----------
    obj: OpenSim::Object *

    """
    return _jam.JointMechanicsTool_safeDownCast(obj)

def JointMechanicsTool_getClassName():
    r"""JointMechanicsTool_getClassName() -> std::string const &"""
    return _jam.JointMechanicsTool_getClassName()



