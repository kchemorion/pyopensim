# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.2
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _moco
else:
    import _moco

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


import weakref

class SwigPyIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _moco.delete_SwigPyIterator

    def value(self):
        return _moco.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _moco.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _moco.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _moco.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _moco.SwigPyIterator_equal(self, x)

    def copy(self):
        return _moco.SwigPyIterator_copy(self)

    def next(self):
        return _moco.SwigPyIterator_next(self)

    def __next__(self):
        return _moco.SwigPyIterator___next__(self)

    def previous(self):
        return _moco.SwigPyIterator_previous(self)

    def advance(self, n):
        return _moco.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _moco.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _moco.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _moco.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _moco.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _moco.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _moco.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self

# Register SwigPyIterator in _moco:
_moco.SwigPyIterator_swigregister(SwigPyIterator)

class StdVectorUnsigned(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _moco.StdVectorUnsigned_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _moco.StdVectorUnsigned___nonzero__(self)

    def __bool__(self):
        return _moco.StdVectorUnsigned___bool__(self)

    def __len__(self):
        return _moco.StdVectorUnsigned___len__(self)

    def __getslice__(self, i, j):
        return _moco.StdVectorUnsigned___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _moco.StdVectorUnsigned___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _moco.StdVectorUnsigned___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _moco.StdVectorUnsigned___delitem__(self, *args)

    def __getitem__(self, *args):
        return _moco.StdVectorUnsigned___getitem__(self, *args)

    def __setitem__(self, *args):
        return _moco.StdVectorUnsigned___setitem__(self, *args)

    def pop(self):
        return _moco.StdVectorUnsigned_pop(self)

    def append(self, x):
        return _moco.StdVectorUnsigned_append(self, x)

    def empty(self):
        return _moco.StdVectorUnsigned_empty(self)

    def size(self):
        return _moco.StdVectorUnsigned_size(self)

    def swap(self, v):
        return _moco.StdVectorUnsigned_swap(self, v)

    def begin(self):
        return _moco.StdVectorUnsigned_begin(self)

    def end(self):
        return _moco.StdVectorUnsigned_end(self)

    def rbegin(self):
        return _moco.StdVectorUnsigned_rbegin(self)

    def rend(self):
        return _moco.StdVectorUnsigned_rend(self)

    def clear(self):
        return _moco.StdVectorUnsigned_clear(self)

    def get_allocator(self):
        return _moco.StdVectorUnsigned_get_allocator(self)

    def pop_back(self):
        return _moco.StdVectorUnsigned_pop_back(self)

    def erase(self, *args):
        return _moco.StdVectorUnsigned_erase(self, *args)

    def __init__(self, *args):
        _moco.StdVectorUnsigned_swiginit(self, _moco.new_StdVectorUnsigned(*args))

    def push_back(self, x):
        return _moco.StdVectorUnsigned_push_back(self, x)

    def front(self):
        return _moco.StdVectorUnsigned_front(self)

    def back(self):
        return _moco.StdVectorUnsigned_back(self)

    def assign(self, n, x):
        return _moco.StdVectorUnsigned_assign(self, n, x)

    def resize(self, *args):
        return _moco.StdVectorUnsigned_resize(self, *args)

    def insert(self, *args):
        return _moco.StdVectorUnsigned_insert(self, *args)

    def reserve(self, n):
        return _moco.StdVectorUnsigned_reserve(self, n)

    def capacity(self):
        return _moco.StdVectorUnsigned_capacity(self)
    __swig_destroy__ = _moco.delete_StdVectorUnsigned

# Register StdVectorUnsigned in _moco:
_moco.StdVectorUnsigned_swigregister(StdVectorUnsigned)

class StdVectorInt(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _moco.StdVectorInt_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _moco.StdVectorInt___nonzero__(self)

    def __bool__(self):
        return _moco.StdVectorInt___bool__(self)

    def __len__(self):
        return _moco.StdVectorInt___len__(self)

    def __getslice__(self, i, j):
        return _moco.StdVectorInt___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _moco.StdVectorInt___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _moco.StdVectorInt___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _moco.StdVectorInt___delitem__(self, *args)

    def __getitem__(self, *args):
        return _moco.StdVectorInt___getitem__(self, *args)

    def __setitem__(self, *args):
        return _moco.StdVectorInt___setitem__(self, *args)

    def pop(self):
        return _moco.StdVectorInt_pop(self)

    def append(self, x):
        return _moco.StdVectorInt_append(self, x)

    def empty(self):
        return _moco.StdVectorInt_empty(self)

    def size(self):
        return _moco.StdVectorInt_size(self)

    def swap(self, v):
        return _moco.StdVectorInt_swap(self, v)

    def begin(self):
        return _moco.StdVectorInt_begin(self)

    def end(self):
        return _moco.StdVectorInt_end(self)

    def rbegin(self):
        return _moco.StdVectorInt_rbegin(self)

    def rend(self):
        return _moco.StdVectorInt_rend(self)

    def clear(self):
        return _moco.StdVectorInt_clear(self)

    def get_allocator(self):
        return _moco.StdVectorInt_get_allocator(self)

    def pop_back(self):
        return _moco.StdVectorInt_pop_back(self)

    def erase(self, *args):
        return _moco.StdVectorInt_erase(self, *args)

    def __init__(self, *args):
        _moco.StdVectorInt_swiginit(self, _moco.new_StdVectorInt(*args))

    def push_back(self, x):
        return _moco.StdVectorInt_push_back(self, x)

    def front(self):
        return _moco.StdVectorInt_front(self)

    def back(self):
        return _moco.StdVectorInt_back(self)

    def assign(self, n, x):
        return _moco.StdVectorInt_assign(self, n, x)

    def resize(self, *args):
        return _moco.StdVectorInt_resize(self, *args)

    def insert(self, *args):
        return _moco.StdVectorInt_insert(self, *args)

    def reserve(self, n):
        return _moco.StdVectorInt_reserve(self, n)

    def capacity(self):
        return _moco.StdVectorInt_capacity(self)
    __swig_destroy__ = _moco.delete_StdVectorInt

# Register StdVectorInt in _moco:
_moco.StdVectorInt_swigregister(StdVectorInt)

class StdVectorDouble(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _moco.StdVectorDouble_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _moco.StdVectorDouble___nonzero__(self)

    def __bool__(self):
        return _moco.StdVectorDouble___bool__(self)

    def __len__(self):
        return _moco.StdVectorDouble___len__(self)

    def __getslice__(self, i, j):
        return _moco.StdVectorDouble___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _moco.StdVectorDouble___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _moco.StdVectorDouble___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _moco.StdVectorDouble___delitem__(self, *args)

    def __getitem__(self, *args):
        return _moco.StdVectorDouble___getitem__(self, *args)

    def __setitem__(self, *args):
        return _moco.StdVectorDouble___setitem__(self, *args)

    def pop(self):
        return _moco.StdVectorDouble_pop(self)

    def append(self, x):
        return _moco.StdVectorDouble_append(self, x)

    def empty(self):
        return _moco.StdVectorDouble_empty(self)

    def size(self):
        return _moco.StdVectorDouble_size(self)

    def swap(self, v):
        return _moco.StdVectorDouble_swap(self, v)

    def begin(self):
        return _moco.StdVectorDouble_begin(self)

    def end(self):
        return _moco.StdVectorDouble_end(self)

    def rbegin(self):
        return _moco.StdVectorDouble_rbegin(self)

    def rend(self):
        return _moco.StdVectorDouble_rend(self)

    def clear(self):
        return _moco.StdVectorDouble_clear(self)

    def get_allocator(self):
        return _moco.StdVectorDouble_get_allocator(self)

    def pop_back(self):
        return _moco.StdVectorDouble_pop_back(self)

    def erase(self, *args):
        return _moco.StdVectorDouble_erase(self, *args)

    def __init__(self, *args):
        _moco.StdVectorDouble_swiginit(self, _moco.new_StdVectorDouble(*args))

    def push_back(self, x):
        return _moco.StdVectorDouble_push_back(self, x)

    def front(self):
        return _moco.StdVectorDouble_front(self)

    def back(self):
        return _moco.StdVectorDouble_back(self)

    def assign(self, n, x):
        return _moco.StdVectorDouble_assign(self, n, x)

    def resize(self, *args):
        return _moco.StdVectorDouble_resize(self, *args)

    def insert(self, *args):
        return _moco.StdVectorDouble_insert(self, *args)

    def reserve(self, n):
        return _moco.StdVectorDouble_reserve(self, n)

    def capacity(self):
        return _moco.StdVectorDouble_capacity(self)
    __swig_destroy__ = _moco.delete_StdVectorDouble

# Register StdVectorDouble in _moco:
_moco.StdVectorDouble_swigregister(StdVectorDouble)

class StdVectorString(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _moco.StdVectorString_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _moco.StdVectorString___nonzero__(self)

    def __bool__(self):
        return _moco.StdVectorString___bool__(self)

    def __len__(self):
        return _moco.StdVectorString___len__(self)

    def __getslice__(self, i, j):
        return _moco.StdVectorString___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _moco.StdVectorString___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _moco.StdVectorString___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _moco.StdVectorString___delitem__(self, *args)

    def __getitem__(self, *args):
        return _moco.StdVectorString___getitem__(self, *args)

    def __setitem__(self, *args):
        return _moco.StdVectorString___setitem__(self, *args)

    def pop(self):
        return _moco.StdVectorString_pop(self)

    def append(self, x):
        return _moco.StdVectorString_append(self, x)

    def empty(self):
        return _moco.StdVectorString_empty(self)

    def size(self):
        return _moco.StdVectorString_size(self)

    def swap(self, v):
        return _moco.StdVectorString_swap(self, v)

    def begin(self):
        return _moco.StdVectorString_begin(self)

    def end(self):
        return _moco.StdVectorString_end(self)

    def rbegin(self):
        return _moco.StdVectorString_rbegin(self)

    def rend(self):
        return _moco.StdVectorString_rend(self)

    def clear(self):
        return _moco.StdVectorString_clear(self)

    def get_allocator(self):
        return _moco.StdVectorString_get_allocator(self)

    def pop_back(self):
        return _moco.StdVectorString_pop_back(self)

    def erase(self, *args):
        return _moco.StdVectorString_erase(self, *args)

    def __init__(self, *args):
        _moco.StdVectorString_swiginit(self, _moco.new_StdVectorString(*args))

    def push_back(self, x):
        return _moco.StdVectorString_push_back(self, x)

    def front(self):
        return _moco.StdVectorString_front(self)

    def back(self):
        return _moco.StdVectorString_back(self)

    def assign(self, n, x):
        return _moco.StdVectorString_assign(self, n, x)

    def resize(self, *args):
        return _moco.StdVectorString_resize(self, *args)

    def insert(self, *args):
        return _moco.StdVectorString_insert(self, *args)

    def reserve(self, n):
        return _moco.StdVectorString_reserve(self, n)

    def capacity(self):
        return _moco.StdVectorString_capacity(self)
    __swig_destroy__ = _moco.delete_StdVectorString

# Register StdVectorString in _moco:
_moco.StdVectorString_swigregister(StdVectorString)

SHARED_PTR_DISOWN = _moco.SHARED_PTR_DISOWN
import opensim.tools
import opensim.analyses
import opensim.actuators
import opensim.simulation
import opensim.common
import opensim.simbody

def GetMocoVersionAndDate():
    r"""GetMocoVersionAndDate() -> std::string"""
    return _moco.GetMocoVersionAndDate()

def GetMocoVersion():
    r"""GetMocoVersion() -> std::string"""
    return _moco.GetMocoVersion()
class MocoGoal(opensim.common.OpenSimObject):
    r"""Proxy of C++ OpenSim::MocoGoal class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    @staticmethod
    def safeDownCast(obj):
        r"""
        safeDownCast(OpenSimObject obj) -> MocoGoal

        Parameters
        ----------
        obj: OpenSim::Object *

        """
        return _moco.MocoGoal_safeDownCast(obj)

    def assign(self, aObject):
        r"""
        assign(MocoGoal self, OpenSimObject aObject)

        Parameters
        ----------
        aObject: OpenSim::Object &

        """
        return _moco.MocoGoal_assign(self, aObject)

    @staticmethod
    def getClassName():
        r"""getClassName() -> std::string const &"""
        return _moco.MocoGoal_getClassName()

    def clone(self):
        r"""clone(MocoGoal self) -> MocoGoal"""
        return _moco.MocoGoal_clone(self)

    def getConcreteClassName(self):
        r"""getConcreteClassName(MocoGoal self) -> std::string const &"""
        return _moco.MocoGoal_getConcreteClassName(self)

    def setEnabled(self, enabled):
        r"""
        setEnabled(MocoGoal self, bool enabled)

        Parameters
        ----------
        enabled: bool

        """
        return _moco.MocoGoal_setEnabled(self, enabled)

    def getEnabled(self):
        r"""getEnabled(MocoGoal self) -> bool"""
        return _moco.MocoGoal_getEnabled(self)

    def setWeight(self, weight):
        r"""
        setWeight(MocoGoal self, double weight)

        Parameters
        ----------
        weight: double

        """
        return _moco.MocoGoal_setWeight(self, weight)

    def getWeight(self):
        r"""getWeight(MocoGoal self) -> double"""
        return _moco.MocoGoal_getWeight(self)
    Mode_Cost = _moco.MocoGoal_Mode_Cost
    
    Mode_EndpointConstraint = _moco.MocoGoal_Mode_EndpointConstraint
    

    def setMode(self, mode):
        r"""
        setMode(MocoGoal self, std::string mode)

        Parameters
        ----------
        mode: std::string

        """
        return _moco.MocoGoal_setMode(self, mode)

    def getModeAsString(self):
        r"""getModeAsString(MocoGoal self) -> std::string"""
        return _moco.MocoGoal_getModeAsString(self)

    def getMode(self):
        r"""getMode(MocoGoal self) -> OpenSim::MocoGoal::Mode"""
        return _moco.MocoGoal_getMode(self)

    def getModeIsCost(self):
        r"""getModeIsCost(MocoGoal self) -> bool"""
        return _moco.MocoGoal_getModeIsCost(self)

    def getModeIsEndpointConstraint(self):
        r"""getModeIsEndpointConstraint(MocoGoal self) -> bool"""
        return _moco.MocoGoal_getModeIsEndpointConstraint(self)

    def getDefaultMode(self):
        r"""getDefaultMode(MocoGoal self) -> OpenSim::MocoGoal::Mode"""
        return _moco.MocoGoal_getDefaultMode(self)

    def getSupportsEndpointConstraint(self):
        r"""getSupportsEndpointConstraint(MocoGoal self) -> bool"""
        return _moco.MocoGoal_getSupportsEndpointConstraint(self)

    def getConstraintInfo(self):
        r"""getConstraintInfo(MocoGoal self) -> MocoConstraintInfo const &"""
        return _moco.MocoGoal_getConstraintInfo(self)

    def updConstraintInfo(self):
        r"""updConstraintInfo(MocoGoal self) -> MocoConstraintInfo &"""
        return _moco.MocoGoal_updConstraintInfo(self)

    def getNumOutputs(self):
        r"""getNumOutputs(MocoGoal self) -> int"""
        return _moco.MocoGoal_getNumOutputs(self)

    def getNumIntegrals(self):
        r"""getNumIntegrals(MocoGoal self) -> int"""
        return _moco.MocoGoal_getNumIntegrals(self)

    def getStageDependency(self):
        r"""getStageDependency(MocoGoal self) -> Stage"""
        return _moco.MocoGoal_getStageDependency(self)

    def initializeOnModel(self, model):
        r"""
        initializeOnModel(MocoGoal self, Model model)

        Parameters
        ----------
        model: OpenSim::Model const &

        """
        return _moco.MocoGoal_initializeOnModel(self, model)

    def printDescription(self):
        r"""printDescription(MocoGoal self)"""
        return _moco.MocoGoal_printDescription(self)
    __swig_destroy__ = _moco.delete_MocoGoal

# Register MocoGoal in _moco:
_moco.MocoGoal_swigregister(MocoGoal)

def MocoGoal_safeDownCast(obj):
    r"""
    MocoGoal_safeDownCast(OpenSimObject obj) -> MocoGoal

    Parameters
    ----------
    obj: OpenSim::Object *

    """
    return _moco.MocoGoal_safeDownCast(obj)

def MocoGoal_getClassName():
    r"""MocoGoal_getClassName() -> std::string const &"""
    return _moco.MocoGoal_getClassName()

class MocoFinalTimeGoal(MocoGoal):
    r"""Proxy of C++ OpenSim::MocoFinalTimeGoal class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def safeDownCast(obj):
        r"""
        safeDownCast(OpenSimObject obj) -> MocoFinalTimeGoal

        Parameters
        ----------
        obj: OpenSim::Object *

        """
        return _moco.MocoFinalTimeGoal_safeDownCast(obj)

    def assign(self, aObject):
        r"""
        assign(MocoFinalTimeGoal self, OpenSimObject aObject)

        Parameters
        ----------
        aObject: OpenSim::Object &

        """
        return _moco.MocoFinalTimeGoal_assign(self, aObject)

    @staticmethod
    def getClassName():
        r"""getClassName() -> std::string const &"""
        return _moco.MocoFinalTimeGoal_getClassName()

    def clone(self):
        r"""clone(MocoFinalTimeGoal self) -> MocoFinalTimeGoal"""
        return _moco.MocoFinalTimeGoal_clone(self)

    def getConcreteClassName(self):
        r"""getConcreteClassName(MocoFinalTimeGoal self) -> std::string const &"""
        return _moco.MocoFinalTimeGoal_getConcreteClassName(self)

    def __init__(self, *args):
        r"""
        __init__(MocoFinalTimeGoal self) -> MocoFinalTimeGoal
        __init__(MocoFinalTimeGoal self, std::string name) -> MocoFinalTimeGoal

        Parameters
        ----------
        name: std::string

        __init__(MocoFinalTimeGoal self, std::string name, double weight) -> MocoFinalTimeGoal

        Parameters
        ----------
        name: std::string
        weight: double

        """
        _moco.MocoFinalTimeGoal_swiginit(self, _moco.new_MocoFinalTimeGoal(*args))
    __swig_destroy__ = _moco.delete_MocoFinalTimeGoal

# Register MocoFinalTimeGoal in _moco:
_moco.MocoFinalTimeGoal_swigregister(MocoFinalTimeGoal)

def MocoFinalTimeGoal_safeDownCast(obj):
    r"""
    MocoFinalTimeGoal_safeDownCast(OpenSimObject obj) -> MocoFinalTimeGoal

    Parameters
    ----------
    obj: OpenSim::Object *

    """
    return _moco.MocoFinalTimeGoal_safeDownCast(obj)

def MocoFinalTimeGoal_getClassName():
    r"""MocoFinalTimeGoal_getClassName() -> std::string const &"""
    return _moco.MocoFinalTimeGoal_getClassName()

class MocoAverageSpeedGoal(MocoGoal):
    r"""Proxy of C++ OpenSim::MocoAverageSpeedGoal class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def safeDownCast(obj):
        r"""
        safeDownCast(OpenSimObject obj) -> MocoAverageSpeedGoal

        Parameters
        ----------
        obj: OpenSim::Object *

        """
        return _moco.MocoAverageSpeedGoal_safeDownCast(obj)

    def assign(self, aObject):
        r"""
        assign(MocoAverageSpeedGoal self, OpenSimObject aObject)

        Parameters
        ----------
        aObject: OpenSim::Object &

        """
        return _moco.MocoAverageSpeedGoal_assign(self, aObject)

    @staticmethod
    def getClassName():
        r"""getClassName() -> std::string const &"""
        return _moco.MocoAverageSpeedGoal_getClassName()

    def clone(self):
        r"""clone(MocoAverageSpeedGoal self) -> MocoAverageSpeedGoal"""
        return _moco.MocoAverageSpeedGoal_clone(self)

    def getConcreteClassName(self):
        r"""getConcreteClassName(MocoAverageSpeedGoal self) -> std::string const &"""
        return _moco.MocoAverageSpeedGoal_getConcreteClassName(self)

    def copyProperty_desired_average_speed(self, source):
        r"""
        copyProperty_desired_average_speed(MocoAverageSpeedGoal self, MocoAverageSpeedGoal source)

        Parameters
        ----------
        source: OpenSim::MocoAverageSpeedGoal::Self const &

        """
        return _moco.MocoAverageSpeedGoal_copyProperty_desired_average_speed(self, source)

    def append_desired_average_speed(self, value):
        r"""
        append_desired_average_speed(MocoAverageSpeedGoal self, double const & value) -> int

        Parameters
        ----------
        value: double const &

        """
        return _moco.MocoAverageSpeedGoal_append_desired_average_speed(self, value)

    def constructProperty_desired_average_speed(self, initValue):
        r"""
        constructProperty_desired_average_speed(MocoAverageSpeedGoal self, double const & initValue)

        Parameters
        ----------
        initValue: double const &

        """
        return _moco.MocoAverageSpeedGoal_constructProperty_desired_average_speed(self, initValue)

    def get_desired_average_speed(self, *args):
        r"""
        get_desired_average_speed(MocoAverageSpeedGoal self, int i) -> double const

        Parameters
        ----------
        i: int

        get_desired_average_speed(MocoAverageSpeedGoal self) -> double const &
        """
        return _moco.MocoAverageSpeedGoal_get_desired_average_speed(self, *args)

    def upd_desired_average_speed(self, *args):
        r"""
        upd_desired_average_speed(MocoAverageSpeedGoal self, int i) -> double

        Parameters
        ----------
        i: int

        upd_desired_average_speed(MocoAverageSpeedGoal self) -> double &
        """
        return _moco.MocoAverageSpeedGoal_upd_desired_average_speed(self, *args)

    def set_desired_average_speed(self, *args):
        r"""
        set_desired_average_speed(MocoAverageSpeedGoal self, int i, double const & value)

        Parameters
        ----------
        i: int
        value: double const &

        set_desired_average_speed(MocoAverageSpeedGoal self, double const & value)

        Parameters
        ----------
        value: double const &

        """
        return _moco.MocoAverageSpeedGoal_set_desired_average_speed(self, *args)

    def __init__(self, *args):
        r"""
        __init__(MocoAverageSpeedGoal self) -> MocoAverageSpeedGoal
        __init__(MocoAverageSpeedGoal self, std::string name) -> MocoAverageSpeedGoal

        Parameters
        ----------
        name: std::string

        """
        _moco.MocoAverageSpeedGoal_swiginit(self, _moco.new_MocoAverageSpeedGoal(*args))
    __swig_destroy__ = _moco.delete_MocoAverageSpeedGoal

# Register MocoAverageSpeedGoal in _moco:
_moco.MocoAverageSpeedGoal_swigregister(MocoAverageSpeedGoal)

def MocoAverageSpeedGoal_safeDownCast(obj):
    r"""
    MocoAverageSpeedGoal_safeDownCast(OpenSimObject obj) -> MocoAverageSpeedGoal

    Parameters
    ----------
    obj: OpenSim::Object *

    """
    return _moco.MocoAverageSpeedGoal_safeDownCast(obj)

def MocoAverageSpeedGoal_getClassName():
    r"""MocoAverageSpeedGoal_getClassName() -> std::string const &"""
    return _moco.MocoAverageSpeedGoal_getClassName()

class SetMocoWeight(opensim.common.OpenSimObject):
    r"""Proxy of C++ OpenSim::Set< OpenSim::MocoWeight,OpenSim::Object > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def safeDownCast(obj):
        r"""
        safeDownCast(OpenSimObject obj) -> SetMocoWeight

        Parameters
        ----------
        obj: OpenSim::Object *

        """
        return _moco.SetMocoWeight_safeDownCast(obj)

    def assign(self, aObject):
        r"""
        assign(SetMocoWeight self, OpenSimObject aObject)

        Parameters
        ----------
        aObject: OpenSim::Object &

        """
        return _moco.SetMocoWeight_assign(self, aObject)

    @staticmethod
    def getClassName():
        r"""getClassName() -> std::string const &"""
        return _moco.SetMocoWeight_getClassName()

    def clone(self):
        r"""clone(SetMocoWeight self) -> SetMocoWeight"""
        return _moco.SetMocoWeight_clone(self)

    def getConcreteClassName(self):
        r"""getConcreteClassName(SetMocoWeight self) -> std::string const &"""
        return _moco.SetMocoWeight_getConcreteClassName(self)
    __swig_destroy__ = _moco.delete_SetMocoWeight

    def __init__(self, *args):
        r"""
        __init__(SetMocoWeight self) -> SetMocoWeight
        __init__(SetMocoWeight self, std::string const & aFileName, bool aUpdateFromXMLNode=True) -> SetMocoWeight

        Parameters
        ----------
        aFileName: std::string const &
        aUpdateFromXMLNode: bool

        __init__(SetMocoWeight self, SetMocoWeight aSet) -> SetMocoWeight

        Parameters
        ----------
        aSet: OpenSim::Set< OpenSim::MocoWeight,OpenSim::Object > const &

        """
        _moco.SetMocoWeight_swiginit(self, _moco.new_SetMocoWeight(*args))

    def setupGroups(self):
        r"""setupGroups(SetMocoWeight self)"""
        return _moco.SetMocoWeight_setupGroups(self)

    def setMemoryOwner(self, aTrueFalse):
        r"""
        setMemoryOwner(SetMocoWeight self, bool aTrueFalse)

        Parameters
        ----------
        aTrueFalse: bool

        """
        return _moco.SetMocoWeight_setMemoryOwner(self, aTrueFalse)

    def setSize(self, aSize):
        r"""
        setSize(SetMocoWeight self, int aSize) -> bool

        Parameters
        ----------
        aSize: int

        """
        return _moco.SetMocoWeight_setSize(self, aSize)

    def getSize(self):
        r"""getSize(SetMocoWeight self) -> int"""
        return _moco.SetMocoWeight_getSize(self)

    def getIndex(self, *args):
        r"""
        getIndex(SetMocoWeight self, MocoWeight aObject, int aStartIndex=0) -> int

        Parameters
        ----------
        aObject: OpenSim::MocoWeight const *
        aStartIndex: int

        getIndex(SetMocoWeight self, std::string const & aName, int aStartIndex=0) -> int

        Parameters
        ----------
        aName: std::string const &
        aStartIndex: int

        """
        return _moco.SetMocoWeight_getIndex(self, *args)

    def getGroupNamesContaining(self, aObjectName, rGroupNames):
        r"""
        getGroupNamesContaining(SetMocoWeight self, std::string const & aObjectName, ArrayStr rGroupNames)

        Parameters
        ----------
        aObjectName: std::string const &
        rGroupNames: OpenSim::Array< std::string > &

        """
        return _moco.SetMocoWeight_getGroupNamesContaining(self, aObjectName, rGroupNames)

    def adoptAndAppend(self, aObject):
        r"""
        adoptAndAppend(SetMocoWeight self, MocoWeight aObject) -> bool

        Parameters
        ----------
        aObject: OpenSim::MocoWeight *

        """
        return _moco.SetMocoWeight_adoptAndAppend(self, aObject)

    def cloneAndAppend(self, aObject):
        r"""
        cloneAndAppend(SetMocoWeight self, MocoWeight aObject) -> bool

        Parameters
        ----------
        aObject: OpenSim::MocoWeight const &

        """
        return _moco.SetMocoWeight_cloneAndAppend(self, aObject)

    def insert(self, aIndex, aObject):
        r"""
        insert(SetMocoWeight self, int aIndex, MocoWeight aObject) -> bool

        Parameters
        ----------
        aIndex: int
        aObject: OpenSim::MocoWeight *

        """
        return _moco.SetMocoWeight_insert(self, aIndex, aObject)

    def remove(self, *args):
        r"""
        remove(SetMocoWeight self, int aIndex) -> bool

        Parameters
        ----------
        aIndex: int

        remove(SetMocoWeight self, MocoWeight aObject) -> bool

        Parameters
        ----------
        aObject: OpenSim::MocoWeight const *

        """
        return _moco.SetMocoWeight_remove(self, *args)

    def clearAndDestroy(self):
        r"""clearAndDestroy(SetMocoWeight self)"""
        return _moco.SetMocoWeight_clearAndDestroy(self)

    def set(self, aIndex, aObject, preserveGroups=False):
        r"""
        set(SetMocoWeight self, int aIndex, MocoWeight aObject, bool preserveGroups=False) -> bool

        Parameters
        ----------
        aIndex: int
        aObject: OpenSim::MocoWeight *
        preserveGroups: bool

        """
        return _moco.SetMocoWeight_set(self, aIndex, aObject, preserveGroups)

    def get(self, *args):
        r"""
        get(SetMocoWeight self, int aIndex) -> MocoWeight

        Parameters
        ----------
        aIndex: int

        get(SetMocoWeight self, std::string const & aName) -> MocoWeight

        Parameters
        ----------
        aName: std::string const &

        """
        return _moco.SetMocoWeight_get(self, *args)

    def contains(self, aName):
        r"""
        contains(SetMocoWeight self, std::string const & aName) -> bool

        Parameters
        ----------
        aName: std::string const &

        """
        return _moco.SetMocoWeight_contains(self, aName)

    def getNames(self, rNames):
        r"""
        getNames(SetMocoWeight self, ArrayStr rNames)

        Parameters
        ----------
        rNames: OpenSim::Array< std::string > &

        """
        return _moco.SetMocoWeight_getNames(self, rNames)

    def getNumGroups(self):
        r"""getNumGroups(SetMocoWeight self) -> int"""
        return _moco.SetMocoWeight_getNumGroups(self)

    def addGroup(self, aGroupName):
        r"""
        addGroup(SetMocoWeight self, std::string const & aGroupName)

        Parameters
        ----------
        aGroupName: std::string const &

        """
        return _moco.SetMocoWeight_addGroup(self, aGroupName)

    def removeGroup(self, aGroupName):
        r"""
        removeGroup(SetMocoWeight self, std::string const & aGroupName)

        Parameters
        ----------
        aGroupName: std::string const &

        """
        return _moco.SetMocoWeight_removeGroup(self, aGroupName)

    def renameGroup(self, oldGroupName, newGroupName):
        r"""
        renameGroup(SetMocoWeight self, std::string const & oldGroupName, std::string const & newGroupName)

        Parameters
        ----------
        oldGroupName: std::string const &
        newGroupName: std::string const &

        """
        return _moco.SetMocoWeight_renameGroup(self, oldGroupName, newGroupName)

    def addObjectToGroup(self, aGroupName, aObjectName):
        r"""
        addObjectToGroup(SetMocoWeight self, std::string const & aGroupName, std::string const & aObjectName)

        Parameters
        ----------
        aGroupName: std::string const &
        aObjectName: std::string const &

        """
        return _moco.SetMocoWeight_addObjectToGroup(self, aGroupName, aObjectName)

    def getGroupNames(self, rGroupNames):
        r"""
        getGroupNames(SetMocoWeight self, ArrayStr rGroupNames)

        Parameters
        ----------
        rGroupNames: OpenSim::Array< std::string > &

        """
        return _moco.SetMocoWeight_getGroupNames(self, rGroupNames)

    def getGroup(self, *args):
        r"""
        getGroup(SetMocoWeight self, std::string const & aGroupName) -> ObjectGroup

        Parameters
        ----------
        aGroupName: std::string const &

        getGroup(SetMocoWeight self, int aIndex) -> ObjectGroup

        Parameters
        ----------
        aIndex: int

        """
        return _moco.SetMocoWeight_getGroup(self, *args)

    class SetIterator(object):
        """
        Use this object to iterate over a Set. You create an instance of
        this nested class by calling Set.__iter__().
        """
        def __init__(self, set_obj, index):
            """Construct an iterator for the Set `set`."""
            self._set_obj = set_obj
            self._index = index
        def __iter__(self):
            """This iterator is also iterable."""
            return self
        def next(self):
            if self._index < self._set_obj.getSize():
                current_index = self._index
                self._index += 1
                return self._set_obj.get(current_index)
            else:
    # This is how Python knows to stop iterating.
                 raise StopIteration()
        __next__ = next # For Python 3.

    def __iter__(self):
        """Get an iterator for this Set, starting at index 0."""
        return self.SetIterator(self, 0)

    def items(self):
        """
        A generator function that allows you to iterate over the key-value
        pairs of this Set. You can use this in a for-loop as such::

            for key, val in my_function_set.items():
    # `val` is an item in the Set, and `key` is its name.
                print key, val
        """
        index = 0
        while index < self.getSize():
            yield self.get(index).getName(), self.get(index)
            index += 1


# Register SetMocoWeight in _moco:
_moco.SetMocoWeight_swigregister(SetMocoWeight)

def SetMocoWeight_safeDownCast(obj):
    r"""
    SetMocoWeight_safeDownCast(OpenSimObject obj) -> SetMocoWeight

    Parameters
    ----------
    obj: OpenSim::Object *

    """
    return _moco.SetMocoWeight_safeDownCast(obj)

def SetMocoWeight_getClassName():
    r"""SetMocoWeight_getClassName() -> std::string const &"""
    return _moco.SetMocoWeight_getClassName()

class MocoWeight(opensim.common.OpenSimObject):
    r"""Proxy of C++ OpenSim::MocoWeight class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def safeDownCast(obj):
        r"""
        safeDownCast(OpenSimObject obj) -> MocoWeight

        Parameters
        ----------
        obj: OpenSim::Object *

        """
        return _moco.MocoWeight_safeDownCast(obj)

    def assign(self, aObject):
        r"""
        assign(MocoWeight self, OpenSimObject aObject)

        Parameters
        ----------
        aObject: OpenSim::Object &

        """
        return _moco.MocoWeight_assign(self, aObject)

    @staticmethod
    def getClassName():
        r"""getClassName() -> std::string const &"""
        return _moco.MocoWeight_getClassName()

    def clone(self):
        r"""clone(MocoWeight self) -> MocoWeight"""
        return _moco.MocoWeight_clone(self)

    def getConcreteClassName(self):
        r"""getConcreteClassName(MocoWeight self) -> std::string const &"""
        return _moco.MocoWeight_getConcreteClassName(self)

    def __init__(self, *args):
        r"""
        __init__(MocoWeight self) -> MocoWeight
        __init__(MocoWeight self, std::string const & name, double weight) -> MocoWeight

        Parameters
        ----------
        name: std::string const &
        weight: double

        """
        _moco.MocoWeight_swiginit(self, _moco.new_MocoWeight(*args))

    def setWeight(self, weight):
        r"""
        setWeight(MocoWeight self, double weight)

        Parameters
        ----------
        weight: double

        """
        return _moco.MocoWeight_setWeight(self, weight)

    def getWeight(self):
        r"""getWeight(MocoWeight self) -> double"""
        return _moco.MocoWeight_getWeight(self)
    __swig_destroy__ = _moco.delete_MocoWeight

# Register MocoWeight in _moco:
_moco.MocoWeight_swigregister(MocoWeight)

def MocoWeight_safeDownCast(obj):
    r"""
    MocoWeight_safeDownCast(OpenSimObject obj) -> MocoWeight

    Parameters
    ----------
    obj: OpenSim::Object *

    """
    return _moco.MocoWeight_safeDownCast(obj)

def MocoWeight_getClassName():
    r"""MocoWeight_getClassName() -> std::string const &"""
    return _moco.MocoWeight_getClassName()

class MocoWeightSet(SetMocoWeight):
    r"""Proxy of C++ OpenSim::MocoWeightSet class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def safeDownCast(obj):
        r"""
        safeDownCast(OpenSimObject obj) -> MocoWeightSet

        Parameters
        ----------
        obj: OpenSim::Object *

        """
        return _moco.MocoWeightSet_safeDownCast(obj)

    def assign(self, aObject):
        r"""
        assign(MocoWeightSet self, OpenSimObject aObject)

        Parameters
        ----------
        aObject: OpenSim::Object &

        """
        return _moco.MocoWeightSet_assign(self, aObject)

    @staticmethod
    def getClassName():
        r"""getClassName() -> std::string const &"""
        return _moco.MocoWeightSet_getClassName()

    def clone(self):
        r"""clone(MocoWeightSet self) -> MocoWeightSet"""
        return _moco.MocoWeightSet_clone(self)

    def getConcreteClassName(self):
        r"""getConcreteClassName(MocoWeightSet self) -> std::string const &"""
        return _moco.MocoWeightSet_getConcreteClassName(self)

    def __init__(self, *args):
        r"""
        __init__(MocoWeightSet self) -> MocoWeightSet
        __init__(MocoWeightSet self, std::string const & filename) -> MocoWeightSet

        Parameters
        ----------
        filename: std::string const &

        """
        _moco.MocoWeightSet_swiginit(self, _moco.new_MocoWeightSet(*args))
    __swig_destroy__ = _moco.delete_MocoWeightSet

# Register MocoWeightSet in _moco:
_moco.MocoWeightSet_swigregister(MocoWeightSet)

def MocoWeightSet_safeDownCast(obj):
    r"""
    MocoWeightSet_safeDownCast(OpenSimObject obj) -> MocoWeightSet

    Parameters
    ----------
    obj: OpenSim::Object *

    """
    return _moco.MocoWeightSet_safeDownCast(obj)

def MocoWeightSet_getClassName():
    r"""MocoWeightSet_getClassName() -> std::string const &"""
    return _moco.MocoWeightSet_getClassName()

class MocoStateTrackingGoal(MocoGoal):
    r"""Proxy of C++ OpenSim::MocoStateTrackingGoal class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def safeDownCast(obj):
        r"""
        safeDownCast(OpenSimObject obj) -> MocoStateTrackingGoal

        Parameters
        ----------
        obj: OpenSim::Object *

        """
        return _moco.MocoStateTrackingGoal_safeDownCast(obj)

    def assign(self, aObject):
        r"""
        assign(MocoStateTrackingGoal self, OpenSimObject aObject)

        Parameters
        ----------
        aObject: OpenSim::Object &

        """
        return _moco.MocoStateTrackingGoal_assign(self, aObject)

    @staticmethod
    def getClassName():
        r"""getClassName() -> std::string const &"""
        return _moco.MocoStateTrackingGoal_getClassName()

    def clone(self):
        r"""clone(MocoStateTrackingGoal self) -> MocoStateTrackingGoal"""
        return _moco.MocoStateTrackingGoal_clone(self)

    def getConcreteClassName(self):
        r"""getConcreteClassName(MocoStateTrackingGoal self) -> std::string const &"""
        return _moco.MocoStateTrackingGoal_getConcreteClassName(self)

    def __init__(self, *args):
        r"""
        __init__(MocoStateTrackingGoal self) -> MocoStateTrackingGoal
        __init__(MocoStateTrackingGoal self, std::string name) -> MocoStateTrackingGoal

        Parameters
        ----------
        name: std::string

        __init__(MocoStateTrackingGoal self, std::string name, double weight) -> MocoStateTrackingGoal

        Parameters
        ----------
        name: std::string
        weight: double

        """
        _moco.MocoStateTrackingGoal_swiginit(self, _moco.new_MocoStateTrackingGoal(*args))

    def setReference(self, ref):
        r"""
        setReference(MocoStateTrackingGoal self, TableProcessor ref)

        Parameters
        ----------
        ref: OpenSim::TableProcessor

        """
        return _moco.MocoStateTrackingGoal_setReference(self, ref)

    def getReference(self):
        r"""getReference(MocoStateTrackingGoal self) -> TableProcessor"""
        return _moco.MocoStateTrackingGoal_getReference(self)

    def setWeightForState(self, stateName, weight):
        r"""
        setWeightForState(MocoStateTrackingGoal self, std::string const & stateName, double const & weight)

        Parameters
        ----------
        stateName: std::string const &
        weight: double const &

        """
        return _moco.MocoStateTrackingGoal_setWeightForState(self, stateName, weight)

    def setWeightSet(self, weightSet):
        r"""
        setWeightSet(MocoStateTrackingGoal self, MocoWeightSet weightSet)

        Parameters
        ----------
        weightSet: OpenSim::MocoWeightSet const &

        """
        return _moco.MocoStateTrackingGoal_setWeightSet(self, weightSet)

    def setPattern(self, pattern):
        r"""
        setPattern(MocoStateTrackingGoal self, std::string pattern)

        Parameters
        ----------
        pattern: std::string

        """
        return _moco.MocoStateTrackingGoal_setPattern(self, pattern)

    def clearPattern(self):
        r"""clearPattern(MocoStateTrackingGoal self)"""
        return _moco.MocoStateTrackingGoal_clearPattern(self)

    def getPattern(self):
        r"""getPattern(MocoStateTrackingGoal self) -> std::string"""
        return _moco.MocoStateTrackingGoal_getPattern(self)

    def setAllowUnusedReferences(self, tf):
        r"""
        setAllowUnusedReferences(MocoStateTrackingGoal self, bool tf)

        Parameters
        ----------
        tf: bool

        """
        return _moco.MocoStateTrackingGoal_setAllowUnusedReferences(self, tf)

    def setScaleWeightsWithRange(self, tf):
        r"""
        setScaleWeightsWithRange(MocoStateTrackingGoal self, bool tf)

        Parameters
        ----------
        tf: bool

        """
        return _moco.MocoStateTrackingGoal_setScaleWeightsWithRange(self, tf)
    __swig_destroy__ = _moco.delete_MocoStateTrackingGoal

# Register MocoStateTrackingGoal in _moco:
_moco.MocoStateTrackingGoal_swigregister(MocoStateTrackingGoal)

def MocoStateTrackingGoal_safeDownCast(obj):
    r"""
    MocoStateTrackingGoal_safeDownCast(OpenSimObject obj) -> MocoStateTrackingGoal

    Parameters
    ----------
    obj: OpenSim::Object *

    """
    return _moco.MocoStateTrackingGoal_safeDownCast(obj)

def MocoStateTrackingGoal_getClassName():
    r"""MocoStateTrackingGoal_getClassName() -> std::string const &"""
    return _moco.MocoStateTrackingGoal_getClassName()

class MocoMarkerTrackingGoal(MocoGoal):
    r"""Proxy of C++ OpenSim::MocoMarkerTrackingGoal class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def safeDownCast(obj):
        r"""
        safeDownCast(OpenSimObject obj) -> MocoMarkerTrackingGoal

        Parameters
        ----------
        obj: OpenSim::Object *

        """
        return _moco.MocoMarkerTrackingGoal_safeDownCast(obj)

    def assign(self, aObject):
        r"""
        assign(MocoMarkerTrackingGoal self, OpenSimObject aObject)

        Parameters
        ----------
        aObject: OpenSim::Object &

        """
        return _moco.MocoMarkerTrackingGoal_assign(self, aObject)

    @staticmethod
    def getClassName():
        r"""getClassName() -> std::string const &"""
        return _moco.MocoMarkerTrackingGoal_getClassName()

    def clone(self):
        r"""clone(MocoMarkerTrackingGoal self) -> MocoMarkerTrackingGoal"""
        return _moco.MocoMarkerTrackingGoal_clone(self)

    def getConcreteClassName(self):
        r"""getConcreteClassName(MocoMarkerTrackingGoal self) -> std::string const &"""
        return _moco.MocoMarkerTrackingGoal_getConcreteClassName(self)

    def __init__(self, *args):
        r"""
        __init__(MocoMarkerTrackingGoal self) -> MocoMarkerTrackingGoal
        __init__(MocoMarkerTrackingGoal self, std::string name) -> MocoMarkerTrackingGoal

        Parameters
        ----------
        name: std::string

        __init__(MocoMarkerTrackingGoal self, std::string name, double weight) -> MocoMarkerTrackingGoal

        Parameters
        ----------
        name: std::string
        weight: double

        """
        _moco.MocoMarkerTrackingGoal_swiginit(self, _moco.new_MocoMarkerTrackingGoal(*args))

    def setMarkersReference(self, arg2):
        r"""
        setMarkersReference(MocoMarkerTrackingGoal self, MarkersReference arg2)

        Parameters
        ----------
        arg2: OpenSim::MarkersReference const &

        """
        return _moco.MocoMarkerTrackingGoal_setMarkersReference(self, arg2)

    def getMarkersReference(self):
        r"""getMarkersReference(MocoMarkerTrackingGoal self) -> MarkersReference"""
        return _moco.MocoMarkerTrackingGoal_getMarkersReference(self)

    def setAllowUnusedReferences(self, tf):
        r"""
        setAllowUnusedReferences(MocoMarkerTrackingGoal self, bool tf)

        Parameters
        ----------
        tf: bool

        """
        return _moco.MocoMarkerTrackingGoal_setAllowUnusedReferences(self, tf)
    __swig_destroy__ = _moco.delete_MocoMarkerTrackingGoal

# Register MocoMarkerTrackingGoal in _moco:
_moco.MocoMarkerTrackingGoal_swigregister(MocoMarkerTrackingGoal)

def MocoMarkerTrackingGoal_safeDownCast(obj):
    r"""
    MocoMarkerTrackingGoal_safeDownCast(OpenSimObject obj) -> MocoMarkerTrackingGoal

    Parameters
    ----------
    obj: OpenSim::Object *

    """
    return _moco.MocoMarkerTrackingGoal_safeDownCast(obj)

def MocoMarkerTrackingGoal_getClassName():
    r"""MocoMarkerTrackingGoal_getClassName() -> std::string const &"""
    return _moco.MocoMarkerTrackingGoal_getClassName()

class MocoMarkerFinalGoal(MocoGoal):
    r"""Proxy of C++ OpenSim::MocoMarkerFinalGoal class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def safeDownCast(obj):
        r"""
        safeDownCast(OpenSimObject obj) -> MocoMarkerFinalGoal

        Parameters
        ----------
        obj: OpenSim::Object *

        """
        return _moco.MocoMarkerFinalGoal_safeDownCast(obj)

    def assign(self, aObject):
        r"""
        assign(MocoMarkerFinalGoal self, OpenSimObject aObject)

        Parameters
        ----------
        aObject: OpenSim::Object &

        """
        return _moco.MocoMarkerFinalGoal_assign(self, aObject)

    @staticmethod
    def getClassName():
        r"""getClassName() -> std::string const &"""
        return _moco.MocoMarkerFinalGoal_getClassName()

    def clone(self):
        r"""clone(MocoMarkerFinalGoal self) -> MocoMarkerFinalGoal"""
        return _moco.MocoMarkerFinalGoal_clone(self)

    def getConcreteClassName(self):
        r"""getConcreteClassName(MocoMarkerFinalGoal self) -> std::string const &"""
        return _moco.MocoMarkerFinalGoal_getConcreteClassName(self)

    def __init__(self, *args):
        r"""
        __init__(MocoMarkerFinalGoal self) -> MocoMarkerFinalGoal
        __init__(MocoMarkerFinalGoal self, std::string name) -> MocoMarkerFinalGoal

        Parameters
        ----------
        name: std::string

        __init__(MocoMarkerFinalGoal self, std::string name, double weight) -> MocoMarkerFinalGoal

        Parameters
        ----------
        name: std::string
        weight: double

        """
        _moco.MocoMarkerFinalGoal_swiginit(self, _moco.new_MocoMarkerFinalGoal(*args))

    def setPointName(self, pointName):
        r"""
        setPointName(MocoMarkerFinalGoal self, std::string pointName)

        Parameters
        ----------
        pointName: std::string

        """
        return _moco.MocoMarkerFinalGoal_setPointName(self, pointName)

    def setReferenceLocation(self, refLocationInGround):
        r"""
        setReferenceLocation(MocoMarkerFinalGoal self, Vec3 refLocationInGround)

        Parameters
        ----------
        refLocationInGround: SimTK::Vec3

        """
        return _moco.MocoMarkerFinalGoal_setReferenceLocation(self, refLocationInGround)
    __swig_destroy__ = _moco.delete_MocoMarkerFinalGoal

# Register MocoMarkerFinalGoal in _moco:
_moco.MocoMarkerFinalGoal_swigregister(MocoMarkerFinalGoal)

def MocoMarkerFinalGoal_safeDownCast(obj):
    r"""
    MocoMarkerFinalGoal_safeDownCast(OpenSimObject obj) -> MocoMarkerFinalGoal

    Parameters
    ----------
    obj: OpenSim::Object *

    """
    return _moco.MocoMarkerFinalGoal_safeDownCast(obj)

def MocoMarkerFinalGoal_getClassName():
    r"""MocoMarkerFinalGoal_getClassName() -> std::string const &"""
    return _moco.MocoMarkerFinalGoal_getClassName()

class MocoContactTrackingGoalGroup(opensim.common.OpenSimObject):
    r"""Proxy of C++ OpenSim::MocoContactTrackingGoalGroup class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def safeDownCast(obj):
        r"""
        safeDownCast(OpenSimObject obj) -> MocoContactTrackingGoalGroup

        Parameters
        ----------
        obj: OpenSim::Object *

        """
        return _moco.MocoContactTrackingGoalGroup_safeDownCast(obj)

    def assign(self, aObject):
        r"""
        assign(MocoContactTrackingGoalGroup self, OpenSimObject aObject)

        Parameters
        ----------
        aObject: OpenSim::Object &

        """
        return _moco.MocoContactTrackingGoalGroup_assign(self, aObject)

    @staticmethod
    def getClassName():
        r"""getClassName() -> std::string const &"""
        return _moco.MocoContactTrackingGoalGroup_getClassName()

    def clone(self):
        r"""clone(MocoContactTrackingGoalGroup self) -> MocoContactTrackingGoalGroup"""
        return _moco.MocoContactTrackingGoalGroup_clone(self)

    def getConcreteClassName(self):
        r"""getConcreteClassName(MocoContactTrackingGoalGroup self) -> std::string const &"""
        return _moco.MocoContactTrackingGoalGroup_getConcreteClassName(self)

    def copyProperty_contact_force_paths(self, source):
        r"""
        copyProperty_contact_force_paths(MocoContactTrackingGoalGroup self, MocoContactTrackingGoalGroup source)

        Parameters
        ----------
        source: OpenSim::MocoContactTrackingGoalGroup::Self const &

        """
        return _moco.MocoContactTrackingGoalGroup_copyProperty_contact_force_paths(self, source)

    def get_contact_force_paths(self, i):
        r"""
        get_contact_force_paths(MocoContactTrackingGoalGroup self, int i) -> std::string const &

        Parameters
        ----------
        i: int

        """
        return _moco.MocoContactTrackingGoalGroup_get_contact_force_paths(self, i)

    def upd_contact_force_paths(self, i):
        r"""
        upd_contact_force_paths(MocoContactTrackingGoalGroup self, int i) -> std::string &

        Parameters
        ----------
        i: int

        """
        return _moco.MocoContactTrackingGoalGroup_upd_contact_force_paths(self, i)

    def set_contact_force_paths(self, i, value):
        r"""
        set_contact_force_paths(MocoContactTrackingGoalGroup self, int i, std::string const & value)

        Parameters
        ----------
        i: int
        value: std::string const &

        """
        return _moco.MocoContactTrackingGoalGroup_set_contact_force_paths(self, i, value)

    def append_contact_force_paths(self, value):
        r"""
        append_contact_force_paths(MocoContactTrackingGoalGroup self, std::string const & value) -> int

        Parameters
        ----------
        value: std::string const &

        """
        return _moco.MocoContactTrackingGoalGroup_append_contact_force_paths(self, value)

    def constructProperty_contact_force_paths(self):
        r"""constructProperty_contact_force_paths(MocoContactTrackingGoalGroup self)"""
        return _moco.MocoContactTrackingGoalGroup_constructProperty_contact_force_paths(self)

    def copyProperty_external_force_name(self, source):
        r"""
        copyProperty_external_force_name(MocoContactTrackingGoalGroup self, MocoContactTrackingGoalGroup source)

        Parameters
        ----------
        source: OpenSim::MocoContactTrackingGoalGroup::Self const &

        """
        return _moco.MocoContactTrackingGoalGroup_copyProperty_external_force_name(self, source)

    def append_external_force_name(self, value):
        r"""
        append_external_force_name(MocoContactTrackingGoalGroup self, std::string const & value) -> int

        Parameters
        ----------
        value: std::string const &

        """
        return _moco.MocoContactTrackingGoalGroup_append_external_force_name(self, value)

    def constructProperty_external_force_name(self, initValue):
        r"""
        constructProperty_external_force_name(MocoContactTrackingGoalGroup self, std::string const & initValue)

        Parameters
        ----------
        initValue: std::string const &

        """
        return _moco.MocoContactTrackingGoalGroup_constructProperty_external_force_name(self, initValue)

    def get_external_force_name(self, *args):
        r"""
        get_external_force_name(MocoContactTrackingGoalGroup self, int i) -> std::string const

        Parameters
        ----------
        i: int

        get_external_force_name(MocoContactTrackingGoalGroup self) -> std::string const &
        """
        return _moco.MocoContactTrackingGoalGroup_get_external_force_name(self, *args)

    def upd_external_force_name(self, *args):
        r"""
        upd_external_force_name(MocoContactTrackingGoalGroup self, int i) -> std::string

        Parameters
        ----------
        i: int

        upd_external_force_name(MocoContactTrackingGoalGroup self) -> std::string &
        """
        return _moco.MocoContactTrackingGoalGroup_upd_external_force_name(self, *args)

    def set_external_force_name(self, *args):
        r"""
        set_external_force_name(MocoContactTrackingGoalGroup self, int i, std::string const & value)

        Parameters
        ----------
        i: int
        value: std::string const &

        set_external_force_name(MocoContactTrackingGoalGroup self, std::string const & value)

        Parameters
        ----------
        value: std::string const &

        """
        return _moco.MocoContactTrackingGoalGroup_set_external_force_name(self, *args)

    def copyProperty_alternative_frame_paths(self, source):
        r"""
        copyProperty_alternative_frame_paths(MocoContactTrackingGoalGroup self, MocoContactTrackingGoalGroup source)

        Parameters
        ----------
        source: OpenSim::MocoContactTrackingGoalGroup::Self const &

        """
        return _moco.MocoContactTrackingGoalGroup_copyProperty_alternative_frame_paths(self, source)

    def get_alternative_frame_paths(self, i):
        r"""
        get_alternative_frame_paths(MocoContactTrackingGoalGroup self, int i) -> std::string const &

        Parameters
        ----------
        i: int

        """
        return _moco.MocoContactTrackingGoalGroup_get_alternative_frame_paths(self, i)

    def upd_alternative_frame_paths(self, i):
        r"""
        upd_alternative_frame_paths(MocoContactTrackingGoalGroup self, int i) -> std::string &

        Parameters
        ----------
        i: int

        """
        return _moco.MocoContactTrackingGoalGroup_upd_alternative_frame_paths(self, i)

    def set_alternative_frame_paths(self, i, value):
        r"""
        set_alternative_frame_paths(MocoContactTrackingGoalGroup self, int i, std::string const & value)

        Parameters
        ----------
        i: int
        value: std::string const &

        """
        return _moco.MocoContactTrackingGoalGroup_set_alternative_frame_paths(self, i, value)

    def append_alternative_frame_paths(self, value):
        r"""
        append_alternative_frame_paths(MocoContactTrackingGoalGroup self, std::string const & value) -> int

        Parameters
        ----------
        value: std::string const &

        """
        return _moco.MocoContactTrackingGoalGroup_append_alternative_frame_paths(self, value)

    def constructProperty_alternative_frame_paths(self):
        r"""constructProperty_alternative_frame_paths(MocoContactTrackingGoalGroup self)"""
        return _moco.MocoContactTrackingGoalGroup_constructProperty_alternative_frame_paths(self)

    def __init__(self, *args):
        r"""
        __init__(MocoContactTrackingGoalGroup self) -> MocoContactTrackingGoalGroup
        __init__(MocoContactTrackingGoalGroup self, StdVectorString contactForcePaths, std::string const & externalForceName) -> MocoContactTrackingGoalGroup

        Parameters
        ----------
        contactForcePaths: std::vector< std::string,std::allocator< std::string > > const &
        externalForceName: std::string const &

        __init__(MocoContactTrackingGoalGroup self, StdVectorString contactForcePaths, std::string const & externalForceName, StdVectorString altFramePaths) -> MocoContactTrackingGoalGroup

        Parameters
        ----------
        contactForcePaths: std::vector< std::string,std::allocator< std::string > > const &
        externalForceName: std::string const &
        altFramePaths: std::vector< std::string,std::allocator< std::string > > const &

        """
        _moco.MocoContactTrackingGoalGroup_swiginit(self, _moco.new_MocoContactTrackingGoalGroup(*args))
    __swig_destroy__ = _moco.delete_MocoContactTrackingGoalGroup

# Register MocoContactTrackingGoalGroup in _moco:
_moco.MocoContactTrackingGoalGroup_swigregister(MocoContactTrackingGoalGroup)

def MocoContactTrackingGoalGroup_safeDownCast(obj):
    r"""
    MocoContactTrackingGoalGroup_safeDownCast(OpenSimObject obj) -> MocoContactTrackingGoalGroup

    Parameters
    ----------
    obj: OpenSim::Object *

    """
    return _moco.MocoContactTrackingGoalGroup_safeDownCast(obj)

def MocoContactTrackingGoalGroup_getClassName():
    r"""MocoContactTrackingGoalGroup_getClassName() -> std::string const &"""
    return _moco.MocoContactTrackingGoalGroup_getClassName()

class MocoContactTrackingGoal(MocoGoal):
    r"""Proxy of C++ OpenSim::MocoContactTrackingGoal class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def safeDownCast(obj):
        r"""
        safeDownCast(OpenSimObject obj) -> MocoContactTrackingGoal

        Parameters
        ----------
        obj: OpenSim::Object *

        """
        return _moco.MocoContactTrackingGoal_safeDownCast(obj)

    def assign(self, aObject):
        r"""
        assign(MocoContactTrackingGoal self, OpenSimObject aObject)

        Parameters
        ----------
        aObject: OpenSim::Object &

        """
        return _moco.MocoContactTrackingGoal_assign(self, aObject)

    @staticmethod
    def getClassName():
        r"""getClassName() -> std::string const &"""
        return _moco.MocoContactTrackingGoal_getClassName()

    def clone(self):
        r"""clone(MocoContactTrackingGoal self) -> MocoContactTrackingGoal"""
        return _moco.MocoContactTrackingGoal_clone(self)

    def getConcreteClassName(self):
        r"""getConcreteClassName(MocoContactTrackingGoal self) -> std::string const &"""
        return _moco.MocoContactTrackingGoal_getConcreteClassName(self)

    def __init__(self, *args):
        r"""
        __init__(MocoContactTrackingGoal self) -> MocoContactTrackingGoal
        __init__(MocoContactTrackingGoal self, std::string name) -> MocoContactTrackingGoal

        Parameters
        ----------
        name: std::string

        __init__(MocoContactTrackingGoal self, std::string name, double weight) -> MocoContactTrackingGoal

        Parameters
        ----------
        name: std::string
        weight: double

        """
        _moco.MocoContactTrackingGoal_swiginit(self, _moco.new_MocoContactTrackingGoal(*args))

    def setExternalLoadsFile(self, extLoadsFile):
        r"""
        setExternalLoadsFile(MocoContactTrackingGoal self, std::string const & extLoadsFile)

        Parameters
        ----------
        extLoadsFile: std::string const &

        """
        return _moco.MocoContactTrackingGoal_setExternalLoadsFile(self, extLoadsFile)

    def setExternalLoads(self, extLoads):
        r"""
        setExternalLoads(MocoContactTrackingGoal self, ExternalLoads extLoads)

        Parameters
        ----------
        extLoads: OpenSim::ExternalLoads const &

        """
        return _moco.MocoContactTrackingGoal_setExternalLoads(self, extLoads)

    def addContactGroup(self, *args):
        r"""
        addContactGroup(MocoContactTrackingGoal self, StdVectorString contactForcePaths, std::string const & externalForceName)

        Parameters
        ----------
        contactForcePaths: std::vector< std::string,std::allocator< std::string > > const &
        externalForceName: std::string const &

        addContactGroup(MocoContactTrackingGoal self, MocoContactTrackingGoalGroup group)

        Parameters
        ----------
        group: OpenSim::MocoContactTrackingGoalGroup

        """
        return _moco.MocoContactTrackingGoal_addContactGroup(self, *args)

    def setProjection(self, projection):
        r"""
        setProjection(MocoContactTrackingGoal self, std::string projection)

        Parameters
        ----------
        projection: std::string

        """
        return _moco.MocoContactTrackingGoal_setProjection(self, projection)

    def getProjection(self):
        r"""getProjection(MocoContactTrackingGoal self) -> std::string"""
        return _moco.MocoContactTrackingGoal_getProjection(self)

    def setProjectionVector(self, normal):
        r"""
        setProjectionVector(MocoContactTrackingGoal self, Vec3 normal)

        Parameters
        ----------
        normal: SimTK::Vec3

        """
        return _moco.MocoContactTrackingGoal_setProjectionVector(self, normal)

    def clearProjectionVector(self):
        r"""clearProjectionVector(MocoContactTrackingGoal self)"""
        return _moco.MocoContactTrackingGoal_clearProjectionVector(self)

    def getProjectionVector(self):
        r"""getProjectionVector(MocoContactTrackingGoal self) -> Vec3"""
        return _moco.MocoContactTrackingGoal_getProjectionVector(self)
    __swig_destroy__ = _moco.delete_MocoContactTrackingGoal

# Register MocoContactTrackingGoal in _moco:
_moco.MocoContactTrackingGoal_swigregister(MocoContactTrackingGoal)

def MocoContactTrackingGoal_safeDownCast(obj):
    r"""
    MocoContactTrackingGoal_safeDownCast(OpenSimObject obj) -> MocoContactTrackingGoal

    Parameters
    ----------
    obj: OpenSim::Object *

    """
    return _moco.MocoContactTrackingGoal_safeDownCast(obj)

def MocoContactTrackingGoal_getClassName():
    r"""MocoContactTrackingGoal_getClassName() -> std::string const &"""
    return _moco.MocoContactTrackingGoal_getClassName()

class MocoControlGoal(MocoGoal):
    r"""Proxy of C++ OpenSim::MocoControlGoal class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def safeDownCast(obj):
        r"""
        safeDownCast(OpenSimObject obj) -> MocoControlGoal

        Parameters
        ----------
        obj: OpenSim::Object *

        """
        return _moco.MocoControlGoal_safeDownCast(obj)

    def assign(self, aObject):
        r"""
        assign(MocoControlGoal self, OpenSimObject aObject)

        Parameters
        ----------
        aObject: OpenSim::Object &

        """
        return _moco.MocoControlGoal_assign(self, aObject)

    @staticmethod
    def getClassName():
        r"""getClassName() -> std::string const &"""
        return _moco.MocoControlGoal_getClassName()

    def clone(self):
        r"""clone(MocoControlGoal self) -> MocoControlGoal"""
        return _moco.MocoControlGoal_clone(self)

    def getConcreteClassName(self):
        r"""getConcreteClassName(MocoControlGoal self) -> std::string const &"""
        return _moco.MocoControlGoal_getConcreteClassName(self)

    def __init__(self, *args):
        r"""
        __init__(MocoControlGoal self) -> MocoControlGoal
        __init__(MocoControlGoal self, std::string name) -> MocoControlGoal

        Parameters
        ----------
        name: std::string

        __init__(MocoControlGoal self, std::string name, double weight) -> MocoControlGoal

        Parameters
        ----------
        name: std::string
        weight: double

        """
        _moco.MocoControlGoal_swiginit(self, _moco.new_MocoControlGoal(*args))

    def setWeightForControl(self, controlName, weight):
        r"""
        setWeightForControl(MocoControlGoal self, std::string const & controlName, double const & weight)

        Parameters
        ----------
        controlName: std::string const &
        weight: double const &

        """
        return _moco.MocoControlGoal_setWeightForControl(self, controlName, weight)

    def setWeightForControlPattern(self, pattern, weight):
        r"""
        setWeightForControlPattern(MocoControlGoal self, std::string const & pattern, double const & weight)

        Parameters
        ----------
        pattern: std::string const &
        weight: double const &

        """
        return _moco.MocoControlGoal_setWeightForControlPattern(self, pattern, weight)

    def setExponent(self, exponent):
        r"""
        setExponent(MocoControlGoal self, int exponent)

        Parameters
        ----------
        exponent: int

        """
        return _moco.MocoControlGoal_setExponent(self, exponent)

    def getExponent(self):
        r"""getExponent(MocoControlGoal self) -> double"""
        return _moco.MocoControlGoal_getExponent(self)

    def setDivideByDisplacement(self, tf):
        r"""
        setDivideByDisplacement(MocoControlGoal self, bool tf)

        Parameters
        ----------
        tf: bool

        """
        return _moco.MocoControlGoal_setDivideByDisplacement(self, tf)

    def getDivideByDisplacement(self):
        r"""getDivideByDisplacement(MocoControlGoal self) -> bool"""
        return _moco.MocoControlGoal_getDivideByDisplacement(self)
    __swig_destroy__ = _moco.delete_MocoControlGoal

# Register MocoControlGoal in _moco:
_moco.MocoControlGoal_swigregister(MocoControlGoal)

def MocoControlGoal_safeDownCast(obj):
    r"""
    MocoControlGoal_safeDownCast(OpenSimObject obj) -> MocoControlGoal

    Parameters
    ----------
    obj: OpenSim::Object *

    """
    return _moco.MocoControlGoal_safeDownCast(obj)

def MocoControlGoal_getClassName():
    r"""MocoControlGoal_getClassName() -> std::string const &"""
    return _moco.MocoControlGoal_getClassName()

class MocoControlTrackingGoalReference(opensim.common.OpenSimObject):
    r"""Proxy of C++ OpenSim::MocoControlTrackingGoalReference class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def safeDownCast(obj):
        r"""
        safeDownCast(OpenSimObject obj) -> MocoControlTrackingGoalReference

        Parameters
        ----------
        obj: OpenSim::Object *

        """
        return _moco.MocoControlTrackingGoalReference_safeDownCast(obj)

    def assign(self, aObject):
        r"""
        assign(MocoControlTrackingGoalReference self, OpenSimObject aObject)

        Parameters
        ----------
        aObject: OpenSim::Object &

        """
        return _moco.MocoControlTrackingGoalReference_assign(self, aObject)

    @staticmethod
    def getClassName():
        r"""getClassName() -> std::string const &"""
        return _moco.MocoControlTrackingGoalReference_getClassName()

    def clone(self):
        r"""clone(MocoControlTrackingGoalReference self) -> MocoControlTrackingGoalReference"""
        return _moco.MocoControlTrackingGoalReference_clone(self)

    def getConcreteClassName(self):
        r"""getConcreteClassName(MocoControlTrackingGoalReference self) -> std::string const &"""
        return _moco.MocoControlTrackingGoalReference_getConcreteClassName(self)

    def copyProperty_reference(self, source):
        r"""
        copyProperty_reference(MocoControlTrackingGoalReference self, MocoControlTrackingGoalReference source)

        Parameters
        ----------
        source: OpenSim::MocoControlTrackingGoalReference::Self const &

        """
        return _moco.MocoControlTrackingGoalReference_copyProperty_reference(self, source)

    def append_reference(self, value):
        r"""
        append_reference(MocoControlTrackingGoalReference self, std::string const & value) -> int

        Parameters
        ----------
        value: std::string const &

        """
        return _moco.MocoControlTrackingGoalReference_append_reference(self, value)

    def constructProperty_reference(self, initValue):
        r"""
        constructProperty_reference(MocoControlTrackingGoalReference self, std::string const & initValue)

        Parameters
        ----------
        initValue: std::string const &

        """
        return _moco.MocoControlTrackingGoalReference_constructProperty_reference(self, initValue)

    def get_reference(self, *args):
        r"""
        get_reference(MocoControlTrackingGoalReference self, int i) -> std::string const

        Parameters
        ----------
        i: int

        get_reference(MocoControlTrackingGoalReference self) -> std::string const &
        """
        return _moco.MocoControlTrackingGoalReference_get_reference(self, *args)

    def upd_reference(self, *args):
        r"""
        upd_reference(MocoControlTrackingGoalReference self, int i) -> std::string

        Parameters
        ----------
        i: int

        upd_reference(MocoControlTrackingGoalReference self) -> std::string &
        """
        return _moco.MocoControlTrackingGoalReference_upd_reference(self, *args)

    def set_reference(self, *args):
        r"""
        set_reference(MocoControlTrackingGoalReference self, int i, std::string const & value)

        Parameters
        ----------
        i: int
        value: std::string const &

        set_reference(MocoControlTrackingGoalReference self, std::string const & value)

        Parameters
        ----------
        value: std::string const &

        """
        return _moco.MocoControlTrackingGoalReference_set_reference(self, *args)

    def __init__(self, *args):
        r"""
        __init__(MocoControlTrackingGoalReference self) -> MocoControlTrackingGoalReference
        __init__(MocoControlTrackingGoalReference self, std::string name, std::string reference) -> MocoControlTrackingGoalReference

        Parameters
        ----------
        name: std::string
        reference: std::string

        """
        _moco.MocoControlTrackingGoalReference_swiginit(self, _moco.new_MocoControlTrackingGoalReference(*args))
    __swig_destroy__ = _moco.delete_MocoControlTrackingGoalReference

# Register MocoControlTrackingGoalReference in _moco:
_moco.MocoControlTrackingGoalReference_swigregister(MocoControlTrackingGoalReference)

def MocoControlTrackingGoalReference_safeDownCast(obj):
    r"""
    MocoControlTrackingGoalReference_safeDownCast(OpenSimObject obj) -> MocoControlTrackingGoalReference

    Parameters
    ----------
    obj: OpenSim::Object *

    """
    return _moco.MocoControlTrackingGoalReference_safeDownCast(obj)

def MocoControlTrackingGoalReference_getClassName():
    r"""MocoControlTrackingGoalReference_getClassName() -> std::string const &"""
    return _moco.MocoControlTrackingGoalReference_getClassName()

class MocoControlTrackingGoal(MocoGoal):
    r"""Proxy of C++ OpenSim::MocoControlTrackingGoal class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def safeDownCast(obj):
        r"""
        safeDownCast(OpenSimObject obj) -> MocoControlTrackingGoal

        Parameters
        ----------
        obj: OpenSim::Object *

        """
        return _moco.MocoControlTrackingGoal_safeDownCast(obj)

    def assign(self, aObject):
        r"""
        assign(MocoControlTrackingGoal self, OpenSimObject aObject)

        Parameters
        ----------
        aObject: OpenSim::Object &

        """
        return _moco.MocoControlTrackingGoal_assign(self, aObject)

    @staticmethod
    def getClassName():
        r"""getClassName() -> std::string const &"""
        return _moco.MocoControlTrackingGoal_getClassName()

    def clone(self):
        r"""clone(MocoControlTrackingGoal self) -> MocoControlTrackingGoal"""
        return _moco.MocoControlTrackingGoal_clone(self)

    def getConcreteClassName(self):
        r"""getConcreteClassName(MocoControlTrackingGoal self) -> std::string const &"""
        return _moco.MocoControlTrackingGoal_getConcreteClassName(self)

    def __init__(self, *args):
        r"""
        __init__(MocoControlTrackingGoal self) -> MocoControlTrackingGoal
        __init__(MocoControlTrackingGoal self, std::string name) -> MocoControlTrackingGoal

        Parameters
        ----------
        name: std::string

        __init__(MocoControlTrackingGoal self, std::string name, double weight) -> MocoControlTrackingGoal

        Parameters
        ----------
        name: std::string
        weight: double

        """
        _moco.MocoControlTrackingGoal_swiginit(self, _moco.new_MocoControlTrackingGoal(*args))

    def setReference(self, ref):
        r"""
        setReference(MocoControlTrackingGoal self, TableProcessor ref)

        Parameters
        ----------
        ref: OpenSim::TableProcessor const &

        """
        return _moco.MocoControlTrackingGoal_setReference(self, ref)

    def setWeightForControl(self, controlName, weight):
        r"""
        setWeightForControl(MocoControlTrackingGoal self, std::string const & controlName, double const & weight)

        Parameters
        ----------
        controlName: std::string const &
        weight: double const &

        """
        return _moco.MocoControlTrackingGoal_setWeightForControl(self, controlName, weight)

    def setWeightSet(self, weightSet):
        r"""
        setWeightSet(MocoControlTrackingGoal self, MocoWeightSet weightSet)

        Parameters
        ----------
        weightSet: OpenSim::MocoWeightSet const &

        """
        return _moco.MocoControlTrackingGoal_setWeightSet(self, weightSet)

    def setReferenceLabel(self, control, label):
        r"""
        setReferenceLabel(MocoControlTrackingGoal self, std::string const & control, std::string const & label)

        Parameters
        ----------
        control: std::string const &
        label: std::string const &

        """
        return _moco.MocoControlTrackingGoal_setReferenceLabel(self, control, label)

    def clearReferenceLabels(self):
        r"""clearReferenceLabels(MocoControlTrackingGoal self)"""
        return _moco.MocoControlTrackingGoal_clearReferenceLabels(self)

    def setAllowUnusedReferences(self, tf):
        r"""
        setAllowUnusedReferences(MocoControlTrackingGoal self, bool tf)

        Parameters
        ----------
        tf: bool

        """
        return _moco.MocoControlTrackingGoal_setAllowUnusedReferences(self, tf)

    def getReference(self):
        r"""getReference(MocoControlTrackingGoal self) -> TableProcessor"""
        return _moco.MocoControlTrackingGoal_getReference(self)

    def hasReferenceLabel(self, control):
        r"""
        hasReferenceLabel(MocoControlTrackingGoal self, std::string const & control) -> bool

        Parameters
        ----------
        control: std::string const &

        """
        return _moco.MocoControlTrackingGoal_hasReferenceLabel(self, control)

    def getReferenceLabel(self, control):
        r"""
        getReferenceLabel(MocoControlTrackingGoal self, std::string const & control) -> std::string

        Parameters
        ----------
        control: std::string const &

        """
        return _moco.MocoControlTrackingGoal_getReferenceLabel(self, control)

    def getAllowUnusedReferences(self):
        r"""getAllowUnusedReferences(MocoControlTrackingGoal self) -> bool"""
        return _moco.MocoControlTrackingGoal_getAllowUnusedReferences(self)
    __swig_destroy__ = _moco.delete_MocoControlTrackingGoal

# Register MocoControlTrackingGoal in _moco:
_moco.MocoControlTrackingGoal_swigregister(MocoControlTrackingGoal)

def MocoControlTrackingGoal_safeDownCast(obj):
    r"""
    MocoControlTrackingGoal_safeDownCast(OpenSimObject obj) -> MocoControlTrackingGoal

    Parameters
    ----------
    obj: OpenSim::Object *

    """
    return _moco.MocoControlTrackingGoal_safeDownCast(obj)

def MocoControlTrackingGoal_getClassName():
    r"""MocoControlTrackingGoal_getClassName() -> std::string const &"""
    return _moco.MocoControlTrackingGoal_getClassName()

class MocoInitialActivationGoal(MocoGoal):
    r"""Proxy of C++ OpenSim::MocoInitialActivationGoal class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def safeDownCast(obj):
        r"""
        safeDownCast(OpenSimObject obj) -> MocoInitialActivationGoal

        Parameters
        ----------
        obj: OpenSim::Object *

        """
        return _moco.MocoInitialActivationGoal_safeDownCast(obj)

    def assign(self, aObject):
        r"""
        assign(MocoInitialActivationGoal self, OpenSimObject aObject)

        Parameters
        ----------
        aObject: OpenSim::Object &

        """
        return _moco.MocoInitialActivationGoal_assign(self, aObject)

    @staticmethod
    def getClassName():
        r"""getClassName() -> std::string const &"""
        return _moco.MocoInitialActivationGoal_getClassName()

    def clone(self):
        r"""clone(MocoInitialActivationGoal self) -> MocoInitialActivationGoal"""
        return _moco.MocoInitialActivationGoal_clone(self)

    def getConcreteClassName(self):
        r"""getConcreteClassName(MocoInitialActivationGoal self) -> std::string const &"""
        return _moco.MocoInitialActivationGoal_getConcreteClassName(self)

    def __init__(self, *args):
        r"""
        __init__(MocoInitialActivationGoal self) -> MocoInitialActivationGoal
        __init__(MocoInitialActivationGoal self, std::string name) -> MocoInitialActivationGoal

        Parameters
        ----------
        name: std::string

        """
        _moco.MocoInitialActivationGoal_swiginit(self, _moco.new_MocoInitialActivationGoal(*args))
    __swig_destroy__ = _moco.delete_MocoInitialActivationGoal

# Register MocoInitialActivationGoal in _moco:
_moco.MocoInitialActivationGoal_swigregister(MocoInitialActivationGoal)

def MocoInitialActivationGoal_safeDownCast(obj):
    r"""
    MocoInitialActivationGoal_safeDownCast(OpenSimObject obj) -> MocoInitialActivationGoal

    Parameters
    ----------
    obj: OpenSim::Object *

    """
    return _moco.MocoInitialActivationGoal_safeDownCast(obj)

def MocoInitialActivationGoal_getClassName():
    r"""MocoInitialActivationGoal_getClassName() -> std::string const &"""
    return _moco.MocoInitialActivationGoal_getClassName()

class MocoJointReactionGoal(MocoGoal):
    r"""Proxy of C++ OpenSim::MocoJointReactionGoal class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def safeDownCast(obj):
        r"""
        safeDownCast(OpenSimObject obj) -> MocoJointReactionGoal

        Parameters
        ----------
        obj: OpenSim::Object *

        """
        return _moco.MocoJointReactionGoal_safeDownCast(obj)

    def assign(self, aObject):
        r"""
        assign(MocoJointReactionGoal self, OpenSimObject aObject)

        Parameters
        ----------
        aObject: OpenSim::Object &

        """
        return _moco.MocoJointReactionGoal_assign(self, aObject)

    @staticmethod
    def getClassName():
        r"""getClassName() -> std::string const &"""
        return _moco.MocoJointReactionGoal_getClassName()

    def clone(self):
        r"""clone(MocoJointReactionGoal self) -> MocoJointReactionGoal"""
        return _moco.MocoJointReactionGoal_clone(self)

    def getConcreteClassName(self):
        r"""getConcreteClassName(MocoJointReactionGoal self) -> std::string const &"""
        return _moco.MocoJointReactionGoal_getConcreteClassName(self)

    def __init__(self, *args):
        r"""
        __init__(MocoJointReactionGoal self) -> MocoJointReactionGoal
        __init__(MocoJointReactionGoal self, std::string name) -> MocoJointReactionGoal

        Parameters
        ----------
        name: std::string

        __init__(MocoJointReactionGoal self, std::string name, double weight) -> MocoJointReactionGoal

        Parameters
        ----------
        name: std::string
        weight: double

        """
        _moco.MocoJointReactionGoal_swiginit(self, _moco.new_MocoJointReactionGoal(*args))

    def setJointPath(self, jointPath):
        r"""
        setJointPath(MocoJointReactionGoal self, std::string const & jointPath)

        Parameters
        ----------
        jointPath: std::string const &

        """
        return _moco.MocoJointReactionGoal_setJointPath(self, jointPath)

    def setLoadsFrame(self, frame):
        r"""
        setLoadsFrame(MocoJointReactionGoal self, std::string const & frame)

        Parameters
        ----------
        frame: std::string const &

        """
        return _moco.MocoJointReactionGoal_setLoadsFrame(self, frame)

    def setExpressedInFramePath(self, framePath):
        r"""
        setExpressedInFramePath(MocoJointReactionGoal self, std::string const & framePath)

        Parameters
        ----------
        framePath: std::string const &

        """
        return _moco.MocoJointReactionGoal_setExpressedInFramePath(self, framePath)

    def setReactionMeasures(self, measures):
        r"""
        setReactionMeasures(MocoJointReactionGoal self, StdVectorString measures)

        Parameters
        ----------
        measures: std::vector< std::string,std::allocator< std::string > > const &

        """
        return _moco.MocoJointReactionGoal_setReactionMeasures(self, measures)

    def setWeight(self, stateName, weight):
        r"""
        setWeight(MocoJointReactionGoal self, std::string const & stateName, double const & weight)

        Parameters
        ----------
        stateName: std::string const &
        weight: double const &

        """
        return _moco.MocoJointReactionGoal_setWeight(self, stateName, weight)

    def setWeightSet(self, weightSet):
        r"""
        setWeightSet(MocoJointReactionGoal self, MocoWeightSet weightSet)

        Parameters
        ----------
        weightSet: OpenSim::MocoWeightSet const &

        """
        return _moco.MocoJointReactionGoal_setWeightSet(self, weightSet)
    __swig_destroy__ = _moco.delete_MocoJointReactionGoal

# Register MocoJointReactionGoal in _moco:
_moco.MocoJointReactionGoal_swigregister(MocoJointReactionGoal)

def MocoJointReactionGoal_safeDownCast(obj):
    r"""
    MocoJointReactionGoal_safeDownCast(OpenSimObject obj) -> MocoJointReactionGoal

    Parameters
    ----------
    obj: OpenSim::Object *

    """
    return _moco.MocoJointReactionGoal_safeDownCast(obj)

def MocoJointReactionGoal_getClassName():
    r"""MocoJointReactionGoal_getClassName() -> std::string const &"""
    return _moco.MocoJointReactionGoal_getClassName()

class MocoSumSquaredStateGoal(MocoGoal):
    r"""Proxy of C++ OpenSim::MocoSumSquaredStateGoal class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def safeDownCast(obj):
        r"""
        safeDownCast(OpenSimObject obj) -> MocoSumSquaredStateGoal

        Parameters
        ----------
        obj: OpenSim::Object *

        """
        return _moco.MocoSumSquaredStateGoal_safeDownCast(obj)

    def assign(self, aObject):
        r"""
        assign(MocoSumSquaredStateGoal self, OpenSimObject aObject)

        Parameters
        ----------
        aObject: OpenSim::Object &

        """
        return _moco.MocoSumSquaredStateGoal_assign(self, aObject)

    @staticmethod
    def getClassName():
        r"""getClassName() -> std::string const &"""
        return _moco.MocoSumSquaredStateGoal_getClassName()

    def clone(self):
        r"""clone(MocoSumSquaredStateGoal self) -> MocoSumSquaredStateGoal"""
        return _moco.MocoSumSquaredStateGoal_clone(self)

    def getConcreteClassName(self):
        r"""getConcreteClassName(MocoSumSquaredStateGoal self) -> std::string const &"""
        return _moco.MocoSumSquaredStateGoal_getConcreteClassName(self)

    def __init__(self, *args):
        r"""
        __init__(MocoSumSquaredStateGoal self) -> MocoSumSquaredStateGoal
        __init__(MocoSumSquaredStateGoal self, std::string name) -> MocoSumSquaredStateGoal

        Parameters
        ----------
        name: std::string

        __init__(MocoSumSquaredStateGoal self, std::string name, double weight) -> MocoSumSquaredStateGoal

        Parameters
        ----------
        name: std::string
        weight: double

        """
        _moco.MocoSumSquaredStateGoal_swiginit(self, _moco.new_MocoSumSquaredStateGoal(*args))

    def setWeightSet(self, weightSet):
        r"""
        setWeightSet(MocoSumSquaredStateGoal self, MocoWeightSet weightSet)

        Parameters
        ----------
        weightSet: OpenSim::MocoWeightSet const &

        """
        return _moco.MocoSumSquaredStateGoal_setWeightSet(self, weightSet)

    def setWeightForState(self, stateName, weight):
        r"""
        setWeightForState(MocoSumSquaredStateGoal self, std::string const & stateName, double const & weight)

        Parameters
        ----------
        stateName: std::string const &
        weight: double const &

        """
        return _moco.MocoSumSquaredStateGoal_setWeightForState(self, stateName, weight)

    def setPattern(self, pattern):
        r"""
        setPattern(MocoSumSquaredStateGoal self, std::string pattern)

        Parameters
        ----------
        pattern: std::string

        """
        return _moco.MocoSumSquaredStateGoal_setPattern(self, pattern)

    def clearPattern(self):
        r"""clearPattern(MocoSumSquaredStateGoal self)"""
        return _moco.MocoSumSquaredStateGoal_clearPattern(self)

    def getPattern(self):
        r"""getPattern(MocoSumSquaredStateGoal self) -> std::string"""
        return _moco.MocoSumSquaredStateGoal_getPattern(self)
    __swig_destroy__ = _moco.delete_MocoSumSquaredStateGoal

# Register MocoSumSquaredStateGoal in _moco:
_moco.MocoSumSquaredStateGoal_swigregister(MocoSumSquaredStateGoal)

def MocoSumSquaredStateGoal_safeDownCast(obj):
    r"""
    MocoSumSquaredStateGoal_safeDownCast(OpenSimObject obj) -> MocoSumSquaredStateGoal

    Parameters
    ----------
    obj: OpenSim::Object *

    """
    return _moco.MocoSumSquaredStateGoal_safeDownCast(obj)

def MocoSumSquaredStateGoal_getClassName():
    r"""MocoSumSquaredStateGoal_getClassName() -> std::string const &"""
    return _moco.MocoSumSquaredStateGoal_getClassName()

class MocoOrientationTrackingGoal(MocoGoal):
    r"""Proxy of C++ OpenSim::MocoOrientationTrackingGoal class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def safeDownCast(obj):
        r"""
        safeDownCast(OpenSimObject obj) -> MocoOrientationTrackingGoal

        Parameters
        ----------
        obj: OpenSim::Object *

        """
        return _moco.MocoOrientationTrackingGoal_safeDownCast(obj)

    def assign(self, aObject):
        r"""
        assign(MocoOrientationTrackingGoal self, OpenSimObject aObject)

        Parameters
        ----------
        aObject: OpenSim::Object &

        """
        return _moco.MocoOrientationTrackingGoal_assign(self, aObject)

    @staticmethod
    def getClassName():
        r"""getClassName() -> std::string const &"""
        return _moco.MocoOrientationTrackingGoal_getClassName()

    def clone(self):
        r"""clone(MocoOrientationTrackingGoal self) -> MocoOrientationTrackingGoal"""
        return _moco.MocoOrientationTrackingGoal_clone(self)

    def getConcreteClassName(self):
        r"""getConcreteClassName(MocoOrientationTrackingGoal self) -> std::string const &"""
        return _moco.MocoOrientationTrackingGoal_getConcreteClassName(self)

    def __init__(self, *args):
        r"""
        __init__(MocoOrientationTrackingGoal self) -> MocoOrientationTrackingGoal
        __init__(MocoOrientationTrackingGoal self, std::string name) -> MocoOrientationTrackingGoal

        Parameters
        ----------
        name: std::string

        __init__(MocoOrientationTrackingGoal self, std::string name, double weight) -> MocoOrientationTrackingGoal

        Parameters
        ----------
        name: std::string
        weight: double

        """
        _moco.MocoOrientationTrackingGoal_swiginit(self, _moco.new_MocoOrientationTrackingGoal(*args))

    def setRotationReferenceFile(self, filepath):
        r"""
        setRotationReferenceFile(MocoOrientationTrackingGoal self, std::string const & filepath)

        Parameters
        ----------
        filepath: std::string const &

        """
        return _moco.MocoOrientationTrackingGoal_setRotationReferenceFile(self, filepath)

    def setRotationReference(self, ref):
        r"""
        setRotationReference(MocoOrientationTrackingGoal self, OpenSim::TimeSeriesTable_< OpenSim::Rotation > const & ref)

        Parameters
        ----------
        ref: OpenSim::TimeSeriesTable_< OpenSim::Rotation > const &

        """
        return _moco.MocoOrientationTrackingGoal_setRotationReference(self, ref)

    def setStatesReference(self, ref):
        r"""
        setStatesReference(MocoOrientationTrackingGoal self, TableProcessor ref)

        Parameters
        ----------
        ref: OpenSim::TableProcessor const &

        """
        return _moco.MocoOrientationTrackingGoal_setStatesReference(self, ref)

    def setFramePaths(self, paths):
        r"""
        setFramePaths(MocoOrientationTrackingGoal self, StdVectorString paths)

        Parameters
        ----------
        paths: std::vector< std::string,std::allocator< std::string > > const &

        """
        return _moco.MocoOrientationTrackingGoal_setFramePaths(self, paths)

    def setWeightForFrame(self, frameName, weight):
        r"""
        setWeightForFrame(MocoOrientationTrackingGoal self, std::string const & frameName, double const & weight)

        Parameters
        ----------
        frameName: std::string const &
        weight: double const &

        """
        return _moco.MocoOrientationTrackingGoal_setWeightForFrame(self, frameName, weight)

    def setWeightSet(self, weightSet):
        r"""
        setWeightSet(MocoOrientationTrackingGoal self, MocoWeightSet weightSet)

        Parameters
        ----------
        weightSet: OpenSim::MocoWeightSet const &

        """
        return _moco.MocoOrientationTrackingGoal_setWeightSet(self, weightSet)

    def getStatesReference(self):
        r"""getStatesReference(MocoOrientationTrackingGoal self) -> TableProcessor"""
        return _moco.MocoOrientationTrackingGoal_getStatesReference(self)

    def getRotationReferenceFile(self):
        r"""getRotationReferenceFile(MocoOrientationTrackingGoal self) -> std::string"""
        return _moco.MocoOrientationTrackingGoal_getRotationReferenceFile(self)
    __swig_destroy__ = _moco.delete_MocoOrientationTrackingGoal

# Register MocoOrientationTrackingGoal in _moco:
_moco.MocoOrientationTrackingGoal_swigregister(MocoOrientationTrackingGoal)

def MocoOrientationTrackingGoal_safeDownCast(obj):
    r"""
    MocoOrientationTrackingGoal_safeDownCast(OpenSimObject obj) -> MocoOrientationTrackingGoal

    Parameters
    ----------
    obj: OpenSim::Object *

    """
    return _moco.MocoOrientationTrackingGoal_safeDownCast(obj)

def MocoOrientationTrackingGoal_getClassName():
    r"""MocoOrientationTrackingGoal_getClassName() -> std::string const &"""
    return _moco.MocoOrientationTrackingGoal_getClassName()

class MocoTranslationTrackingGoal(MocoGoal):
    r"""Proxy of C++ OpenSim::MocoTranslationTrackingGoal class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def safeDownCast(obj):
        r"""
        safeDownCast(OpenSimObject obj) -> MocoTranslationTrackingGoal

        Parameters
        ----------
        obj: OpenSim::Object *

        """
        return _moco.MocoTranslationTrackingGoal_safeDownCast(obj)

    def assign(self, aObject):
        r"""
        assign(MocoTranslationTrackingGoal self, OpenSimObject aObject)

        Parameters
        ----------
        aObject: OpenSim::Object &

        """
        return _moco.MocoTranslationTrackingGoal_assign(self, aObject)

    @staticmethod
    def getClassName():
        r"""getClassName() -> std::string const &"""
        return _moco.MocoTranslationTrackingGoal_getClassName()

    def clone(self):
        r"""clone(MocoTranslationTrackingGoal self) -> MocoTranslationTrackingGoal"""
        return _moco.MocoTranslationTrackingGoal_clone(self)

    def getConcreteClassName(self):
        r"""getConcreteClassName(MocoTranslationTrackingGoal self) -> std::string const &"""
        return _moco.MocoTranslationTrackingGoal_getConcreteClassName(self)

    def __init__(self, *args):
        r"""
        __init__(MocoTranslationTrackingGoal self) -> MocoTranslationTrackingGoal
        __init__(MocoTranslationTrackingGoal self, std::string name) -> MocoTranslationTrackingGoal

        Parameters
        ----------
        name: std::string

        __init__(MocoTranslationTrackingGoal self, std::string name, double weight) -> MocoTranslationTrackingGoal

        Parameters
        ----------
        name: std::string
        weight: double

        """
        _moco.MocoTranslationTrackingGoal_swiginit(self, _moco.new_MocoTranslationTrackingGoal(*args))

    def setTranslationReferenceFile(self, filepath):
        r"""
        setTranslationReferenceFile(MocoTranslationTrackingGoal self, std::string const & filepath)

        Parameters
        ----------
        filepath: std::string const &

        """
        return _moco.MocoTranslationTrackingGoal_setTranslationReferenceFile(self, filepath)

    def setTranslationReference(self, ref):
        r"""
        setTranslationReference(MocoTranslationTrackingGoal self, TimeSeriesTableVec3 ref)

        Parameters
        ----------
        ref: OpenSim::TimeSeriesTableVec3 const &

        """
        return _moco.MocoTranslationTrackingGoal_setTranslationReference(self, ref)

    def setStatesReference(self, ref):
        r"""
        setStatesReference(MocoTranslationTrackingGoal self, TableProcessor ref)

        Parameters
        ----------
        ref: OpenSim::TableProcessor const &

        """
        return _moco.MocoTranslationTrackingGoal_setStatesReference(self, ref)

    def setFramePaths(self, paths):
        r"""
        setFramePaths(MocoTranslationTrackingGoal self, StdVectorString paths)

        Parameters
        ----------
        paths: std::vector< std::string,std::allocator< std::string > > const &

        """
        return _moco.MocoTranslationTrackingGoal_setFramePaths(self, paths)

    def setWeightForFrame(self, frameName, weight):
        r"""
        setWeightForFrame(MocoTranslationTrackingGoal self, std::string const & frameName, double const & weight)

        Parameters
        ----------
        frameName: std::string const &
        weight: double const &

        """
        return _moco.MocoTranslationTrackingGoal_setWeightForFrame(self, frameName, weight)

    def setWeightSet(self, weightSet):
        r"""
        setWeightSet(MocoTranslationTrackingGoal self, MocoWeightSet weightSet)

        Parameters
        ----------
        weightSet: OpenSim::MocoWeightSet const &

        """
        return _moco.MocoTranslationTrackingGoal_setWeightSet(self, weightSet)

    def getStatesReference(self):
        r"""getStatesReference(MocoTranslationTrackingGoal self) -> TableProcessor"""
        return _moco.MocoTranslationTrackingGoal_getStatesReference(self)

    def getTranslationReferenceFile(self):
        r"""getTranslationReferenceFile(MocoTranslationTrackingGoal self) -> std::string"""
        return _moco.MocoTranslationTrackingGoal_getTranslationReferenceFile(self)
    __swig_destroy__ = _moco.delete_MocoTranslationTrackingGoal

# Register MocoTranslationTrackingGoal in _moco:
_moco.MocoTranslationTrackingGoal_swigregister(MocoTranslationTrackingGoal)

def MocoTranslationTrackingGoal_safeDownCast(obj):
    r"""
    MocoTranslationTrackingGoal_safeDownCast(OpenSimObject obj) -> MocoTranslationTrackingGoal

    Parameters
    ----------
    obj: OpenSim::Object *

    """
    return _moco.MocoTranslationTrackingGoal_safeDownCast(obj)

def MocoTranslationTrackingGoal_getClassName():
    r"""MocoTranslationTrackingGoal_getClassName() -> std::string const &"""
    return _moco.MocoTranslationTrackingGoal_getClassName()

class MocoAccelerationTrackingGoal(MocoGoal):
    r"""Proxy of C++ OpenSim::MocoAccelerationTrackingGoal class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def safeDownCast(obj):
        r"""
        safeDownCast(OpenSimObject obj) -> MocoAccelerationTrackingGoal

        Parameters
        ----------
        obj: OpenSim::Object *

        """
        return _moco.MocoAccelerationTrackingGoal_safeDownCast(obj)

    def assign(self, aObject):
        r"""
        assign(MocoAccelerationTrackingGoal self, OpenSimObject aObject)

        Parameters
        ----------
        aObject: OpenSim::Object &

        """
        return _moco.MocoAccelerationTrackingGoal_assign(self, aObject)

    @staticmethod
    def getClassName():
        r"""getClassName() -> std::string const &"""
        return _moco.MocoAccelerationTrackingGoal_getClassName()

    def clone(self):
        r"""clone(MocoAccelerationTrackingGoal self) -> MocoAccelerationTrackingGoal"""
        return _moco.MocoAccelerationTrackingGoal_clone(self)

    def getConcreteClassName(self):
        r"""getConcreteClassName(MocoAccelerationTrackingGoal self) -> std::string const &"""
        return _moco.MocoAccelerationTrackingGoal_getConcreteClassName(self)

    def __init__(self, *args):
        r"""
        __init__(MocoAccelerationTrackingGoal self) -> MocoAccelerationTrackingGoal
        __init__(MocoAccelerationTrackingGoal self, std::string name) -> MocoAccelerationTrackingGoal

        Parameters
        ----------
        name: std::string

        __init__(MocoAccelerationTrackingGoal self, std::string name, double weight) -> MocoAccelerationTrackingGoal

        Parameters
        ----------
        name: std::string
        weight: double

        """
        _moco.MocoAccelerationTrackingGoal_swiginit(self, _moco.new_MocoAccelerationTrackingGoal(*args))

    def setAccelerationReferenceFile(self, filepath):
        r"""
        setAccelerationReferenceFile(MocoAccelerationTrackingGoal self, std::string const & filepath)

        Parameters
        ----------
        filepath: std::string const &

        """
        return _moco.MocoAccelerationTrackingGoal_setAccelerationReferenceFile(self, filepath)

    def setAccelerationReference(self, ref):
        r"""
        setAccelerationReference(MocoAccelerationTrackingGoal self, TimeSeriesTableVec3 ref)

        Parameters
        ----------
        ref: OpenSim::TimeSeriesTableVec3 const &

        """
        return _moco.MocoAccelerationTrackingGoal_setAccelerationReference(self, ref)

    def setFramePaths(self, paths):
        r"""
        setFramePaths(MocoAccelerationTrackingGoal self, StdVectorString paths)

        Parameters
        ----------
        paths: std::vector< std::string,std::allocator< std::string > > const &

        """
        return _moco.MocoAccelerationTrackingGoal_setFramePaths(self, paths)

    def setWeightForFrame(self, frameName, weight):
        r"""
        setWeightForFrame(MocoAccelerationTrackingGoal self, std::string const & frameName, double const & weight)

        Parameters
        ----------
        frameName: std::string const &
        weight: double const &

        """
        return _moco.MocoAccelerationTrackingGoal_setWeightForFrame(self, frameName, weight)

    def setWeightSet(self, weightSet):
        r"""
        setWeightSet(MocoAccelerationTrackingGoal self, MocoWeightSet weightSet)

        Parameters
        ----------
        weightSet: OpenSim::MocoWeightSet const &

        """
        return _moco.MocoAccelerationTrackingGoal_setWeightSet(self, weightSet)

    def getAccelerationReferenceFile(self):
        r"""getAccelerationReferenceFile(MocoAccelerationTrackingGoal self) -> std::string"""
        return _moco.MocoAccelerationTrackingGoal_getAccelerationReferenceFile(self)

    def setGravityOffset(self, tf):
        r"""
        setGravityOffset(MocoAccelerationTrackingGoal self, bool tf)

        Parameters
        ----------
        tf: bool

        """
        return _moco.MocoAccelerationTrackingGoal_setGravityOffset(self, tf)

    def getGravityOffset(self):
        r"""getGravityOffset(MocoAccelerationTrackingGoal self) -> bool"""
        return _moco.MocoAccelerationTrackingGoal_getGravityOffset(self)

    def setExpressAccelerationsInTrackingFrames(self, tf):
        r"""
        setExpressAccelerationsInTrackingFrames(MocoAccelerationTrackingGoal self, bool tf)

        Parameters
        ----------
        tf: bool

        """
        return _moco.MocoAccelerationTrackingGoal_setExpressAccelerationsInTrackingFrames(self, tf)

    def getExpressAccelerationsInTrackingFrames(self):
        r"""getExpressAccelerationsInTrackingFrames(MocoAccelerationTrackingGoal self) -> bool"""
        return _moco.MocoAccelerationTrackingGoal_getExpressAccelerationsInTrackingFrames(self)
    __swig_destroy__ = _moco.delete_MocoAccelerationTrackingGoal

# Register MocoAccelerationTrackingGoal in _moco:
_moco.MocoAccelerationTrackingGoal_swigregister(MocoAccelerationTrackingGoal)

def MocoAccelerationTrackingGoal_safeDownCast(obj):
    r"""
    MocoAccelerationTrackingGoal_safeDownCast(OpenSimObject obj) -> MocoAccelerationTrackingGoal

    Parameters
    ----------
    obj: OpenSim::Object *

    """
    return _moco.MocoAccelerationTrackingGoal_safeDownCast(obj)

def MocoAccelerationTrackingGoal_getClassName():
    r"""MocoAccelerationTrackingGoal_getClassName() -> std::string const &"""
    return _moco.MocoAccelerationTrackingGoal_getClassName()

class MocoOutputGoal(MocoGoal):
    r"""Proxy of C++ OpenSim::MocoOutputGoal class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def safeDownCast(obj):
        r"""
        safeDownCast(OpenSimObject obj) -> MocoOutputGoal

        Parameters
        ----------
        obj: OpenSim::Object *

        """
        return _moco.MocoOutputGoal_safeDownCast(obj)

    def assign(self, aObject):
        r"""
        assign(MocoOutputGoal self, OpenSimObject aObject)

        Parameters
        ----------
        aObject: OpenSim::Object &

        """
        return _moco.MocoOutputGoal_assign(self, aObject)

    @staticmethod
    def getClassName():
        r"""getClassName() -> std::string const &"""
        return _moco.MocoOutputGoal_getClassName()

    def clone(self):
        r"""clone(MocoOutputGoal self) -> MocoOutputGoal"""
        return _moco.MocoOutputGoal_clone(self)

    def getConcreteClassName(self):
        r"""getConcreteClassName(MocoOutputGoal self) -> std::string const &"""
        return _moco.MocoOutputGoal_getConcreteClassName(self)

    def __init__(self, *args):
        r"""
        __init__(MocoOutputGoal self) -> MocoOutputGoal
        __init__(MocoOutputGoal self, std::string name) -> MocoOutputGoal

        Parameters
        ----------
        name: std::string

        __init__(MocoOutputGoal self, std::string name, double weight) -> MocoOutputGoal

        Parameters
        ----------
        name: std::string
        weight: double

        """
        _moco.MocoOutputGoal_swiginit(self, _moco.new_MocoOutputGoal(*args))

    def setOutputPath(self, path):
        r"""
        setOutputPath(MocoOutputGoal self, std::string path)

        Parameters
        ----------
        path: std::string

        """
        return _moco.MocoOutputGoal_setOutputPath(self, path)

    def getOutputPath(self):
        r"""getOutputPath(MocoOutputGoal self) -> std::string const &"""
        return _moco.MocoOutputGoal_getOutputPath(self)

    def setDivideByDisplacement(self, tf):
        r"""
        setDivideByDisplacement(MocoOutputGoal self, bool tf)

        Parameters
        ----------
        tf: bool

        """
        return _moco.MocoOutputGoal_setDivideByDisplacement(self, tf)

    def getDivideByDisplacement(self):
        r"""getDivideByDisplacement(MocoOutputGoal self) -> bool"""
        return _moco.MocoOutputGoal_getDivideByDisplacement(self)

    def setDivideByMass(self, tf):
        r"""
        setDivideByMass(MocoOutputGoal self, bool tf)

        Parameters
        ----------
        tf: bool

        """
        return _moco.MocoOutputGoal_setDivideByMass(self, tf)

    def getDivideByMass(self):
        r"""getDivideByMass(MocoOutputGoal self) -> bool"""
        return _moco.MocoOutputGoal_getDivideByMass(self)
    __swig_destroy__ = _moco.delete_MocoOutputGoal

# Register MocoOutputGoal in _moco:
_moco.MocoOutputGoal_swigregister(MocoOutputGoal)

def MocoOutputGoal_safeDownCast(obj):
    r"""
    MocoOutputGoal_safeDownCast(OpenSimObject obj) -> MocoOutputGoal

    Parameters
    ----------
    obj: OpenSim::Object *

    """
    return _moco.MocoOutputGoal_safeDownCast(obj)

def MocoOutputGoal_getClassName():
    r"""MocoOutputGoal_getClassName() -> std::string const &"""
    return _moco.MocoOutputGoal_getClassName()

class MocoPeriodicityGoalPair(opensim.common.OpenSimObject):
    r"""Proxy of C++ OpenSim::MocoPeriodicityGoalPair class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def safeDownCast(obj):
        r"""
        safeDownCast(OpenSimObject obj) -> MocoPeriodicityGoalPair

        Parameters
        ----------
        obj: OpenSim::Object *

        """
        return _moco.MocoPeriodicityGoalPair_safeDownCast(obj)

    def assign(self, aObject):
        r"""
        assign(MocoPeriodicityGoalPair self, OpenSimObject aObject)

        Parameters
        ----------
        aObject: OpenSim::Object &

        """
        return _moco.MocoPeriodicityGoalPair_assign(self, aObject)

    @staticmethod
    def getClassName():
        r"""getClassName() -> std::string const &"""
        return _moco.MocoPeriodicityGoalPair_getClassName()

    def clone(self):
        r"""clone(MocoPeriodicityGoalPair self) -> MocoPeriodicityGoalPair"""
        return _moco.MocoPeriodicityGoalPair_clone(self)

    def getConcreteClassName(self):
        r"""getConcreteClassName(MocoPeriodicityGoalPair self) -> std::string const &"""
        return _moco.MocoPeriodicityGoalPair_getConcreteClassName(self)

    def copyProperty_initial_variable(self, source):
        r"""
        copyProperty_initial_variable(MocoPeriodicityGoalPair self, MocoPeriodicityGoalPair source)

        Parameters
        ----------
        source: OpenSim::MocoPeriodicityGoalPair::Self const &

        """
        return _moco.MocoPeriodicityGoalPair_copyProperty_initial_variable(self, source)

    def append_initial_variable(self, value):
        r"""
        append_initial_variable(MocoPeriodicityGoalPair self, std::string const & value) -> int

        Parameters
        ----------
        value: std::string const &

        """
        return _moco.MocoPeriodicityGoalPair_append_initial_variable(self, value)

    def constructProperty_initial_variable(self, initValue):
        r"""
        constructProperty_initial_variable(MocoPeriodicityGoalPair self, std::string const & initValue)

        Parameters
        ----------
        initValue: std::string const &

        """
        return _moco.MocoPeriodicityGoalPair_constructProperty_initial_variable(self, initValue)

    def get_initial_variable(self, *args):
        r"""
        get_initial_variable(MocoPeriodicityGoalPair self, int i) -> std::string const

        Parameters
        ----------
        i: int

        get_initial_variable(MocoPeriodicityGoalPair self) -> std::string const &
        """
        return _moco.MocoPeriodicityGoalPair_get_initial_variable(self, *args)

    def upd_initial_variable(self, *args):
        r"""
        upd_initial_variable(MocoPeriodicityGoalPair self, int i) -> std::string

        Parameters
        ----------
        i: int

        upd_initial_variable(MocoPeriodicityGoalPair self) -> std::string &
        """
        return _moco.MocoPeriodicityGoalPair_upd_initial_variable(self, *args)

    def set_initial_variable(self, *args):
        r"""
        set_initial_variable(MocoPeriodicityGoalPair self, int i, std::string const & value)

        Parameters
        ----------
        i: int
        value: std::string const &

        set_initial_variable(MocoPeriodicityGoalPair self, std::string const & value)

        Parameters
        ----------
        value: std::string const &

        """
        return _moco.MocoPeriodicityGoalPair_set_initial_variable(self, *args)

    def copyProperty_final_variable(self, source):
        r"""
        copyProperty_final_variable(MocoPeriodicityGoalPair self, MocoPeriodicityGoalPair source)

        Parameters
        ----------
        source: OpenSim::MocoPeriodicityGoalPair::Self const &

        """
        return _moco.MocoPeriodicityGoalPair_copyProperty_final_variable(self, source)

    def append_final_variable(self, value):
        r"""
        append_final_variable(MocoPeriodicityGoalPair self, std::string const & value) -> int

        Parameters
        ----------
        value: std::string const &

        """
        return _moco.MocoPeriodicityGoalPair_append_final_variable(self, value)

    def constructProperty_final_variable(self, initValue):
        r"""
        constructProperty_final_variable(MocoPeriodicityGoalPair self, std::string const & initValue)

        Parameters
        ----------
        initValue: std::string const &

        """
        return _moco.MocoPeriodicityGoalPair_constructProperty_final_variable(self, initValue)

    def get_final_variable(self, *args):
        r"""
        get_final_variable(MocoPeriodicityGoalPair self, int i) -> std::string const

        Parameters
        ----------
        i: int

        get_final_variable(MocoPeriodicityGoalPair self) -> std::string const &
        """
        return _moco.MocoPeriodicityGoalPair_get_final_variable(self, *args)

    def upd_final_variable(self, *args):
        r"""
        upd_final_variable(MocoPeriodicityGoalPair self, int i) -> std::string

        Parameters
        ----------
        i: int

        upd_final_variable(MocoPeriodicityGoalPair self) -> std::string &
        """
        return _moco.MocoPeriodicityGoalPair_upd_final_variable(self, *args)

    def set_final_variable(self, *args):
        r"""
        set_final_variable(MocoPeriodicityGoalPair self, int i, std::string const & value)

        Parameters
        ----------
        i: int
        value: std::string const &

        set_final_variable(MocoPeriodicityGoalPair self, std::string const & value)

        Parameters
        ----------
        value: std::string const &

        """
        return _moco.MocoPeriodicityGoalPair_set_final_variable(self, *args)

    def copyProperty_negate(self, source):
        r"""
        copyProperty_negate(MocoPeriodicityGoalPair self, MocoPeriodicityGoalPair source)

        Parameters
        ----------
        source: OpenSim::MocoPeriodicityGoalPair::Self const &

        """
        return _moco.MocoPeriodicityGoalPair_copyProperty_negate(self, source)

    def append_negate(self, value):
        r"""
        append_negate(MocoPeriodicityGoalPair self, bool const & value) -> int

        Parameters
        ----------
        value: bool const &

        """
        return _moco.MocoPeriodicityGoalPair_append_negate(self, value)

    def constructProperty_negate(self, initValue):
        r"""
        constructProperty_negate(MocoPeriodicityGoalPair self, bool const & initValue)

        Parameters
        ----------
        initValue: bool const &

        """
        return _moco.MocoPeriodicityGoalPair_constructProperty_negate(self, initValue)

    def get_negate(self, *args):
        r"""
        get_negate(MocoPeriodicityGoalPair self, int i) -> bool const

        Parameters
        ----------
        i: int

        get_negate(MocoPeriodicityGoalPair self) -> bool const &
        """
        return _moco.MocoPeriodicityGoalPair_get_negate(self, *args)

    def upd_negate(self, *args):
        r"""
        upd_negate(MocoPeriodicityGoalPair self, int i) -> bool

        Parameters
        ----------
        i: int

        upd_negate(MocoPeriodicityGoalPair self) -> bool &
        """
        return _moco.MocoPeriodicityGoalPair_upd_negate(self, *args)

    def set_negate(self, *args):
        r"""
        set_negate(MocoPeriodicityGoalPair self, int i, bool const & value)

        Parameters
        ----------
        i: int
        value: bool const &

        set_negate(MocoPeriodicityGoalPair self, bool const & value)

        Parameters
        ----------
        value: bool const &

        """
        return _moco.MocoPeriodicityGoalPair_set_negate(self, *args)

    def __init__(self, *args):
        r"""
        __init__(MocoPeriodicityGoalPair self) -> MocoPeriodicityGoalPair
        __init__(MocoPeriodicityGoalPair self, std::string initialVariable, std::string finalVariable) -> MocoPeriodicityGoalPair

        Parameters
        ----------
        initialVariable: std::string
        finalVariable: std::string

        __init__(MocoPeriodicityGoalPair self, std::string initialVariableIsFinalVariable) -> MocoPeriodicityGoalPair

        Parameters
        ----------
        initialVariableIsFinalVariable: std::string

        """
        _moco.MocoPeriodicityGoalPair_swiginit(self, _moco.new_MocoPeriodicityGoalPair(*args))
    __swig_destroy__ = _moco.delete_MocoPeriodicityGoalPair

# Register MocoPeriodicityGoalPair in _moco:
_moco.MocoPeriodicityGoalPair_swigregister(MocoPeriodicityGoalPair)

def MocoPeriodicityGoalPair_safeDownCast(obj):
    r"""
    MocoPeriodicityGoalPair_safeDownCast(OpenSimObject obj) -> MocoPeriodicityGoalPair

    Parameters
    ----------
    obj: OpenSim::Object *

    """
    return _moco.MocoPeriodicityGoalPair_safeDownCast(obj)

def MocoPeriodicityGoalPair_getClassName():
    r"""MocoPeriodicityGoalPair_getClassName() -> std::string const &"""
    return _moco.MocoPeriodicityGoalPair_getClassName()

class MocoPeriodicityGoal(MocoGoal):
    r"""Proxy of C++ OpenSim::MocoPeriodicityGoal class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def safeDownCast(obj):
        r"""
        safeDownCast(OpenSimObject obj) -> MocoPeriodicityGoal

        Parameters
        ----------
        obj: OpenSim::Object *

        """
        return _moco.MocoPeriodicityGoal_safeDownCast(obj)

    def assign(self, aObject):
        r"""
        assign(MocoPeriodicityGoal self, OpenSimObject aObject)

        Parameters
        ----------
        aObject: OpenSim::Object &

        """
        return _moco.MocoPeriodicityGoal_assign(self, aObject)

    @staticmethod
    def getClassName():
        r"""getClassName() -> std::string const &"""
        return _moco.MocoPeriodicityGoal_getClassName()

    def clone(self):
        r"""clone(MocoPeriodicityGoal self) -> MocoPeriodicityGoal"""
        return _moco.MocoPeriodicityGoal_clone(self)

    def getConcreteClassName(self):
        r"""getConcreteClassName(MocoPeriodicityGoal self) -> std::string const &"""
        return _moco.MocoPeriodicityGoal_getConcreteClassName(self)

    def __init__(self, *args):
        r"""
        __init__(MocoPeriodicityGoal self) -> MocoPeriodicityGoal
        __init__(MocoPeriodicityGoal self, std::string name) -> MocoPeriodicityGoal

        Parameters
        ----------
        name: std::string

        """
        _moco.MocoPeriodicityGoal_swiginit(self, _moco.new_MocoPeriodicityGoal(*args))

    def addStatePair(self, pair):
        r"""
        addStatePair(MocoPeriodicityGoal self, MocoPeriodicityGoalPair pair)

        Parameters
        ----------
        pair: OpenSim::MocoPeriodicityGoalPair

        """
        return _moco.MocoPeriodicityGoal_addStatePair(self, pair)

    def addNegatedStatePair(self, pair):
        r"""
        addNegatedStatePair(MocoPeriodicityGoal self, MocoPeriodicityGoalPair pair)

        Parameters
        ----------
        pair: OpenSim::MocoPeriodicityGoalPair

        """
        return _moco.MocoPeriodicityGoal_addNegatedStatePair(self, pair)

    def addControlPair(self, pair):
        r"""
        addControlPair(MocoPeriodicityGoal self, MocoPeriodicityGoalPair pair)

        Parameters
        ----------
        pair: OpenSim::MocoPeriodicityGoalPair

        """
        return _moco.MocoPeriodicityGoal_addControlPair(self, pair)

    def addNegatedControlPair(self, pair):
        r"""
        addNegatedControlPair(MocoPeriodicityGoal self, MocoPeriodicityGoalPair pair)

        Parameters
        ----------
        pair: OpenSim::MocoPeriodicityGoalPair

        """
        return _moco.MocoPeriodicityGoal_addNegatedControlPair(self, pair)
    __swig_destroy__ = _moco.delete_MocoPeriodicityGoal

# Register MocoPeriodicityGoal in _moco:
_moco.MocoPeriodicityGoal_swigregister(MocoPeriodicityGoal)

def MocoPeriodicityGoal_safeDownCast(obj):
    r"""
    MocoPeriodicityGoal_safeDownCast(OpenSimObject obj) -> MocoPeriodicityGoal

    Parameters
    ----------
    obj: OpenSim::Object *

    """
    return _moco.MocoPeriodicityGoal_safeDownCast(obj)

def MocoPeriodicityGoal_getClassName():
    r"""MocoPeriodicityGoal_getClassName() -> std::string const &"""
    return _moco.MocoPeriodicityGoal_getClassName()

class MocoInitialForceEquilibriumDGFGoal(MocoGoal):
    r"""Proxy of C++ OpenSim::MocoInitialForceEquilibriumDGFGoal class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def safeDownCast(obj):
        r"""
        safeDownCast(OpenSimObject obj) -> MocoInitialForceEquilibriumDGFGoal

        Parameters
        ----------
        obj: OpenSim::Object *

        """
        return _moco.MocoInitialForceEquilibriumDGFGoal_safeDownCast(obj)

    def assign(self, aObject):
        r"""
        assign(MocoInitialForceEquilibriumDGFGoal self, OpenSimObject aObject)

        Parameters
        ----------
        aObject: OpenSim::Object &

        """
        return _moco.MocoInitialForceEquilibriumDGFGoal_assign(self, aObject)

    @staticmethod
    def getClassName():
        r"""getClassName() -> std::string const &"""
        return _moco.MocoInitialForceEquilibriumDGFGoal_getClassName()

    def clone(self):
        r"""clone(MocoInitialForceEquilibriumDGFGoal self) -> MocoInitialForceEquilibriumDGFGoal"""
        return _moco.MocoInitialForceEquilibriumDGFGoal_clone(self)

    def getConcreteClassName(self):
        r"""getConcreteClassName(MocoInitialForceEquilibriumDGFGoal self) -> std::string const &"""
        return _moco.MocoInitialForceEquilibriumDGFGoal_getConcreteClassName(self)

    def __init__(self, *args):
        r"""
        __init__(MocoInitialForceEquilibriumDGFGoal self) -> MocoInitialForceEquilibriumDGFGoal
        __init__(MocoInitialForceEquilibriumDGFGoal self, std::string name) -> MocoInitialForceEquilibriumDGFGoal

        Parameters
        ----------
        name: std::string

        """
        _moco.MocoInitialForceEquilibriumDGFGoal_swiginit(self, _moco.new_MocoInitialForceEquilibriumDGFGoal(*args))
    __swig_destroy__ = _moco.delete_MocoInitialForceEquilibriumDGFGoal

# Register MocoInitialForceEquilibriumDGFGoal in _moco:
_moco.MocoInitialForceEquilibriumDGFGoal_swigregister(MocoInitialForceEquilibriumDGFGoal)

def MocoInitialForceEquilibriumDGFGoal_safeDownCast(obj):
    r"""
    MocoInitialForceEquilibriumDGFGoal_safeDownCast(OpenSimObject obj) -> MocoInitialForceEquilibriumDGFGoal

    Parameters
    ----------
    obj: OpenSim::Object *

    """
    return _moco.MocoInitialForceEquilibriumDGFGoal_safeDownCast(obj)

def MocoInitialForceEquilibriumDGFGoal_getClassName():
    r"""MocoInitialForceEquilibriumDGFGoal_getClassName() -> std::string const &"""
    return _moco.MocoInitialForceEquilibriumDGFGoal_getClassName()

class MocoInitialVelocityEquilibriumDGFGoal(MocoGoal):
    r"""Proxy of C++ OpenSim::MocoInitialVelocityEquilibriumDGFGoal class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def safeDownCast(obj):
        r"""
        safeDownCast(OpenSimObject obj) -> MocoInitialVelocityEquilibriumDGFGoal

        Parameters
        ----------
        obj: OpenSim::Object *

        """
        return _moco.MocoInitialVelocityEquilibriumDGFGoal_safeDownCast(obj)

    def assign(self, aObject):
        r"""
        assign(MocoInitialVelocityEquilibriumDGFGoal self, OpenSimObject aObject)

        Parameters
        ----------
        aObject: OpenSim::Object &

        """
        return _moco.MocoInitialVelocityEquilibriumDGFGoal_assign(self, aObject)

    @staticmethod
    def getClassName():
        r"""getClassName() -> std::string const &"""
        return _moco.MocoInitialVelocityEquilibriumDGFGoal_getClassName()

    def clone(self):
        r"""clone(MocoInitialVelocityEquilibriumDGFGoal self) -> MocoInitialVelocityEquilibriumDGFGoal"""
        return _moco.MocoInitialVelocityEquilibriumDGFGoal_clone(self)

    def getConcreteClassName(self):
        r"""getConcreteClassName(MocoInitialVelocityEquilibriumDGFGoal self) -> std::string const &"""
        return _moco.MocoInitialVelocityEquilibriumDGFGoal_getConcreteClassName(self)

    def __init__(self, *args):
        r"""
        __init__(MocoInitialVelocityEquilibriumDGFGoal self) -> MocoInitialVelocityEquilibriumDGFGoal
        __init__(MocoInitialVelocityEquilibriumDGFGoal self, std::string name) -> MocoInitialVelocityEquilibriumDGFGoal

        Parameters
        ----------
        name: std::string

        """
        _moco.MocoInitialVelocityEquilibriumDGFGoal_swiginit(self, _moco.new_MocoInitialVelocityEquilibriumDGFGoal(*args))
    __swig_destroy__ = _moco.delete_MocoInitialVelocityEquilibriumDGFGoal

# Register MocoInitialVelocityEquilibriumDGFGoal in _moco:
_moco.MocoInitialVelocityEquilibriumDGFGoal_swigregister(MocoInitialVelocityEquilibriumDGFGoal)

def MocoInitialVelocityEquilibriumDGFGoal_safeDownCast(obj):
    r"""
    MocoInitialVelocityEquilibriumDGFGoal_safeDownCast(OpenSimObject obj) -> MocoInitialVelocityEquilibriumDGFGoal

    Parameters
    ----------
    obj: OpenSim::Object *

    """
    return _moco.MocoInitialVelocityEquilibriumDGFGoal_safeDownCast(obj)

def MocoInitialVelocityEquilibriumDGFGoal_getClassName():
    r"""MocoInitialVelocityEquilibriumDGFGoal_getClassName() -> std::string const &"""
    return _moco.MocoInitialVelocityEquilibriumDGFGoal_getClassName()

class MocoBounds(opensim.common.OpenSimObject):
    r"""Proxy of C++ OpenSim::MocoBounds class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def safeDownCast(obj):
        r"""
        safeDownCast(OpenSimObject obj) -> MocoBounds

        Parameters
        ----------
        obj: OpenSim::Object *

        """
        return _moco.MocoBounds_safeDownCast(obj)

    def assign(self, aObject):
        r"""
        assign(MocoBounds self, OpenSimObject aObject)

        Parameters
        ----------
        aObject: OpenSim::Object &

        """
        return _moco.MocoBounds_assign(self, aObject)

    @staticmethod
    def getClassName():
        r"""getClassName() -> std::string const &"""
        return _moco.MocoBounds_getClassName()

    def clone(self):
        r"""clone(MocoBounds self) -> MocoBounds"""
        return _moco.MocoBounds_clone(self)

    def getConcreteClassName(self):
        r"""getConcreteClassName(MocoBounds self) -> std::string const &"""
        return _moco.MocoBounds_getConcreteClassName(self)

    def __init__(self, *args):
        r"""
        __init__(MocoBounds self) -> MocoBounds
        __init__(MocoBounds self, double value) -> MocoBounds

        Parameters
        ----------
        value: double

        __init__(MocoBounds self, double lower, double upper) -> MocoBounds

        Parameters
        ----------
        lower: double
        upper: double

        """
        _moco.MocoBounds_swiginit(self, _moco.new_MocoBounds(*args))

    @staticmethod
    def unconstrained():
        r"""unconstrained() -> MocoBounds"""
        return _moco.MocoBounds_unconstrained()

    def isSet(self):
        r"""isSet(MocoBounds self) -> bool"""
        return _moco.MocoBounds_isSet(self)

    def isEquality(self):
        r"""isEquality(MocoBounds self) -> bool"""
        return _moco.MocoBounds_isEquality(self)

    def isWithinBounds(self, value):
        r"""
        isWithinBounds(MocoBounds self, double const & value) -> bool

        Parameters
        ----------
        value: double const &

        """
        return _moco.MocoBounds_isWithinBounds(self, value)

    def getLower(self):
        r"""getLower(MocoBounds self) -> double"""
        return _moco.MocoBounds_getLower(self)

    def getUpper(self):
        r"""getUpper(MocoBounds self) -> double"""
        return _moco.MocoBounds_getUpper(self)

    def getAsArray(self):
        r"""getAsArray(MocoBounds self) -> ArrayDouble"""
        return _moco.MocoBounds_getAsArray(self)
    __swig_destroy__ = _moco.delete_MocoBounds

# Register MocoBounds in _moco:
_moco.MocoBounds_swigregister(MocoBounds)

def MocoBounds_safeDownCast(obj):
    r"""
    MocoBounds_safeDownCast(OpenSimObject obj) -> MocoBounds

    Parameters
    ----------
    obj: OpenSim::Object *

    """
    return _moco.MocoBounds_safeDownCast(obj)

def MocoBounds_getClassName():
    r"""MocoBounds_getClassName() -> std::string const &"""
    return _moco.MocoBounds_getClassName()

def MocoBounds_unconstrained():
    r"""MocoBounds_unconstrained() -> MocoBounds"""
    return _moco.MocoBounds_unconstrained()


def __lshift__(stream, bounds):
    r"""
    __lshift__(std::ostream & stream, MocoBounds bounds) -> std::ostream &

    Parameters
    ----------
    stream: std::ostream &
    bounds: OpenSim::MocoBounds const &

    """
    return _moco.__lshift__(stream, bounds)
class MocoInitialBounds(MocoBounds):
    r"""Proxy of C++ OpenSim::MocoInitialBounds class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def safeDownCast(obj):
        r"""
        safeDownCast(OpenSimObject obj) -> MocoInitialBounds

        Parameters
        ----------
        obj: OpenSim::Object *

        """
        return _moco.MocoInitialBounds_safeDownCast(obj)

    def assign(self, aObject):
        r"""
        assign(MocoInitialBounds self, OpenSimObject aObject)

        Parameters
        ----------
        aObject: OpenSim::Object &

        """
        return _moco.MocoInitialBounds_assign(self, aObject)

    @staticmethod
    def getClassName():
        r"""getClassName() -> std::string const &"""
        return _moco.MocoInitialBounds_getClassName()

    def clone(self):
        r"""clone(MocoInitialBounds self) -> MocoInitialBounds"""
        return _moco.MocoInitialBounds_clone(self)

    def getConcreteClassName(self):
        r"""getConcreteClassName(MocoInitialBounds self) -> std::string const &"""
        return _moco.MocoInitialBounds_getConcreteClassName(self)

    def __init__(self, *args):
        r"""
        __init__(MocoInitialBounds self) -> MocoInitialBounds
        __init__(MocoInitialBounds self, double value) -> MocoInitialBounds

        Parameters
        ----------
        value: double

        __init__(MocoInitialBounds self, double lower, double upper) -> MocoInitialBounds

        Parameters
        ----------
        lower: double
        upper: double

        """
        _moco.MocoInitialBounds_swiginit(self, _moco.new_MocoInitialBounds(*args))
    __swig_destroy__ = _moco.delete_MocoInitialBounds

# Register MocoInitialBounds in _moco:
_moco.MocoInitialBounds_swigregister(MocoInitialBounds)

def MocoInitialBounds_safeDownCast(obj):
    r"""
    MocoInitialBounds_safeDownCast(OpenSimObject obj) -> MocoInitialBounds

    Parameters
    ----------
    obj: OpenSim::Object *

    """
    return _moco.MocoInitialBounds_safeDownCast(obj)

def MocoInitialBounds_getClassName():
    r"""MocoInitialBounds_getClassName() -> std::string const &"""
    return _moco.MocoInitialBounds_getClassName()

class MocoFinalBounds(MocoBounds):
    r"""Proxy of C++ OpenSim::MocoFinalBounds class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def safeDownCast(obj):
        r"""
        safeDownCast(OpenSimObject obj) -> MocoFinalBounds

        Parameters
        ----------
        obj: OpenSim::Object *

        """
        return _moco.MocoFinalBounds_safeDownCast(obj)

    def assign(self, aObject):
        r"""
        assign(MocoFinalBounds self, OpenSimObject aObject)

        Parameters
        ----------
        aObject: OpenSim::Object &

        """
        return _moco.MocoFinalBounds_assign(self, aObject)

    @staticmethod
    def getClassName():
        r"""getClassName() -> std::string const &"""
        return _moco.MocoFinalBounds_getClassName()

    def clone(self):
        r"""clone(MocoFinalBounds self) -> MocoFinalBounds"""
        return _moco.MocoFinalBounds_clone(self)

    def getConcreteClassName(self):
        r"""getConcreteClassName(MocoFinalBounds self) -> std::string const &"""
        return _moco.MocoFinalBounds_getConcreteClassName(self)

    def __init__(self, *args):
        r"""
        __init__(MocoFinalBounds self) -> MocoFinalBounds
        __init__(MocoFinalBounds self, double value) -> MocoFinalBounds

        Parameters
        ----------
        value: double

        __init__(MocoFinalBounds self, double lower, double upper) -> MocoFinalBounds

        Parameters
        ----------
        lower: double
        upper: double

        """
        _moco.MocoFinalBounds_swiginit(self, _moco.new_MocoFinalBounds(*args))
    __swig_destroy__ = _moco.delete_MocoFinalBounds

# Register MocoFinalBounds in _moco:
_moco.MocoFinalBounds_swigregister(MocoFinalBounds)

def MocoFinalBounds_safeDownCast(obj):
    r"""
    MocoFinalBounds_safeDownCast(OpenSimObject obj) -> MocoFinalBounds

    Parameters
    ----------
    obj: OpenSim::Object *

    """
    return _moco.MocoFinalBounds_safeDownCast(obj)

def MocoFinalBounds_getClassName():
    r"""MocoFinalBounds_getClassName() -> std::string const &"""
    return _moco.MocoFinalBounds_getClassName()

class MocoVariableInfo(opensim.common.OpenSimObject):
    r"""Proxy of C++ OpenSim::MocoVariableInfo class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def safeDownCast(obj):
        r"""
        safeDownCast(OpenSimObject obj) -> MocoVariableInfo

        Parameters
        ----------
        obj: OpenSim::Object *

        """
        return _moco.MocoVariableInfo_safeDownCast(obj)

    def assign(self, aObject):
        r"""
        assign(MocoVariableInfo self, OpenSimObject aObject)

        Parameters
        ----------
        aObject: OpenSim::Object &

        """
        return _moco.MocoVariableInfo_assign(self, aObject)

    @staticmethod
    def getClassName():
        r"""getClassName() -> std::string const &"""
        return _moco.MocoVariableInfo_getClassName()

    def clone(self):
        r"""clone(MocoVariableInfo self) -> MocoVariableInfo"""
        return _moco.MocoVariableInfo_clone(self)

    def getConcreteClassName(self):
        r"""getConcreteClassName(MocoVariableInfo self) -> std::string const &"""
        return _moco.MocoVariableInfo_getConcreteClassName(self)

    def __init__(self, *args):
        r"""
        __init__(MocoVariableInfo self) -> MocoVariableInfo
        __init__(MocoVariableInfo self, std::string const & name, MocoBounds arg3, MocoInitialBounds arg4, MocoFinalBounds arg5) -> MocoVariableInfo

        Parameters
        ----------
        name: std::string const &
        arg3: OpenSim::MocoBounds const &
        arg4: OpenSim::MocoInitialBounds const &
        arg5: OpenSim::MocoFinalBounds const &

        """
        _moco.MocoVariableInfo_swiginit(self, _moco.new_MocoVariableInfo(*args))

    def getBounds(self):
        r"""getBounds(MocoVariableInfo self) -> MocoBounds"""
        return _moco.MocoVariableInfo_getBounds(self)

    def getInitialBounds(self):
        r"""getInitialBounds(MocoVariableInfo self) -> MocoInitialBounds"""
        return _moco.MocoVariableInfo_getInitialBounds(self)

    def getFinalBounds(self):
        r"""getFinalBounds(MocoVariableInfo self) -> MocoFinalBounds"""
        return _moco.MocoVariableInfo_getFinalBounds(self)

    def setBounds(self, bounds):
        r"""
        setBounds(MocoVariableInfo self, MocoBounds bounds)

        Parameters
        ----------
        bounds: OpenSim::MocoBounds const &

        """
        return _moco.MocoVariableInfo_setBounds(self, bounds)

    def setInitialBounds(self, bounds):
        r"""
        setInitialBounds(MocoVariableInfo self, MocoInitialBounds bounds)

        Parameters
        ----------
        bounds: OpenSim::MocoInitialBounds const &

        """
        return _moco.MocoVariableInfo_setInitialBounds(self, bounds)

    def setFinalBounds(self, bounds):
        r"""
        setFinalBounds(MocoVariableInfo self, MocoFinalBounds bounds)

        Parameters
        ----------
        bounds: OpenSim::MocoFinalBounds const &

        """
        return _moco.MocoVariableInfo_setFinalBounds(self, bounds)

    def validate(self):
        r"""validate(MocoVariableInfo self)"""
        return _moco.MocoVariableInfo_validate(self)

    def printDescription(self):
        r"""printDescription(MocoVariableInfo self)"""
        return _moco.MocoVariableInfo_printDescription(self)
    __swig_destroy__ = _moco.delete_MocoVariableInfo

# Register MocoVariableInfo in _moco:
_moco.MocoVariableInfo_swigregister(MocoVariableInfo)

def MocoVariableInfo_safeDownCast(obj):
    r"""
    MocoVariableInfo_safeDownCast(OpenSimObject obj) -> MocoVariableInfo

    Parameters
    ----------
    obj: OpenSim::Object *

    """
    return _moco.MocoVariableInfo_safeDownCast(obj)

def MocoVariableInfo_getClassName():
    r"""MocoVariableInfo_getClassName() -> std::string const &"""
    return _moco.MocoVariableInfo_getClassName()

class MocoKinematicConstraint(object):
    r"""Proxy of C++ OpenSim::MocoKinematicConstraint class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def getConstraintInfo(self):
        r"""getConstraintInfo(MocoKinematicConstraint self) -> MocoConstraintInfo const &"""
        return _moco.MocoKinematicConstraint_getConstraintInfo(self)

    def setConstraintInfo(self, cInfo):
        r"""
        setConstraintInfo(MocoKinematicConstraint self, MocoConstraintInfo const & cInfo)

        Parameters
        ----------
        cInfo: MocoConstraintInfo const &

        """
        return _moco.MocoKinematicConstraint_setConstraintInfo(self, cInfo)

    def getSimbodyConstraintIndex(self):
        r"""getSimbodyConstraintIndex(MocoKinematicConstraint self) -> SimTK::ConstraintIndex"""
        return _moco.MocoKinematicConstraint_getSimbodyConstraintIndex(self)

    def getNumPositionEquations(self):
        r"""getNumPositionEquations(MocoKinematicConstraint self) -> int"""
        return _moco.MocoKinematicConstraint_getNumPositionEquations(self)

    def getNumVelocityEquations(self):
        r"""getNumVelocityEquations(MocoKinematicConstraint self) -> int"""
        return _moco.MocoKinematicConstraint_getNumVelocityEquations(self)

    def getNumAccelerationEquations(self):
        r"""getNumAccelerationEquations(MocoKinematicConstraint self) -> int"""
        return _moco.MocoKinematicConstraint_getNumAccelerationEquations(self)

    def getKinematicLevels(self):
        r"""getKinematicLevels(MocoKinematicConstraint self) -> std::vector< KinematicLevel,std::allocator< KinematicLevel > >"""
        return _moco.MocoKinematicConstraint_getKinematicLevels(self)

    def calcKinematicConstraintErrors(self, model, state, errors):
        r"""
        calcKinematicConstraintErrors(MocoKinematicConstraint self, Model model, State state, Vector errors)

        Parameters
        ----------
        model: OpenSim::Model const &
        state: SimTK::State const &
        errors: SimTK::Vector &

        """
        return _moco.MocoKinematicConstraint_calcKinematicConstraintErrors(self, model, state, errors)
    __swig_destroy__ = _moco.delete_MocoKinematicConstraint

# Register MocoKinematicConstraint in _moco:
_moco.MocoKinematicConstraint_swigregister(MocoKinematicConstraint)

class MocoPathConstraint(opensim.common.OpenSimObject):
    r"""Proxy of C++ OpenSim::MocoPathConstraint class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    @staticmethod
    def safeDownCast(obj):
        r"""
        safeDownCast(OpenSimObject obj) -> MocoPathConstraint

        Parameters
        ----------
        obj: OpenSim::Object *

        """
        return _moco.MocoPathConstraint_safeDownCast(obj)

    def assign(self, aObject):
        r"""
        assign(MocoPathConstraint self, OpenSimObject aObject)

        Parameters
        ----------
        aObject: OpenSim::Object &

        """
        return _moco.MocoPathConstraint_assign(self, aObject)

    @staticmethod
    def getClassName():
        r"""getClassName() -> std::string const &"""
        return _moco.MocoPathConstraint_getClassName()

    def clone(self):
        r"""clone(MocoPathConstraint self) -> MocoPathConstraint"""
        return _moco.MocoPathConstraint_clone(self)

    def getConcreteClassName(self):
        r"""getConcreteClassName(MocoPathConstraint self) -> std::string const &"""
        return _moco.MocoPathConstraint_getConcreteClassName(self)

    def getConstraintInfo(self):
        r"""getConstraintInfo(MocoPathConstraint self) -> MocoConstraintInfo const &"""
        return _moco.MocoPathConstraint_getConstraintInfo(self)

    def updConstraintInfo(self):
        r"""updConstraintInfo(MocoPathConstraint self) -> MocoConstraintInfo &"""
        return _moco.MocoPathConstraint_updConstraintInfo(self)

    def setConstraintInfo(self, cInfo):
        r"""
        setConstraintInfo(MocoPathConstraint self, MocoConstraintInfo const & cInfo)

        Parameters
        ----------
        cInfo: MocoConstraintInfo const &

        """
        return _moco.MocoPathConstraint_setConstraintInfo(self, cInfo)

    def getPathConstraintIndex(self):
        r"""getPathConstraintIndex(MocoPathConstraint self) -> int"""
        return _moco.MocoPathConstraint_getPathConstraintIndex(self)

    def calcPathConstraintErrors(self, state, errors):
        r"""
        calcPathConstraintErrors(MocoPathConstraint self, State state, Vector errors)

        Parameters
        ----------
        state: SimTK::State const &
        errors: SimTK::Vector &

        """
        return _moco.MocoPathConstraint_calcPathConstraintErrors(self, state, errors)

    def calcPathConstraintErrorsView(self, state, errors):
        r"""
        calcPathConstraintErrorsView(MocoPathConstraint self, State state, Vector errors)

        Parameters
        ----------
        state: SimTK::State const &
        errors: SimTK::Vector &

        """
        return _moco.MocoPathConstraint_calcPathConstraintErrorsView(self, state, errors)

    def initializeOnModel(self, model, arg3, pathConstraintIndex):
        r"""
        initializeOnModel(MocoPathConstraint self, Model model, OpenSim::MocoProblemInfo const & arg3, int const & pathConstraintIndex)

        Parameters
        ----------
        model: OpenSim::Model const &
        arg3: OpenSim::MocoProblemInfo const &
        pathConstraintIndex: int const &

        """
        return _moco.MocoPathConstraint_initializeOnModel(self, model, arg3, pathConstraintIndex)
    __swig_destroy__ = _moco.delete_MocoPathConstraint

# Register MocoPathConstraint in _moco:
_moco.MocoPathConstraint_swigregister(MocoPathConstraint)

def MocoPathConstraint_safeDownCast(obj):
    r"""
    MocoPathConstraint_safeDownCast(OpenSimObject obj) -> MocoPathConstraint

    Parameters
    ----------
    obj: OpenSim::Object *

    """
    return _moco.MocoPathConstraint_safeDownCast(obj)

def MocoPathConstraint_getClassName():
    r"""MocoPathConstraint_getClassName() -> std::string const &"""
    return _moco.MocoPathConstraint_getClassName()

class MocoControlBoundConstraint(MocoPathConstraint):
    r"""Proxy of C++ OpenSim::MocoControlBoundConstraint class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def safeDownCast(obj):
        r"""
        safeDownCast(OpenSimObject obj) -> MocoControlBoundConstraint

        Parameters
        ----------
        obj: OpenSim::Object *

        """
        return _moco.MocoControlBoundConstraint_safeDownCast(obj)

    def assign(self, aObject):
        r"""
        assign(MocoControlBoundConstraint self, OpenSimObject aObject)

        Parameters
        ----------
        aObject: OpenSim::Object &

        """
        return _moco.MocoControlBoundConstraint_assign(self, aObject)

    @staticmethod
    def getClassName():
        r"""getClassName() -> std::string const &"""
        return _moco.MocoControlBoundConstraint_getClassName()

    def clone(self):
        r"""clone(MocoControlBoundConstraint self) -> MocoControlBoundConstraint"""
        return _moco.MocoControlBoundConstraint_clone(self)

    def getConcreteClassName(self):
        r"""getConcreteClassName(MocoControlBoundConstraint self) -> std::string const &"""
        return _moco.MocoControlBoundConstraint_getConcreteClassName(self)

    def __init__(self):
        r"""__init__(MocoControlBoundConstraint self) -> MocoControlBoundConstraint"""
        _moco.MocoControlBoundConstraint_swiginit(self, _moco.new_MocoControlBoundConstraint())

    def addControlPath(self, controlPath):
        r"""
        addControlPath(MocoControlBoundConstraint self, std::string controlPath)

        Parameters
        ----------
        controlPath: std::string

        """
        return _moco.MocoControlBoundConstraint_addControlPath(self, controlPath)

    def setControlPaths(self, controlPaths):
        r"""
        setControlPaths(MocoControlBoundConstraint self, StdVectorString controlPaths)

        Parameters
        ----------
        controlPaths: std::vector< std::string,std::allocator< std::string > > const &

        """
        return _moco.MocoControlBoundConstraint_setControlPaths(self, controlPaths)

    def clearControlPaths(self):
        r"""clearControlPaths(MocoControlBoundConstraint self)"""
        return _moco.MocoControlBoundConstraint_clearControlPaths(self)

    def getControlPaths(self):
        r"""getControlPaths(MocoControlBoundConstraint self) -> StdVectorString"""
        return _moco.MocoControlBoundConstraint_getControlPaths(self)

    def setLowerBound(self, f):
        r"""
        setLowerBound(MocoControlBoundConstraint self, Function f)

        Parameters
        ----------
        f: OpenSim::Function const &

        """
        return _moco.MocoControlBoundConstraint_setLowerBound(self, f)

    def clearLowerBound(self):
        r"""clearLowerBound(MocoControlBoundConstraint self)"""
        return _moco.MocoControlBoundConstraint_clearLowerBound(self)

    def hasLowerBound(self):
        r"""hasLowerBound(MocoControlBoundConstraint self) -> bool"""
        return _moco.MocoControlBoundConstraint_hasLowerBound(self)

    def getLowerBound(self):
        r"""getLowerBound(MocoControlBoundConstraint self) -> Function"""
        return _moco.MocoControlBoundConstraint_getLowerBound(self)

    def setUpperBound(self, f):
        r"""
        setUpperBound(MocoControlBoundConstraint self, Function f)

        Parameters
        ----------
        f: OpenSim::Function const &

        """
        return _moco.MocoControlBoundConstraint_setUpperBound(self, f)

    def clearUpperBound(self):
        r"""clearUpperBound(MocoControlBoundConstraint self)"""
        return _moco.MocoControlBoundConstraint_clearUpperBound(self)

    def hasUpperBound(self):
        r"""hasUpperBound(MocoControlBoundConstraint self) -> bool"""
        return _moco.MocoControlBoundConstraint_hasUpperBound(self)

    def getUpperBound(self):
        r"""getUpperBound(MocoControlBoundConstraint self) -> Function"""
        return _moco.MocoControlBoundConstraint_getUpperBound(self)

    def setEqualityWithLower(self, v):
        r"""
        setEqualityWithLower(MocoControlBoundConstraint self, bool v)

        Parameters
        ----------
        v: bool

        """
        return _moco.MocoControlBoundConstraint_setEqualityWithLower(self, v)

    def getEqualityWithLower(self):
        r"""getEqualityWithLower(MocoControlBoundConstraint self) -> bool"""
        return _moco.MocoControlBoundConstraint_getEqualityWithLower(self)
    __swig_destroy__ = _moco.delete_MocoControlBoundConstraint

# Register MocoControlBoundConstraint in _moco:
_moco.MocoControlBoundConstraint_swigregister(MocoControlBoundConstraint)

def MocoControlBoundConstraint_safeDownCast(obj):
    r"""
    MocoControlBoundConstraint_safeDownCast(OpenSimObject obj) -> MocoControlBoundConstraint

    Parameters
    ----------
    obj: OpenSim::Object *

    """
    return _moco.MocoControlBoundConstraint_safeDownCast(obj)

def MocoControlBoundConstraint_getClassName():
    r"""MocoControlBoundConstraint_getClassName() -> std::string const &"""
    return _moco.MocoControlBoundConstraint_getClassName()

class MocoFrameDistanceConstraintPair(opensim.common.OpenSimObject):
    r"""Proxy of C++ OpenSim::MocoFrameDistanceConstraintPair class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def safeDownCast(obj):
        r"""
        safeDownCast(OpenSimObject obj) -> MocoFrameDistanceConstraintPair

        Parameters
        ----------
        obj: OpenSim::Object *

        """
        return _moco.MocoFrameDistanceConstraintPair_safeDownCast(obj)

    def assign(self, aObject):
        r"""
        assign(MocoFrameDistanceConstraintPair self, OpenSimObject aObject)

        Parameters
        ----------
        aObject: OpenSim::Object &

        """
        return _moco.MocoFrameDistanceConstraintPair_assign(self, aObject)

    @staticmethod
    def getClassName():
        r"""getClassName() -> std::string const &"""
        return _moco.MocoFrameDistanceConstraintPair_getClassName()

    def clone(self):
        r"""clone(MocoFrameDistanceConstraintPair self) -> MocoFrameDistanceConstraintPair"""
        return _moco.MocoFrameDistanceConstraintPair_clone(self)

    def getConcreteClassName(self):
        r"""getConcreteClassName(MocoFrameDistanceConstraintPair self) -> std::string const &"""
        return _moco.MocoFrameDistanceConstraintPair_getConcreteClassName(self)

    def copyProperty_frame1_path(self, source):
        r"""
        copyProperty_frame1_path(MocoFrameDistanceConstraintPair self, MocoFrameDistanceConstraintPair source)

        Parameters
        ----------
        source: OpenSim::MocoFrameDistanceConstraintPair::Self const &

        """
        return _moco.MocoFrameDistanceConstraintPair_copyProperty_frame1_path(self, source)

    def append_frame1_path(self, value):
        r"""
        append_frame1_path(MocoFrameDistanceConstraintPair self, std::string const & value) -> int

        Parameters
        ----------
        value: std::string const &

        """
        return _moco.MocoFrameDistanceConstraintPair_append_frame1_path(self, value)

    def constructProperty_frame1_path(self, initValue):
        r"""
        constructProperty_frame1_path(MocoFrameDistanceConstraintPair self, std::string const & initValue)

        Parameters
        ----------
        initValue: std::string const &

        """
        return _moco.MocoFrameDistanceConstraintPair_constructProperty_frame1_path(self, initValue)

    def get_frame1_path(self, *args):
        r"""
        get_frame1_path(MocoFrameDistanceConstraintPair self, int i) -> std::string const

        Parameters
        ----------
        i: int

        get_frame1_path(MocoFrameDistanceConstraintPair self) -> std::string const &
        """
        return _moco.MocoFrameDistanceConstraintPair_get_frame1_path(self, *args)

    def upd_frame1_path(self, *args):
        r"""
        upd_frame1_path(MocoFrameDistanceConstraintPair self, int i) -> std::string

        Parameters
        ----------
        i: int

        upd_frame1_path(MocoFrameDistanceConstraintPair self) -> std::string &
        """
        return _moco.MocoFrameDistanceConstraintPair_upd_frame1_path(self, *args)

    def set_frame1_path(self, *args):
        r"""
        set_frame1_path(MocoFrameDistanceConstraintPair self, int i, std::string const & value)

        Parameters
        ----------
        i: int
        value: std::string const &

        set_frame1_path(MocoFrameDistanceConstraintPair self, std::string const & value)

        Parameters
        ----------
        value: std::string const &

        """
        return _moco.MocoFrameDistanceConstraintPair_set_frame1_path(self, *args)

    def copyProperty_frame2_path(self, source):
        r"""
        copyProperty_frame2_path(MocoFrameDistanceConstraintPair self, MocoFrameDistanceConstraintPair source)

        Parameters
        ----------
        source: OpenSim::MocoFrameDistanceConstraintPair::Self const &

        """
        return _moco.MocoFrameDistanceConstraintPair_copyProperty_frame2_path(self, source)

    def append_frame2_path(self, value):
        r"""
        append_frame2_path(MocoFrameDistanceConstraintPair self, std::string const & value) -> int

        Parameters
        ----------
        value: std::string const &

        """
        return _moco.MocoFrameDistanceConstraintPair_append_frame2_path(self, value)

    def constructProperty_frame2_path(self, initValue):
        r"""
        constructProperty_frame2_path(MocoFrameDistanceConstraintPair self, std::string const & initValue)

        Parameters
        ----------
        initValue: std::string const &

        """
        return _moco.MocoFrameDistanceConstraintPair_constructProperty_frame2_path(self, initValue)

    def get_frame2_path(self, *args):
        r"""
        get_frame2_path(MocoFrameDistanceConstraintPair self, int i) -> std::string const

        Parameters
        ----------
        i: int

        get_frame2_path(MocoFrameDistanceConstraintPair self) -> std::string const &
        """
        return _moco.MocoFrameDistanceConstraintPair_get_frame2_path(self, *args)

    def upd_frame2_path(self, *args):
        r"""
        upd_frame2_path(MocoFrameDistanceConstraintPair self, int i) -> std::string

        Parameters
        ----------
        i: int

        upd_frame2_path(MocoFrameDistanceConstraintPair self) -> std::string &
        """
        return _moco.MocoFrameDistanceConstraintPair_upd_frame2_path(self, *args)

    def set_frame2_path(self, *args):
        r"""
        set_frame2_path(MocoFrameDistanceConstraintPair self, int i, std::string const & value)

        Parameters
        ----------
        i: int
        value: std::string const &

        set_frame2_path(MocoFrameDistanceConstraintPair self, std::string const & value)

        Parameters
        ----------
        value: std::string const &

        """
        return _moco.MocoFrameDistanceConstraintPair_set_frame2_path(self, *args)

    def copyProperty_minimum_distance(self, source):
        r"""
        copyProperty_minimum_distance(MocoFrameDistanceConstraintPair self, MocoFrameDistanceConstraintPair source)

        Parameters
        ----------
        source: OpenSim::MocoFrameDistanceConstraintPair::Self const &

        """
        return _moco.MocoFrameDistanceConstraintPair_copyProperty_minimum_distance(self, source)

    def append_minimum_distance(self, value):
        r"""
        append_minimum_distance(MocoFrameDistanceConstraintPair self, double const & value) -> int

        Parameters
        ----------
        value: double const &

        """
        return _moco.MocoFrameDistanceConstraintPair_append_minimum_distance(self, value)

    def constructProperty_minimum_distance(self, initValue):
        r"""
        constructProperty_minimum_distance(MocoFrameDistanceConstraintPair self, double const & initValue)

        Parameters
        ----------
        initValue: double const &

        """
        return _moco.MocoFrameDistanceConstraintPair_constructProperty_minimum_distance(self, initValue)

    def get_minimum_distance(self, *args):
        r"""
        get_minimum_distance(MocoFrameDistanceConstraintPair self, int i) -> double const

        Parameters
        ----------
        i: int

        get_minimum_distance(MocoFrameDistanceConstraintPair self) -> double const &
        """
        return _moco.MocoFrameDistanceConstraintPair_get_minimum_distance(self, *args)

    def upd_minimum_distance(self, *args):
        r"""
        upd_minimum_distance(MocoFrameDistanceConstraintPair self, int i) -> double

        Parameters
        ----------
        i: int

        upd_minimum_distance(MocoFrameDistanceConstraintPair self) -> double &
        """
        return _moco.MocoFrameDistanceConstraintPair_upd_minimum_distance(self, *args)

    def set_minimum_distance(self, *args):
        r"""
        set_minimum_distance(MocoFrameDistanceConstraintPair self, int i, double const & value)

        Parameters
        ----------
        i: int
        value: double const &

        set_minimum_distance(MocoFrameDistanceConstraintPair self, double const & value)

        Parameters
        ----------
        value: double const &

        """
        return _moco.MocoFrameDistanceConstraintPair_set_minimum_distance(self, *args)

    def copyProperty_maximum_distance(self, source):
        r"""
        copyProperty_maximum_distance(MocoFrameDistanceConstraintPair self, MocoFrameDistanceConstraintPair source)

        Parameters
        ----------
        source: OpenSim::MocoFrameDistanceConstraintPair::Self const &

        """
        return _moco.MocoFrameDistanceConstraintPair_copyProperty_maximum_distance(self, source)

    def append_maximum_distance(self, value):
        r"""
        append_maximum_distance(MocoFrameDistanceConstraintPair self, double const & value) -> int

        Parameters
        ----------
        value: double const &

        """
        return _moco.MocoFrameDistanceConstraintPair_append_maximum_distance(self, value)

    def constructProperty_maximum_distance(self, initValue):
        r"""
        constructProperty_maximum_distance(MocoFrameDistanceConstraintPair self, double const & initValue)

        Parameters
        ----------
        initValue: double const &

        """
        return _moco.MocoFrameDistanceConstraintPair_constructProperty_maximum_distance(self, initValue)

    def get_maximum_distance(self, *args):
        r"""
        get_maximum_distance(MocoFrameDistanceConstraintPair self, int i) -> double const

        Parameters
        ----------
        i: int

        get_maximum_distance(MocoFrameDistanceConstraintPair self) -> double const &
        """
        return _moco.MocoFrameDistanceConstraintPair_get_maximum_distance(self, *args)

    def upd_maximum_distance(self, *args):
        r"""
        upd_maximum_distance(MocoFrameDistanceConstraintPair self, int i) -> double

        Parameters
        ----------
        i: int

        upd_maximum_distance(MocoFrameDistanceConstraintPair self) -> double &
        """
        return _moco.MocoFrameDistanceConstraintPair_upd_maximum_distance(self, *args)

    def set_maximum_distance(self, *args):
        r"""
        set_maximum_distance(MocoFrameDistanceConstraintPair self, int i, double const & value)

        Parameters
        ----------
        i: int
        value: double const &

        set_maximum_distance(MocoFrameDistanceConstraintPair self, double const & value)

        Parameters
        ----------
        value: double const &

        """
        return _moco.MocoFrameDistanceConstraintPair_set_maximum_distance(self, *args)

    def __init__(self, *args):
        r"""
        __init__(MocoFrameDistanceConstraintPair self) -> MocoFrameDistanceConstraintPair
        __init__(MocoFrameDistanceConstraintPair self, std::string firstFramePath, std::string secondFramePath, double minimum_distance, double maximum_distance) -> MocoFrameDistanceConstraintPair

        Parameters
        ----------
        firstFramePath: std::string
        secondFramePath: std::string
        minimum_distance: double
        maximum_distance: double

        """
        _moco.MocoFrameDistanceConstraintPair_swiginit(self, _moco.new_MocoFrameDistanceConstraintPair(*args))
    __swig_destroy__ = _moco.delete_MocoFrameDistanceConstraintPair

# Register MocoFrameDistanceConstraintPair in _moco:
_moco.MocoFrameDistanceConstraintPair_swigregister(MocoFrameDistanceConstraintPair)

def MocoFrameDistanceConstraintPair_safeDownCast(obj):
    r"""
    MocoFrameDistanceConstraintPair_safeDownCast(OpenSimObject obj) -> MocoFrameDistanceConstraintPair

    Parameters
    ----------
    obj: OpenSim::Object *

    """
    return _moco.MocoFrameDistanceConstraintPair_safeDownCast(obj)

def MocoFrameDistanceConstraintPair_getClassName():
    r"""MocoFrameDistanceConstraintPair_getClassName() -> std::string const &"""
    return _moco.MocoFrameDistanceConstraintPair_getClassName()

class MocoFrameDistanceConstraint(MocoPathConstraint):
    r"""Proxy of C++ OpenSim::MocoFrameDistanceConstraint class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def safeDownCast(obj):
        r"""
        safeDownCast(OpenSimObject obj) -> MocoFrameDistanceConstraint

        Parameters
        ----------
        obj: OpenSim::Object *

        """
        return _moco.MocoFrameDistanceConstraint_safeDownCast(obj)

    def assign(self, aObject):
        r"""
        assign(MocoFrameDistanceConstraint self, OpenSimObject aObject)

        Parameters
        ----------
        aObject: OpenSim::Object &

        """
        return _moco.MocoFrameDistanceConstraint_assign(self, aObject)

    @staticmethod
    def getClassName():
        r"""getClassName() -> std::string const &"""
        return _moco.MocoFrameDistanceConstraint_getClassName()

    def clone(self):
        r"""clone(MocoFrameDistanceConstraint self) -> MocoFrameDistanceConstraint"""
        return _moco.MocoFrameDistanceConstraint_clone(self)

    def getConcreteClassName(self):
        r"""getConcreteClassName(MocoFrameDistanceConstraint self) -> std::string const &"""
        return _moco.MocoFrameDistanceConstraint_getConcreteClassName(self)

    def __init__(self):
        r"""__init__(MocoFrameDistanceConstraint self) -> MocoFrameDistanceConstraint"""
        _moco.MocoFrameDistanceConstraint_swiginit(self, _moco.new_MocoFrameDistanceConstraint())

    def addFramePair(self, *args):
        r"""
        addFramePair(MocoFrameDistanceConstraint self, MocoFrameDistanceConstraintPair pair)

        Parameters
        ----------
        pair: OpenSim::MocoFrameDistanceConstraintPair

        addFramePair(MocoFrameDistanceConstraint self, std::string const & frame1_path, std::string const & frame2_path, double minimum_distance, double maximum_distance)

        Parameters
        ----------
        frame1_path: std::string const &
        frame2_path: std::string const &
        minimum_distance: double
        maximum_distance: double

        """
        return _moco.MocoFrameDistanceConstraint_addFramePair(self, *args)

    def setProjection(self, projection):
        r"""
        setProjection(MocoFrameDistanceConstraint self, std::string projection)

        Parameters
        ----------
        projection: std::string

        """
        return _moco.MocoFrameDistanceConstraint_setProjection(self, projection)

    def getProjection(self):
        r"""getProjection(MocoFrameDistanceConstraint self) -> std::string"""
        return _moco.MocoFrameDistanceConstraint_getProjection(self)

    def setProjectionVector(self, vector):
        r"""
        setProjectionVector(MocoFrameDistanceConstraint self, Vec3 vector)

        Parameters
        ----------
        vector: SimTK::Vec3

        """
        return _moco.MocoFrameDistanceConstraint_setProjectionVector(self, vector)

    def clearProjectionVector(self):
        r"""clearProjectionVector(MocoFrameDistanceConstraint self)"""
        return _moco.MocoFrameDistanceConstraint_clearProjectionVector(self)

    def getProjectionVector(self):
        r"""getProjectionVector(MocoFrameDistanceConstraint self) -> Vec3"""
        return _moco.MocoFrameDistanceConstraint_getProjectionVector(self)
    __swig_destroy__ = _moco.delete_MocoFrameDistanceConstraint

# Register MocoFrameDistanceConstraint in _moco:
_moco.MocoFrameDistanceConstraint_swigregister(MocoFrameDistanceConstraint)

def MocoFrameDistanceConstraint_safeDownCast(obj):
    r"""
    MocoFrameDistanceConstraint_safeDownCast(OpenSimObject obj) -> MocoFrameDistanceConstraint

    Parameters
    ----------
    obj: OpenSim::Object *

    """
    return _moco.MocoFrameDistanceConstraint_safeDownCast(obj)

def MocoFrameDistanceConstraint_getClassName():
    r"""MocoFrameDistanceConstraint_getClassName() -> std::string const &"""
    return _moco.MocoFrameDistanceConstraint_getClassName()

class MocoProblemRep(object):
    r"""Proxy of C++ OpenSim::MocoProblemRep class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(MocoProblemRep self) -> MocoProblemRep
        __init__(MocoProblemRep self, MocoProblemRep source) -> MocoProblemRep

        Parameters
        ----------
        source: OpenSim::MocoProblemRep &&

        """
        _moco.MocoProblemRep_swiginit(self, _moco.new_MocoProblemRep(*args))

    def getName(self):
        r"""getName(MocoProblemRep self) -> std::string const &"""
        return _moco.MocoProblemRep_getName(self)

    def getModelBase(self):
        r"""getModelBase(MocoProblemRep self) -> Model"""
        return _moco.MocoProblemRep_getModelBase(self)

    def updStateBase(self):
        r"""updStateBase(MocoProblemRep self) -> State"""
        return _moco.MocoProblemRep_updStateBase(self)

    def getDiscreteControllerBase(self):
        r"""getDiscreteControllerBase(MocoProblemRep self) -> OpenSim::DiscreteController const &"""
        return _moco.MocoProblemRep_getDiscreteControllerBase(self)

    def getModelDisabledConstraints(self):
        r"""getModelDisabledConstraints(MocoProblemRep self) -> Model"""
        return _moco.MocoProblemRep_getModelDisabledConstraints(self)

    def updStateDisabledConstraints(self, index=0):
        r"""
        updStateDisabledConstraints(MocoProblemRep self, int index=0) -> State

        Parameters
        ----------
        index: int

        """
        return _moco.MocoProblemRep_updStateDisabledConstraints(self, index)

    def getDiscreteControllerDisabledConstraints(self):
        r"""getDiscreteControllerDisabledConstraints(MocoProblemRep self) -> OpenSim::DiscreteController const &"""
        return _moco.MocoProblemRep_getDiscreteControllerDisabledConstraints(self)

    def getConstraintForces(self):
        r"""getConstraintForces(MocoProblemRep self) -> OpenSim::DiscreteForces const &"""
        return _moco.MocoProblemRep_getConstraintForces(self)

    def getAccelerationMotion(self):
        r"""getAccelerationMotion(MocoProblemRep self) -> OpenSim::AccelerationMotion const &"""
        return _moco.MocoProblemRep_getAccelerationMotion(self)

    def getNumStates(self):
        r"""getNumStates(MocoProblemRep self) -> int"""
        return _moco.MocoProblemRep_getNumStates(self)

    def getNumControls(self):
        r"""getNumControls(MocoProblemRep self) -> int"""
        return _moco.MocoProblemRep_getNumControls(self)

    def getNumParameters(self):
        r"""getNumParameters(MocoProblemRep self) -> int"""
        return _moco.MocoProblemRep_getNumParameters(self)

    def getNumCosts(self):
        r"""getNumCosts(MocoProblemRep self) -> int"""
        return _moco.MocoProblemRep_getNumCosts(self)

    def getNumEndpointConstraints(self):
        r"""getNumEndpointConstraints(MocoProblemRep self) -> int"""
        return _moco.MocoProblemRep_getNumEndpointConstraints(self)

    def getNumKinematicConstraints(self):
        r"""getNumKinematicConstraints(MocoProblemRep self) -> int"""
        return _moco.MocoProblemRep_getNumKinematicConstraints(self)

    def isPrescribedKinematics(self):
        r"""isPrescribedKinematics(MocoProblemRep self) -> bool"""
        return _moco.MocoProblemRep_isPrescribedKinematics(self)

    def getNumImplicitAuxiliaryResiduals(self):
        r"""getNumImplicitAuxiliaryResiduals(MocoProblemRep self) -> int"""
        return _moco.MocoProblemRep_getNumImplicitAuxiliaryResiduals(self)

    def createStateVariableNamesInSystemOrder(self, yIndexMap):
        r"""
        createStateVariableNamesInSystemOrder(MocoProblemRep self, std::unordered_map< int,int > & yIndexMap) -> StdVectorString

        Parameters
        ----------
        yIndexMap: std::unordered_map< int,int > &

        """
        return _moco.MocoProblemRep_createStateVariableNamesInSystemOrder(self, yIndexMap)

    def createStateInfoNames(self):
        r"""createStateInfoNames(MocoProblemRep self) -> StdVectorString"""
        return _moco.MocoProblemRep_createStateInfoNames(self)

    def createControlInfoNames(self):
        r"""createControlInfoNames(MocoProblemRep self) -> StdVectorString"""
        return _moco.MocoProblemRep_createControlInfoNames(self)

    def createParameterNames(self):
        r"""createParameterNames(MocoProblemRep self) -> StdVectorString"""
        return _moco.MocoProblemRep_createParameterNames(self)

    def createCostNames(self):
        r"""createCostNames(MocoProblemRep self) -> StdVectorString"""
        return _moco.MocoProblemRep_createCostNames(self)

    def createEndpointConstraintNames(self):
        r"""createEndpointConstraintNames(MocoProblemRep self) -> StdVectorString"""
        return _moco.MocoProblemRep_createEndpointConstraintNames(self)

    def createPathConstraintNames(self):
        r"""createPathConstraintNames(MocoProblemRep self) -> StdVectorString"""
        return _moco.MocoProblemRep_createPathConstraintNames(self)

    def createMultiplierInfoNames(self):
        r"""createMultiplierInfoNames(MocoProblemRep self) -> StdVectorString"""
        return _moco.MocoProblemRep_createMultiplierInfoNames(self)

    def createKinematicConstraintNames(self):
        r"""createKinematicConstraintNames(MocoProblemRep self) -> StdVectorString"""
        return _moco.MocoProblemRep_createKinematicConstraintNames(self)

    def getKinematicConstraintEquationNames(self, includeDerivatives):
        r"""
        getKinematicConstraintEquationNames(MocoProblemRep self, bool includeDerivatives) -> StdVectorString

        Parameters
        ----------
        includeDerivatives: bool

        """
        return _moco.MocoProblemRep_getKinematicConstraintEquationNames(self, includeDerivatives)

    def getTimeInitialBounds(self):
        r"""getTimeInitialBounds(MocoProblemRep self) -> MocoInitialBounds"""
        return _moco.MocoProblemRep_getTimeInitialBounds(self)

    def getTimeFinalBounds(self):
        r"""getTimeFinalBounds(MocoProblemRep self) -> MocoFinalBounds"""
        return _moco.MocoProblemRep_getTimeFinalBounds(self)

    def getStateInfo(self, name):
        r"""
        getStateInfo(MocoProblemRep self, std::string const & name) -> MocoVariableInfo

        Parameters
        ----------
        name: std::string const &

        """
        return _moco.MocoProblemRep_getStateInfo(self, name)

    def getControlInfo(self, name):
        r"""
        getControlInfo(MocoProblemRep self, std::string const & name) -> MocoVariableInfo

        Parameters
        ----------
        name: std::string const &

        """
        return _moco.MocoProblemRep_getControlInfo(self, name)

    def getParameter(self, name):
        r"""
        getParameter(MocoProblemRep self, std::string const & name) -> MocoParameter

        Parameters
        ----------
        name: std::string const &

        """
        return _moco.MocoProblemRep_getParameter(self, name)

    def getCost(self, name):
        r"""
        getCost(MocoProblemRep self, std::string const & name) -> MocoGoal

        Parameters
        ----------
        name: std::string const &

        """
        return _moco.MocoProblemRep_getCost(self, name)

    def getCostByIndex(self, index):
        r"""
        getCostByIndex(MocoProblemRep self, int index) -> MocoGoal

        Parameters
        ----------
        index: int

        """
        return _moco.MocoProblemRep_getCostByIndex(self, index)

    def getEndpointConstraint(self, name):
        r"""
        getEndpointConstraint(MocoProblemRep self, std::string const & name) -> MocoGoal

        Parameters
        ----------
        name: std::string const &

        """
        return _moco.MocoProblemRep_getEndpointConstraint(self, name)

    def getEndpointConstraintByIndex(self, index):
        r"""
        getEndpointConstraintByIndex(MocoProblemRep self, int index) -> MocoGoal

        Parameters
        ----------
        index: int

        """
        return _moco.MocoProblemRep_getEndpointConstraintByIndex(self, index)

    def getPathConstraint(self, name):
        r"""
        getPathConstraint(MocoProblemRep self, std::string const & name) -> MocoPathConstraint

        Parameters
        ----------
        name: std::string const &

        """
        return _moco.MocoProblemRep_getPathConstraint(self, name)

    def getPathConstraintByIndex(self, index):
        r"""
        getPathConstraintByIndex(MocoProblemRep self, int index) -> MocoPathConstraint

        Parameters
        ----------
        index: int

        """
        return _moco.MocoProblemRep_getPathConstraintByIndex(self, index)

    def getNumPathConstraintEquations(self):
        r"""getNumPathConstraintEquations(MocoProblemRep self) -> int"""
        return _moco.MocoProblemRep_getNumPathConstraintEquations(self)

    def getKinematicConstraint(self, name):
        r"""
        getKinematicConstraint(MocoProblemRep self, std::string const & name) -> MocoKinematicConstraint

        Parameters
        ----------
        name: std::string const &

        """
        return _moco.MocoProblemRep_getKinematicConstraint(self, name)

    def getNumKinematicConstraintEquations(self):
        r"""getNumKinematicConstraintEquations(MocoProblemRep self) -> int"""
        return _moco.MocoProblemRep_getNumKinematicConstraintEquations(self)

    def printDescription(self):
        r"""printDescription(MocoProblemRep self)"""
        return _moco.MocoProblemRep_printDescription(self)

    def calcPathConstraintErrors(self, state, errors):
        r"""
        calcPathConstraintErrors(MocoProblemRep self, State state, Vector errors)

        Parameters
        ----------
        state: SimTK::State const &
        errors: SimTK::Vector &

        """
        return _moco.MocoProblemRep_calcPathConstraintErrors(self, state, errors)

    def calcKinematicConstraintErrors(self, state):
        r"""
        calcKinematicConstraintErrors(MocoProblemRep self, State state) -> Vector

        Parameters
        ----------
        state: SimTK::State const &

        """
        return _moco.MocoProblemRep_calcKinematicConstraintErrors(self, state)

    def applyParametersToModelProperties(self, parameterValues, initSystemAndDisableConstraints=False):
        r"""
        applyParametersToModelProperties(MocoProblemRep self, Vector parameterValues, bool initSystemAndDisableConstraints=False)

        Parameters
        ----------
        parameterValues: SimTK::Vector const &
        initSystemAndDisableConstraints: bool

        """
        return _moco.MocoProblemRep_applyParametersToModelProperties(self, parameterValues, initSystemAndDisableConstraints)

    def getImplicitResidualReferencePtrs(self):
        r"""getImplicitResidualReferencePtrs(MocoProblemRep self) -> std::vector< SimTK::ReferencePtr< OpenSim::Output< double > const >,std::allocator< SimTK::ReferencePtr< OpenSim::Output< double > const > > > const &"""
        return _moco.MocoProblemRep_getImplicitResidualReferencePtrs(self)

    def getImplicitComponentReferencePtrs(self):
        r"""getImplicitComponentReferencePtrs(MocoProblemRep self) -> std::vector< std::pair< std::string,SimTK::ReferencePtr< OpenSim::Component const > >,std::allocator< std::pair< std::string,SimTK::ReferencePtr< OpenSim::Component const > > > > const &"""
        return _moco.MocoProblemRep_getImplicitComponentReferencePtrs(self)
    __swig_destroy__ = _moco.delete_MocoProblemRep

# Register MocoProblemRep in _moco:
_moco.MocoProblemRep_swigregister(MocoProblemRep)

class MocoPhase(opensim.common.OpenSimObject):
    r"""Proxy of C++ OpenSim::MocoPhase class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def safeDownCast(obj):
        r"""
        safeDownCast(OpenSimObject obj) -> MocoPhase

        Parameters
        ----------
        obj: OpenSim::Object *

        """
        return _moco.MocoPhase_safeDownCast(obj)

    def assign(self, aObject):
        r"""
        assign(MocoPhase self, OpenSimObject aObject)

        Parameters
        ----------
        aObject: OpenSim::Object &

        """
        return _moco.MocoPhase_assign(self, aObject)

    @staticmethod
    def getClassName():
        r"""getClassName() -> std::string const &"""
        return _moco.MocoPhase_getClassName()

    def clone(self):
        r"""clone(MocoPhase self) -> MocoPhase"""
        return _moco.MocoPhase_clone(self)

    def getConcreteClassName(self):
        r"""getConcreteClassName(MocoPhase self) -> std::string const &"""
        return _moco.MocoPhase_getConcreteClassName(self)

    def __init__(self):
        r"""__init__(MocoPhase self) -> MocoPhase"""
        _moco.MocoPhase_swiginit(self, _moco.new_MocoPhase())

    def setModelAsCopy(self, model):
        r"""
        setModelAsCopy(MocoPhase self, Model model) -> Model

        Parameters
        ----------
        model: OpenSim::Model

        """
        return _moco.MocoPhase_setModelAsCopy(self, model)

    def setModelProcessor(self, model):
        r"""
        setModelProcessor(MocoPhase self, ModelProcessor model)

        Parameters
        ----------
        model: OpenSim::ModelProcessor

        """
        return _moco.MocoPhase_setModelProcessor(self, model)

    def updModelProcessor(self):
        r"""updModelProcessor(MocoPhase self) -> ModelProcessor"""
        return _moco.MocoPhase_updModelProcessor(self)

    def setTimeBounds(self, arg2, arg3):
        r"""
        setTimeBounds(MocoPhase self, MocoInitialBounds arg2, MocoFinalBounds arg3)

        Parameters
        ----------
        arg2: OpenSim::MocoInitialBounds const &
        arg3: OpenSim::MocoFinalBounds const &

        """

        if not type(arg2) is MocoInitialBounds:
            arg2 = self._convert(MocoInitialBounds, arg2)
        if not type(arg3) is MocoFinalBounds:
            arg3 = self._convert(MocoFinalBounds, arg3)


        return _moco.MocoPhase_setTimeBounds(self, arg2, arg3)


    def printStateNamesWithSubstring(self, name):
        r"""
        printStateNamesWithSubstring(MocoPhase self, std::string const & name)

        Parameters
        ----------
        name: std::string const &

        """
        return _moco.MocoPhase_printStateNamesWithSubstring(self, name)

    def setStateInfo(self, *args):
        r"""
        setStateInfo(MocoPhase self, std::string const & name, MocoBounds bounds, MocoInitialBounds init={}, MocoFinalBounds arg5={})

        Parameters
        ----------
        name: std::string const &
        bounds: OpenSim::MocoBounds const &
        init: OpenSim::MocoInitialBounds const &
        arg5: OpenSim::MocoFinalBounds const &

        """

        args = list(args)
        if len(args) >= 2 and not type(args[1]) is MocoBounds:
            args[1] = self._convert(MocoBounds, args[1])
        if len(args) >= 3 and not type(args[2]) is MocoInitialBounds:
            args[2] = self._convert(MocoInitialBounds, args[2])
        if len(args) >= 4 and not type(args[3]) is MocoFinalBounds:
            args[3] = self._convert(MocoFinalBounds, args[3])


        return _moco.MocoPhase_setStateInfo(self, *args)


    def setStateInfoPattern(self, *args):
        r"""
        setStateInfoPattern(MocoPhase self, std::string const & pattern, MocoBounds bounds, MocoInitialBounds init={}, MocoFinalBounds arg5={})

        Parameters
        ----------
        pattern: std::string const &
        bounds: OpenSim::MocoBounds const &
        init: OpenSim::MocoInitialBounds const &
        arg5: OpenSim::MocoFinalBounds const &

        """

        args = list(args)
        if len(args) >= 2 and not type(args[1]) is MocoBounds:
            args[1] = self._convert(MocoBounds, args[1])
        if len(args) >= 3 and not type(args[2]) is MocoInitialBounds:
            args[2] = self._convert(MocoInitialBounds, args[2])
        if len(args) >= 4 and not type(args[3]) is MocoFinalBounds:
            args[3] = self._convert(MocoFinalBounds, args[3])


        return _moco.MocoPhase_setStateInfoPattern(self, *args)


    def printControlNamesWithSubstring(self, name):
        r"""
        printControlNamesWithSubstring(MocoPhase self, std::string const & name)

        Parameters
        ----------
        name: std::string const &

        """
        return _moco.MocoPhase_printControlNamesWithSubstring(self, name)

    def setControlInfo(self, *args):
        r"""
        setControlInfo(MocoPhase self, std::string const & name, MocoBounds arg3, MocoInitialBounds arg4={}, MocoFinalBounds arg5={})

        Parameters
        ----------
        name: std::string const &
        arg3: OpenSim::MocoBounds const &
        arg4: OpenSim::MocoInitialBounds const &
        arg5: OpenSim::MocoFinalBounds const &

        """

        args = list(args)
        if len(args) >= 2 and not type(args[1]) is MocoBounds:
            args[1] = self._convert(MocoBounds, args[1])
        if len(args) >= 3 and not type(args[2]) is MocoInitialBounds:
            args[2] = self._convert(MocoInitialBounds, args[2])
        if len(args) >= 4 and not type(args[3]) is MocoFinalBounds:
            args[3] = self._convert(MocoFinalBounds, args[3])


        return _moco.MocoPhase_setControlInfo(self, *args)


    def setDefaultSpeedBounds(self, bounds):
        r"""
        setDefaultSpeedBounds(MocoPhase self, MocoBounds bounds)

        Parameters
        ----------
        bounds: OpenSim::MocoBounds const &

        """
        return _moco.MocoPhase_setDefaultSpeedBounds(self, bounds)

    def setControlInfoPattern(self, *args):
        r"""
        setControlInfoPattern(MocoPhase self, std::string const & pattern, MocoBounds arg3, MocoInitialBounds arg4={}, MocoFinalBounds arg5={})

        Parameters
        ----------
        pattern: std::string const &
        arg3: OpenSim::MocoBounds const &
        arg4: OpenSim::MocoInitialBounds const &
        arg5: OpenSim::MocoFinalBounds const &

        """

        args = list(args)
        if len(args) >= 2 and not type(args[1]) is MocoBounds:
            args[1] = self._convert(MocoBounds, args[1])
        if len(args) >= 3 and not type(args[2]) is MocoInitialBounds:
            args[2] = self._convert(MocoInitialBounds, args[2])
        if len(args) >= 4 and not type(args[3]) is MocoFinalBounds:
            args[3] = self._convert(MocoFinalBounds, args[3])


        return _moco.MocoPhase_setControlInfoPattern(self, *args)


    def setBoundActivationFromExcitation(self, tf):
        r"""
        setBoundActivationFromExcitation(MocoPhase self, bool tf)

        Parameters
        ----------
        tf: bool

        """
        return _moco.MocoPhase_setBoundActivationFromExcitation(self, tf)

    def setKinematicConstraintBounds(self, bounds):
        r"""
        setKinematicConstraintBounds(MocoPhase self, MocoBounds bounds)

        Parameters
        ----------
        bounds: OpenSim::MocoBounds const &

        """
        return _moco.MocoPhase_setKinematicConstraintBounds(self, bounds)

    def setMultiplierBounds(self, bounds):
        r"""
        setMultiplierBounds(MocoPhase self, MocoBounds bounds)

        Parameters
        ----------
        bounds: OpenSim::MocoBounds const &

        """
        return _moco.MocoPhase_setMultiplierBounds(self, bounds)

    def getModel(self):
        r"""getModel(MocoPhase self) -> Model"""
        return _moco.MocoPhase_getModel(self)

    def updModel(self):
        r"""updModel(MocoPhase self) -> Model"""
        return _moco.MocoPhase_updModel(self)

    def getModelProcessor(self):
        r"""getModelProcessor(MocoPhase self) -> ModelProcessor"""
        return _moco.MocoPhase_getModelProcessor(self)

    def getTimeInitialBounds(self):
        r"""getTimeInitialBounds(MocoPhase self) -> MocoInitialBounds"""
        return _moco.MocoPhase_getTimeInitialBounds(self)

    def getTimeFinalBounds(self):
        r"""getTimeFinalBounds(MocoPhase self) -> MocoFinalBounds"""
        return _moco.MocoPhase_getTimeFinalBounds(self)

    def getStateInfo(self, name):
        r"""
        getStateInfo(MocoPhase self, std::string const & name) -> MocoVariableInfo

        Parameters
        ----------
        name: std::string const &

        """
        return _moco.MocoPhase_getStateInfo(self, name)

    def getControlInfo(self, name):
        r"""
        getControlInfo(MocoPhase self, std::string const & name) -> MocoVariableInfo

        Parameters
        ----------
        name: std::string const &

        """
        return _moco.MocoPhase_getControlInfo(self, name)

    def getDefaultSpeedBounds(self):
        r"""getDefaultSpeedBounds(MocoPhase self) -> MocoBounds"""
        return _moco.MocoPhase_getDefaultSpeedBounds(self)

    def getBoundActivationFromExcitation(self):
        r"""getBoundActivationFromExcitation(MocoPhase self) -> bool"""
        return _moco.MocoPhase_getBoundActivationFromExcitation(self)

    def getKinematicConstraintBounds(self):
        r"""getKinematicConstraintBounds(MocoPhase self) -> MocoBounds"""
        return _moco.MocoPhase_getKinematicConstraintBounds(self)

    def getMultiplierBounds(self):
        r"""getMultiplierBounds(MocoPhase self) -> MocoBounds"""
        return _moco.MocoPhase_getMultiplierBounds(self)

    def getParameter(self, name):
        r"""
        getParameter(MocoPhase self, std::string const & name) -> MocoParameter

        Parameters
        ----------
        name: std::string const &

        """
        return _moco.MocoPhase_getParameter(self, name)

    def updParameter(self, name):
        r"""
        updParameter(MocoPhase self, std::string const & name) -> MocoParameter

        Parameters
        ----------
        name: std::string const &

        """
        return _moco.MocoPhase_updParameter(self, name)

    def getGoal(self, name):
        r"""
        getGoal(MocoPhase self, std::string const & name) -> MocoGoal

        Parameters
        ----------
        name: std::string const &

        """
        return _moco.MocoPhase_getGoal(self, name)

    def updGoal(self, name):
        r"""
        updGoal(MocoPhase self, std::string const & name) -> MocoGoal

        Parameters
        ----------
        name: std::string const &

        """
        return _moco.MocoPhase_updGoal(self, name)

    def getPathConstraint(self, name):
        r"""
        getPathConstraint(MocoPhase self, std::string const & name) -> MocoPathConstraint

        Parameters
        ----------
        name: std::string const &

        """
        return _moco.MocoPhase_getPathConstraint(self, name)

    def updPathConstraint(self, name):
        r"""
        updPathConstraint(MocoPhase self, std::string const & name) -> MocoPathConstraint

        Parameters
        ----------
        name: std::string const &

        """
        return _moco.MocoPhase_updPathConstraint(self, name)

    def _convert(self, cls, v):
        if hasattr(v, '__len__'):
            if len(v) > 2:
                raise Exception("Bounds cannot have more than 2 elements.")
            elif len(v) == 0:
                return cls()
            elif len(v) == 1:
                return cls(v[0])
            elif len(v) == 2:
                return cls(v[0], v[1])
            else:
                return cls()
        else:
            return cls(v)


    def setModel(self, model):
        r"""
        setModel(MocoPhase self, Model model)

        Parameters
        ----------
        model: OpenSim::Model *

        """
        val = _moco.MocoPhase_setModel(self, model)

        model._markAdopted()


        return val


    def addParameter(self, ptr):
        r"""
        addParameter(MocoPhase self, MocoParameter ptr)

        Parameters
        ----------
        ptr: OpenSim::MocoParameter *

        """
        val = _moco.MocoPhase_addParameter(self, ptr)

        ptr._markAdopted()


        return val


    def addGoal(self, ptr):
        r"""
        addGoal(MocoPhase self, MocoGoal ptr)

        Parameters
        ----------
        ptr: OpenSim::MocoGoal *

        """
        val = _moco.MocoPhase_addGoal(self, ptr)

        ptr._markAdopted()


        return val


    def addPathConstraint(self, ptr):
        r"""
        addPathConstraint(MocoPhase self, MocoPathConstraint ptr)

        Parameters
        ----------
        ptr: OpenSim::MocoPathConstraint *

        """
        val = _moco.MocoPhase_addPathConstraint(self, ptr)

        ptr._markAdopted()


        return val

    __swig_destroy__ = _moco.delete_MocoPhase

# Register MocoPhase in _moco:
_moco.MocoPhase_swigregister(MocoPhase)

def MocoPhase_safeDownCast(obj):
    r"""
    MocoPhase_safeDownCast(OpenSimObject obj) -> MocoPhase

    Parameters
    ----------
    obj: OpenSim::Object *

    """
    return _moco.MocoPhase_safeDownCast(obj)

def MocoPhase_getClassName():
    r"""MocoPhase_getClassName() -> std::string const &"""
    return _moco.MocoPhase_getClassName()

class MocoProblem(opensim.common.OpenSimObject):
    r"""Proxy of C++ OpenSim::MocoProblem class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def safeDownCast(obj):
        r"""
        safeDownCast(OpenSimObject obj) -> MocoProblem

        Parameters
        ----------
        obj: OpenSim::Object *

        """
        return _moco.MocoProblem_safeDownCast(obj)

    def assign(self, aObject):
        r"""
        assign(MocoProblem self, OpenSimObject aObject)

        Parameters
        ----------
        aObject: OpenSim::Object &

        """
        return _moco.MocoProblem_assign(self, aObject)

    @staticmethod
    def getClassName():
        r"""getClassName() -> std::string const &"""
        return _moco.MocoProblem_getClassName()

    def clone(self):
        r"""clone(MocoProblem self) -> MocoProblem"""
        return _moco.MocoProblem_clone(self)

    def getConcreteClassName(self):
        r"""getConcreteClassName(MocoProblem self) -> std::string const &"""
        return _moco.MocoProblem_getConcreteClassName(self)

    def __init__(self):
        r"""__init__(MocoProblem self) -> MocoProblem"""
        _moco.MocoProblem_swiginit(self, _moco.new_MocoProblem())

    def setModelAsCopy(self, model):
        r"""
        setModelAsCopy(MocoProblem self, Model model) -> Model

        Parameters
        ----------
        model: OpenSim::Model

        """
        return _moco.MocoProblem_setModelAsCopy(self, model)

    def updModel(self):
        r"""updModel(MocoProblem self) -> Model"""
        return _moco.MocoProblem_updModel(self)

    def setModelProcessor(self, model):
        r"""
        setModelProcessor(MocoProblem self, ModelProcessor model)

        Parameters
        ----------
        model: OpenSim::ModelProcessor

        """
        return _moco.MocoProblem_setModelProcessor(self, model)

    def setTimeBounds(self, arg2, arg3):
        r"""
        setTimeBounds(MocoProblem self, MocoInitialBounds arg2, MocoFinalBounds arg3)

        Parameters
        ----------
        arg2: OpenSim::MocoInitialBounds const &
        arg3: OpenSim::MocoFinalBounds const &

        """

        if not type(arg2) is MocoInitialBounds:
            arg2 = self._convert(MocoInitialBounds, arg2)
        if not type(arg3) is MocoFinalBounds:
            arg3 = self._convert(MocoFinalBounds, arg3)


        return _moco.MocoProblem_setTimeBounds(self, arg2, arg3)


    def printStateNamesWithSubstring(self, name):
        r"""
        printStateNamesWithSubstring(MocoProblem self, std::string const & name)

        Parameters
        ----------
        name: std::string const &

        """
        return _moco.MocoProblem_printStateNamesWithSubstring(self, name)

    def setStateInfo(self, *args):
        r"""
        setStateInfo(MocoProblem self, std::string const & name, MocoBounds arg3, MocoInitialBounds arg4={}, MocoFinalBounds arg5={})

        Parameters
        ----------
        name: std::string const &
        arg3: OpenSim::MocoBounds const &
        arg4: OpenSim::MocoInitialBounds const &
        arg5: OpenSim::MocoFinalBounds const &

        """

        args = list(args)
        if len(args) >= 2 and not type(args[1]) is MocoBounds:
            args[1] = self._convert(MocoBounds, args[1])
        if len(args) >= 3 and not type(args[2]) is MocoInitialBounds:
            args[2] = self._convert(MocoInitialBounds, args[2])
        if len(args) >= 4 and not type(args[3]) is MocoFinalBounds:
            args[3] = self._convert(MocoFinalBounds, args[3])


        return _moco.MocoProblem_setStateInfo(self, *args)


    def setStateInfoPattern(self, *args):
        r"""
        setStateInfoPattern(MocoProblem self, std::string const & pattern, MocoBounds bounds, MocoInitialBounds init={}, MocoFinalBounds arg5={})

        Parameters
        ----------
        pattern: std::string const &
        bounds: OpenSim::MocoBounds const &
        init: OpenSim::MocoInitialBounds const &
        arg5: OpenSim::MocoFinalBounds const &

        """

        args = list(args)
        if len(args) >= 2 and not type(args[1]) is MocoBounds:
            args[1] = self._convert(MocoBounds, args[1])
        if len(args) >= 3 and not type(args[2]) is MocoInitialBounds:
            args[2] = self._convert(MocoInitialBounds, args[2])
        if len(args) >= 4 and not type(args[3]) is MocoFinalBounds:
            args[3] = self._convert(MocoFinalBounds, args[3])


        return _moco.MocoProblem_setStateInfoPattern(self, *args)


    def printControlNamesWithSubstring(self, name):
        r"""
        printControlNamesWithSubstring(MocoProblem self, std::string const & name)

        Parameters
        ----------
        name: std::string const &

        """
        return _moco.MocoProblem_printControlNamesWithSubstring(self, name)

    def setControlInfo(self, *args):
        r"""
        setControlInfo(MocoProblem self, std::string const & name, MocoBounds arg3, MocoInitialBounds arg4={}, MocoFinalBounds arg5={})

        Parameters
        ----------
        name: std::string const &
        arg3: OpenSim::MocoBounds const &
        arg4: OpenSim::MocoInitialBounds const &
        arg5: OpenSim::MocoFinalBounds const &

        """

        args = list(args)
        if len(args) >= 2 and not type(args[1]) is MocoBounds:
            args[1] = self._convert(MocoBounds, args[1])
        if len(args) >= 3 and not type(args[2]) is MocoInitialBounds:
            args[2] = self._convert(MocoInitialBounds, args[2])
        if len(args) >= 4 and not type(args[3]) is MocoFinalBounds:
            args[3] = self._convert(MocoFinalBounds, args[3])


        return _moco.MocoProblem_setControlInfo(self, *args)


    def setControlInfoPattern(self, *args):
        r"""
        setControlInfoPattern(MocoProblem self, std::string const & pattern, MocoBounds arg3, MocoInitialBounds arg4={}, MocoFinalBounds arg5={})

        Parameters
        ----------
        pattern: std::string const &
        arg3: OpenSim::MocoBounds const &
        arg4: OpenSim::MocoInitialBounds const &
        arg5: OpenSim::MocoFinalBounds const &

        """

        args = list(args)
        if len(args) >= 2 and not type(args[1]) is MocoBounds:
            args[1] = self._convert(MocoBounds, args[1])
        if len(args) >= 3 and not type(args[2]) is MocoInitialBounds:
            args[2] = self._convert(MocoInitialBounds, args[2])
        if len(args) >= 4 and not type(args[3]) is MocoFinalBounds:
            args[3] = self._convert(MocoFinalBounds, args[3])


        return _moco.MocoProblem_setControlInfoPattern(self, *args)


    def setKinematicConstraintBounds(self, bounds):
        r"""
        setKinematicConstraintBounds(MocoProblem self, MocoBounds bounds)

        Parameters
        ----------
        bounds: OpenSim::MocoBounds const &

        """
        return _moco.MocoProblem_setKinematicConstraintBounds(self, bounds)

    def setMultiplierBounds(self, bounds):
        r"""
        setMultiplierBounds(MocoProblem self, MocoBounds bounds)

        Parameters
        ----------
        bounds: OpenSim::MocoBounds const &

        """
        return _moco.MocoProblem_setMultiplierBounds(self, bounds)

    def updGoal(self, name):
        r"""
        updGoal(MocoProblem self, std::string const & name) -> MocoGoal

        Parameters
        ----------
        name: std::string const &

        """
        return _moco.MocoProblem_updGoal(self, name)

    def updPhase(self, index=0):
        r"""
        updPhase(MocoProblem self, int index=0) -> MocoPhase

        Parameters
        ----------
        index: int

        """
        return _moco.MocoProblem_updPhase(self, index)

    def getPhase(self, index=0):
        r"""
        getPhase(MocoProblem self, int index=0) -> MocoPhase

        Parameters
        ----------
        index: int

        """
        return _moco.MocoProblem_getPhase(self, index)

    def createRep(self):
        r"""createRep(MocoProblem self) -> std::unique_ptr< OpenSim::MocoProblemRep >"""
        return _moco.MocoProblem_createRep(self)

    def _convert(self, cls, v):
        if hasattr(v, '__len__'):
            if len(v) > 2:
                raise Exception("Bounds cannot have more than 2 elements.")
            elif len(v) == 0:
                return cls()
            elif len(v) == 1:
                return cls(v[0])
            elif len(v) == 2:
                return cls(v[0], v[1])
            else:
                return cls()
        else:
            return cls(v)


    def setModel(self, model):
        r"""
        setModel(MocoProblem self, Model model)

        Parameters
        ----------
        model: OpenSim::Model *

        """
        val = _moco.MocoProblem_setModel(self, model)

        model._markAdopted()


        return val


    def addParameter(self, ptr):
        r"""
        addParameter(MocoProblem self, MocoParameter ptr)

        Parameters
        ----------
        ptr: OpenSim::MocoParameter *

        """
        val = _moco.MocoProblem_addParameter(self, ptr)

        ptr._markAdopted()


        return val


    def addGoal(self, ptr):
        r"""
        addGoal(MocoProblem self, MocoGoal ptr)

        Parameters
        ----------
        ptr: OpenSim::MocoGoal *

        """
        val = _moco.MocoProblem_addGoal(self, ptr)

        ptr._markAdopted()


        return val


    def addPathConstraint(self, ptr):
        r"""
        addPathConstraint(MocoProblem self, MocoPathConstraint ptr)

        Parameters
        ----------
        ptr: OpenSim::MocoPathConstraint *

        """
        val = _moco.MocoProblem_addPathConstraint(self, ptr)

        ptr._markAdopted()


        return val

    __swig_destroy__ = _moco.delete_MocoProblem

# Register MocoProblem in _moco:
_moco.MocoProblem_swigregister(MocoProblem)

def MocoProblem_safeDownCast(obj):
    r"""
    MocoProblem_safeDownCast(OpenSimObject obj) -> MocoProblem

    Parameters
    ----------
    obj: OpenSim::Object *

    """
    return _moco.MocoProblem_safeDownCast(obj)

def MocoProblem_getClassName():
    r"""MocoProblem_getClassName() -> std::string const &"""
    return _moco.MocoProblem_getClassName()

class MocoParameter(opensim.common.OpenSimObject):
    r"""Proxy of C++ OpenSim::MocoParameter class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def safeDownCast(obj):
        r"""
        safeDownCast(OpenSimObject obj) -> MocoParameter

        Parameters
        ----------
        obj: OpenSim::Object *

        """
        return _moco.MocoParameter_safeDownCast(obj)

    def assign(self, aObject):
        r"""
        assign(MocoParameter self, OpenSimObject aObject)

        Parameters
        ----------
        aObject: OpenSim::Object &

        """
        return _moco.MocoParameter_assign(self, aObject)

    @staticmethod
    def getClassName():
        r"""getClassName() -> std::string const &"""
        return _moco.MocoParameter_getClassName()

    def clone(self):
        r"""clone(MocoParameter self) -> MocoParameter"""
        return _moco.MocoParameter_clone(self)

    def getConcreteClassName(self):
        r"""getConcreteClassName(MocoParameter self) -> std::string const &"""
        return _moco.MocoParameter_getConcreteClassName(self)

    def __init__(self, *args):
        r"""
        __init__(MocoParameter self) -> MocoParameter
        __init__(MocoParameter self, std::string const & name, StdVectorString componentPaths, std::string const & propertyName, MocoBounds arg5, int const & propertyElt) -> MocoParameter

        Parameters
        ----------
        name: std::string const &
        componentPaths: std::vector< std::string,std::allocator< std::string > > const &
        propertyName: std::string const &
        arg5: OpenSim::MocoBounds const &
        propertyElt: int const &

        __init__(MocoParameter self, std::string const & name, std::string const & componentPath, std::string const & propertyName, MocoBounds arg5) -> MocoParameter

        Parameters
        ----------
        name: std::string const &
        componentPath: std::string const &
        propertyName: std::string const &
        arg5: OpenSim::MocoBounds const &

        __init__(MocoParameter self, std::string const & name, std::string const & componentPath, std::string const & propertyName, MocoBounds arg5, int const & propertyElt) -> MocoParameter

        Parameters
        ----------
        name: std::string const &
        componentPath: std::string const &
        propertyName: std::string const &
        arg5: OpenSim::MocoBounds const &
        propertyElt: int const &

        __init__(MocoParameter self, std::string const & name, StdVectorString componentPaths, std::string const & propertyName, MocoBounds arg5) -> MocoParameter

        Parameters
        ----------
        name: std::string const &
        componentPaths: std::vector< std::string,std::allocator< std::string > > const &
        propertyName: std::string const &
        arg5: OpenSim::MocoBounds const &

        """
        _moco.MocoParameter_swiginit(self, _moco.new_MocoParameter(*args))

    def getBounds(self):
        r"""getBounds(MocoParameter self) -> MocoBounds"""
        return _moco.MocoParameter_getBounds(self)

    def getPropertyName(self):
        r"""getPropertyName(MocoParameter self) -> std::string"""
        return _moco.MocoParameter_getPropertyName(self)

    def getComponentPaths(self):
        r"""getComponentPaths(MocoParameter self) -> StdVectorString"""
        return _moco.MocoParameter_getComponentPaths(self)

    def setBounds(self, bounds):
        r"""
        setBounds(MocoParameter self, MocoBounds bounds)

        Parameters
        ----------
        bounds: OpenSim::MocoBounds const &

        """
        return _moco.MocoParameter_setBounds(self, bounds)

    def setPropertyName(self, propertyName):
        r"""
        setPropertyName(MocoParameter self, std::string const & propertyName)

        Parameters
        ----------
        propertyName: std::string const &

        """
        return _moco.MocoParameter_setPropertyName(self, propertyName)

    def appendComponentPath(self, componentPath):
        r"""
        appendComponentPath(MocoParameter self, std::string const & componentPath)

        Parameters
        ----------
        componentPath: std::string const &

        """
        return _moco.MocoParameter_appendComponentPath(self, componentPath)

    def initializeOnModel(self, model):
        r"""
        initializeOnModel(MocoParameter self, Model model)

        Parameters
        ----------
        model: OpenSim::Model &

        """
        return _moco.MocoParameter_initializeOnModel(self, model)

    def applyParameterToModelProperties(self, value):
        r"""
        applyParameterToModelProperties(MocoParameter self, double const & value)

        Parameters
        ----------
        value: double const &

        """
        return _moco.MocoParameter_applyParameterToModelProperties(self, value)

    def printDescription(self):
        r"""printDescription(MocoParameter self)"""
        return _moco.MocoParameter_printDescription(self)
    __swig_destroy__ = _moco.delete_MocoParameter

# Register MocoParameter in _moco:
_moco.MocoParameter_swigregister(MocoParameter)

def MocoParameter_safeDownCast(obj):
    r"""
    MocoParameter_safeDownCast(OpenSimObject obj) -> MocoParameter

    Parameters
    ----------
    obj: OpenSim::Object *

    """
    return _moco.MocoParameter_safeDownCast(obj)

def MocoParameter_getClassName():
    r"""MocoParameter_getClassName() -> std::string const &"""
    return _moco.MocoParameter_getClassName()

class MocoTrajectoryIsSealed(opensim.common.OpenSimException):
    r"""Proxy of C++ OpenSim::MocoTrajectoryIsSealed class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, file, line, func):
        r"""
        __init__(MocoTrajectoryIsSealed self, std::string const & file, size_t line, std::string const & func) -> MocoTrajectoryIsSealed

        Parameters
        ----------
        file: std::string const &
        line: size_t
        func: std::string const &

        """
        _moco.MocoTrajectoryIsSealed_swiginit(self, _moco.new_MocoTrajectoryIsSealed(file, line, func))
    __swig_destroy__ = _moco.delete_MocoTrajectoryIsSealed

# Register MocoTrajectoryIsSealed in _moco:
_moco.MocoTrajectoryIsSealed_swigregister(MocoTrajectoryIsSealed)

class MocoTrajectory(object):
    r"""Proxy of C++ OpenSim::MocoTrajectory class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _moco.delete_MocoTrajectory

    def clone(self):
        r"""clone(MocoTrajectory self) -> MocoTrajectory"""
        return _moco.MocoTrajectory_clone(self)

    def empty(self):
        r"""empty(MocoTrajectory self) -> bool"""
        return _moco.MocoTrajectory_empty(self)

    def hasCoordinateStates(self):
        r"""hasCoordinateStates(MocoTrajectory self) -> bool"""
        return _moco.MocoTrajectory_hasCoordinateStates(self)

    def setNumTimes(self, numTimes):
        r"""
        setNumTimes(MocoTrajectory self, int numTimes)

        Parameters
        ----------
        numTimes: int

        """
        return _moco.MocoTrajectory_setNumTimes(self, numTimes)

    def resampleWithNumTimes(self, numTimes):
        r"""
        resampleWithNumTimes(MocoTrajectory self, int numTimes) -> double

        Parameters
        ----------
        numTimes: int

        """
        return _moco.MocoTrajectory_resampleWithNumTimes(self, numTimes)

    def resampleWithInterval(self, desiredTimeInterval):
        r"""
        resampleWithInterval(MocoTrajectory self, double desiredTimeInterval) -> double

        Parameters
        ----------
        desiredTimeInterval: double

        """
        return _moco.MocoTrajectory_resampleWithInterval(self, desiredTimeInterval)

    def resampleWithFrequency(self, desiredNumTimePointsPerSecond):
        r"""
        resampleWithFrequency(MocoTrajectory self, double desiredNumTimePointsPerSecond) -> double

        Parameters
        ----------
        desiredNumTimePointsPerSecond: double

        """
        return _moco.MocoTrajectory_resampleWithFrequency(self, desiredNumTimePointsPerSecond)

    def resample(self, newTime):
        r"""
        resample(MocoTrajectory self, Vector newTime)

        Parameters
        ----------
        newTime: SimTK::Vector

        """
        return _moco.MocoTrajectory_resample(self, newTime)

    def setParameter(self, name, value):
        r"""
        setParameter(MocoTrajectory self, std::string const & name, SimTK::Real const & value)

        Parameters
        ----------
        name: std::string const &
        value: SimTK::Real const &

        """
        return _moco.MocoTrajectory_setParameter(self, name, value)

    def setStatesTrajectory(self, states, allowMissingColumns=False, allowExtraColumns=False):
        r"""
        setStatesTrajectory(MocoTrajectory self, TimeSeriesTable states, bool allowMissingColumns=False, bool allowExtraColumns=False)

        Parameters
        ----------
        states: OpenSim::TimeSeriesTable const &
        allowMissingColumns: bool
        allowExtraColumns: bool

        """
        return _moco.MocoTrajectory_setStatesTrajectory(self, states, allowMissingColumns, allowExtraColumns)

    def insertStatesTrajectory(self, subsetOfStates, overwrite=False):
        r"""
        insertStatesTrajectory(MocoTrajectory self, TimeSeriesTable subsetOfStates, bool overwrite=False)

        Parameters
        ----------
        subsetOfStates: OpenSim::TimeSeriesTable const &
        overwrite: bool

        """
        return _moco.MocoTrajectory_insertStatesTrajectory(self, subsetOfStates, overwrite)

    def insertControlsTrajectory(self, subsetOfControls, overwrite=False):
        r"""
        insertControlsTrajectory(MocoTrajectory self, TimeSeriesTable subsetOfControls, bool overwrite=False)

        Parameters
        ----------
        subsetOfControls: OpenSim::TimeSeriesTable const &
        overwrite: bool

        """
        return _moco.MocoTrajectory_insertControlsTrajectory(self, subsetOfControls, overwrite)

    def generateSpeedsFromValues(self):
        r"""generateSpeedsFromValues(MocoTrajectory self)"""
        return _moco.MocoTrajectory_generateSpeedsFromValues(self)

    def generateAccelerationsFromValues(self):
        r"""generateAccelerationsFromValues(MocoTrajectory self)"""
        return _moco.MocoTrajectory_generateAccelerationsFromValues(self)

    def generateAccelerationsFromSpeeds(self):
        r"""generateAccelerationsFromSpeeds(MocoTrajectory self)"""
        return _moco.MocoTrajectory_generateAccelerationsFromSpeeds(self)

    def getNumTimes(self):
        r"""getNumTimes(MocoTrajectory self) -> int"""
        return _moco.MocoTrajectory_getNumTimes(self)

    def getTime(self):
        r"""getTime(MocoTrajectory self) -> Vector"""
        return _moco.MocoTrajectory_getTime(self)

    def getInitialTime(self):
        r"""getInitialTime(MocoTrajectory self) -> double"""
        return _moco.MocoTrajectory_getInitialTime(self)

    def getFinalTime(self):
        r"""getFinalTime(MocoTrajectory self) -> double"""
        return _moco.MocoTrajectory_getFinalTime(self)

    def getNumStates(self):
        r"""getNumStates(MocoTrajectory self) -> int"""
        return _moco.MocoTrajectory_getNumStates(self)

    def getNumControls(self):
        r"""getNumControls(MocoTrajectory self) -> int"""
        return _moco.MocoTrajectory_getNumControls(self)

    def getNumMultipliers(self):
        r"""getNumMultipliers(MocoTrajectory self) -> int"""
        return _moco.MocoTrajectory_getNumMultipliers(self)

    def getNumDerivatives(self):
        r"""getNumDerivatives(MocoTrajectory self) -> int"""
        return _moco.MocoTrajectory_getNumDerivatives(self)

    def getNumParameters(self):
        r"""getNumParameters(MocoTrajectory self) -> int"""
        return _moco.MocoTrajectory_getNumParameters(self)

    def getStateNames(self):
        r"""getStateNames(MocoTrajectory self) -> StdVectorString"""
        return _moco.MocoTrajectory_getStateNames(self)

    def getControlNames(self):
        r"""getControlNames(MocoTrajectory self) -> StdVectorString"""
        return _moco.MocoTrajectory_getControlNames(self)

    def getMultiplierNames(self):
        r"""getMultiplierNames(MocoTrajectory self) -> StdVectorString"""
        return _moco.MocoTrajectory_getMultiplierNames(self)

    def getDerivativeNames(self):
        r"""getDerivativeNames(MocoTrajectory self) -> StdVectorString"""
        return _moco.MocoTrajectory_getDerivativeNames(self)

    def getParameterNames(self):
        r"""getParameterNames(MocoTrajectory self) -> StdVectorString"""
        return _moco.MocoTrajectory_getParameterNames(self)

    def getState(self, name):
        r"""
        getState(MocoTrajectory self, std::string const & name) -> VectorView

        Parameters
        ----------
        name: std::string const &

        """
        return _moco.MocoTrajectory_getState(self, name)

    def getControl(self, name):
        r"""
        getControl(MocoTrajectory self, std::string const & name) -> VectorView

        Parameters
        ----------
        name: std::string const &

        """
        return _moco.MocoTrajectory_getControl(self, name)

    def getMultiplier(self, name):
        r"""
        getMultiplier(MocoTrajectory self, std::string const & name) -> VectorView

        Parameters
        ----------
        name: std::string const &

        """
        return _moco.MocoTrajectory_getMultiplier(self, name)

    def getDerivative(self, name):
        r"""
        getDerivative(MocoTrajectory self, std::string const & name) -> VectorView

        Parameters
        ----------
        name: std::string const &

        """
        return _moco.MocoTrajectory_getDerivative(self, name)

    def getParameter(self, name):
        r"""
        getParameter(MocoTrajectory self, std::string const & name) -> SimTK::Real const &

        Parameters
        ----------
        name: std::string const &

        """
        return _moco.MocoTrajectory_getParameter(self, name)

    def getStatesTrajectory(self):
        r"""getStatesTrajectory(MocoTrajectory self) -> Matrix"""
        return _moco.MocoTrajectory_getStatesTrajectory(self)

    def getControlsTrajectory(self):
        r"""getControlsTrajectory(MocoTrajectory self) -> Matrix"""
        return _moco.MocoTrajectory_getControlsTrajectory(self)

    def getMultipliersTrajectory(self):
        r"""getMultipliersTrajectory(MocoTrajectory self) -> Matrix"""
        return _moco.MocoTrajectory_getMultipliersTrajectory(self)

    def getDerivativesTrajectory(self):
        r"""getDerivativesTrajectory(MocoTrajectory self) -> Matrix"""
        return _moco.MocoTrajectory_getDerivativesTrajectory(self)

    def getParameters(self):
        r"""getParameters(MocoTrajectory self) -> RowVector"""
        return _moco.MocoTrajectory_getParameters(self)

    def isCompatible(self, arg2, requireAccelerations=False, throwOnError=False):
        r"""
        isCompatible(MocoTrajectory self, MocoProblemRep arg2, bool requireAccelerations=False, bool throwOnError=False) -> bool

        Parameters
        ----------
        arg2: OpenSim::MocoProblemRep const &
        requireAccelerations: bool
        throwOnError: bool

        """
        return _moco.MocoTrajectory_isCompatible(self, arg2, requireAccelerations, throwOnError)

    def isNumericallyEqual(self, *args):
        r"""
        isNumericallyEqual(MocoTrajectory self, MocoTrajectory other, double tol=SimTK::NTraits< SimTK::Real >::getDefaultTolerance()) -> bool

        Parameters
        ----------
        other: OpenSim::MocoTrajectory const &
        tol: double

        """
        return _moco.MocoTrajectory_isNumericallyEqual(self, *args)

    def compareContinuousVariablesRMS(self, *args):
        r"""
        compareContinuousVariablesRMS(MocoTrajectory self, MocoTrajectory other, std::map< std::string,std::vector< std::string,std::allocator< std::string > >,std::less< std::string >,std::allocator< std::pair< std::string const,std::vector< std::string,std::allocator< std::string > > > > > columnsToUse={}) -> double

        Parameters
        ----------
        other: OpenSim::MocoTrajectory const &
        columnsToUse: std::map< std::string,std::vector< std::string,std::allocator< std::string > >,std::less< std::string >,std::allocator< std::pair< std::string const,std::vector< std::string,std::allocator< std::string > > > > >

        """
        return _moco.MocoTrajectory_compareContinuousVariablesRMS(self, *args)

    def compareContinuousVariablesRMSPattern(self, other, columnType, pattern):
        r"""
        compareContinuousVariablesRMSPattern(MocoTrajectory self, MocoTrajectory other, std::string columnType, std::string pattern) -> double

        Parameters
        ----------
        other: OpenSim::MocoTrajectory const &
        columnType: std::string
        pattern: std::string

        """
        return _moco.MocoTrajectory_compareContinuousVariablesRMSPattern(self, other, columnType, pattern)

    def compareParametersRMS(self, *args):
        r"""
        compareParametersRMS(MocoTrajectory self, MocoTrajectory other, StdVectorString parameterNames={}) -> double

        Parameters
        ----------
        other: OpenSim::MocoTrajectory const &
        parameterNames: std::vector< std::string,std::allocator< std::string > >

        """
        return _moco.MocoTrajectory_compareParametersRMS(self, *args)

    def write(self, filepath):
        r"""
        write(MocoTrajectory self, std::string const & filepath)

        Parameters
        ----------
        filepath: std::string const &

        """
        return _moco.MocoTrajectory_write(self, filepath)

    def exportToStatesTable(self):
        r"""exportToStatesTable(MocoTrajectory self) -> TimeSeriesTable"""
        return _moco.MocoTrajectory_exportToStatesTable(self)

    def exportToControlsTable(self):
        r"""exportToControlsTable(MocoTrajectory self) -> TimeSeriesTable"""
        return _moco.MocoTrajectory_exportToControlsTable(self)

    def exportToStatesTrajectory(self, *args):
        r"""
        exportToStatesTrajectory(MocoTrajectory self, MocoProblem arg2) -> StatesTrajectory

        Parameters
        ----------
        arg2: OpenSim::MocoProblem const &

        exportToStatesTrajectory(MocoTrajectory self, Model arg2) -> StatesTrajectory

        Parameters
        ----------
        arg2: OpenSim::Model const &

        """
        return _moco.MocoTrajectory_exportToStatesTrajectory(self, *args)

    def randomizeReplace(self, *args):
        r"""
        randomizeReplace(MocoTrajectory self, SimTK::Random const & randGen=SimTK::Random::Uniform(-0.1, 0.1))

        Parameters
        ----------
        randGen: SimTK::Random const &

        """
        return _moco.MocoTrajectory_randomizeReplace(self, *args)

    def randomizeAdd(self, *args):
        r"""
        randomizeAdd(MocoTrajectory self, SimTK::Random const & randGen=SimTK::Random::Uniform(-0.1, 0.1))

        Parameters
        ----------
        randGen: SimTK::Random const &

        """
        return _moco.MocoTrajectory_randomizeAdd(self, *args)

    @staticmethod
    def createFromStatesControlsTables(arg1, statesTrajectory, controlsTrajectory):
        r"""
        createFromStatesControlsTables(MocoProblemRep arg1, TimeSeriesTable statesTrajectory, TimeSeriesTable controlsTrajectory) -> MocoTrajectory

        Parameters
        ----------
        arg1: OpenSim::MocoProblemRep const &
        statesTrajectory: OpenSim::TimeSeriesTable const &
        controlsTrajectory: OpenSim::TimeSeriesTable const &

        """
        return _moco.MocoTrajectory_createFromStatesControlsTables(arg1, statesTrajectory, controlsTrajectory)

    def __init__(self, *args):
        r"""
        __init__(MocoTrajectory self) -> MocoTrajectory
        __init__(MocoTrajectory self, StdVectorString state_names, StdVectorString control_names, StdVectorString multiplier_names, StdVectorString parameter_names) -> MocoTrajectory

        Parameters
        ----------
        state_names: std::vector< std::string,std::allocator< std::string > >
        control_names: std::vector< std::string,std::allocator< std::string > >
        multiplier_names: std::vector< std::string,std::allocator< std::string > >
        parameter_names: std::vector< std::string,std::allocator< std::string > >

        __init__(MocoTrajectory self, StdVectorString state_names, StdVectorString control_names, StdVectorString multiplier_names, StdVectorString derivative_names, StdVectorString parameter_names) -> MocoTrajectory

        Parameters
        ----------
        state_names: std::vector< std::string,std::allocator< std::string > >
        control_names: std::vector< std::string,std::allocator< std::string > >
        multiplier_names: std::vector< std::string,std::allocator< std::string > >
        derivative_names: std::vector< std::string,std::allocator< std::string > >
        parameter_names: std::vector< std::string,std::allocator< std::string > >

        __init__(MocoTrajectory self, Vector time, StdVectorString state_names, StdVectorString control_names, StdVectorString multiplier_names, StdVectorString parameter_names, Matrix statesTrajectory, Matrix controlsTrajectory, Matrix multipliersTrajectory, RowVector parameters) -> MocoTrajectory

        Parameters
        ----------
        time: SimTK::Vector const &
        state_names: std::vector< std::string,std::allocator< std::string > >
        control_names: std::vector< std::string,std::allocator< std::string > >
        multiplier_names: std::vector< std::string,std::allocator< std::string > >
        parameter_names: std::vector< std::string,std::allocator< std::string > >
        statesTrajectory: SimTK::Matrix const &
        controlsTrajectory: SimTK::Matrix const &
        multipliersTrajectory: SimTK::Matrix const &
        parameters: SimTK::RowVector const &

        __init__(MocoTrajectory self, Vector time, StdVectorString state_names, StdVectorString control_names, StdVectorString multiplier_names, StdVectorString derivative_names, StdVectorString parameter_names, Matrix statesTrajectory, Matrix controlsTrajectory, Matrix multipliersTrajectory, Matrix derivativesTrajectory, RowVector parameters) -> MocoTrajectory

        Parameters
        ----------
        time: SimTK::Vector const &
        state_names: std::vector< std::string,std::allocator< std::string > >
        control_names: std::vector< std::string,std::allocator< std::string > >
        multiplier_names: std::vector< std::string,std::allocator< std::string > >
        derivative_names: std::vector< std::string,std::allocator< std::string > >
        parameter_names: std::vector< std::string,std::allocator< std::string > >
        statesTrajectory: SimTK::Matrix const &
        controlsTrajectory: SimTK::Matrix const &
        multipliersTrajectory: SimTK::Matrix const &
        derivativesTrajectory: SimTK::Matrix const &
        parameters: SimTK::RowVector const &

        __init__(MocoTrajectory self, std::string const & filepath) -> MocoTrajectory

        Parameters
        ----------
        filepath: std::string const &

        __init__(MocoTrajectory self, int ntime, StdVectorString state_names, StdVectorString control_names, StdVectorString multiplier_names, StdVectorString parameter_names, int nrowstates, int nrowcontrols, int nrowmults, int nparams) -> MocoTrajectory

        Parameters
        ----------
        ntime: int
        state_names: std::vector< std::string,std::allocator< std::string > >
        control_names: std::vector< std::string,std::allocator< std::string > >
        multiplier_names: std::vector< std::string,std::allocator< std::string > >
        parameter_names: std::vector< std::string,std::allocator< std::string > >
        nrowstates: int
        nrowcontrols: int
        nrowmults: int
        nparams: int

        __init__(MocoTrajectory self, int ntime, StdVectorString state_names, StdVectorString control_names, StdVectorString multiplier_names, StdVectorString derivative_names, StdVectorString parameter_names, int nrowstates, int nrowcontrols, int nrowmults, int nrowderivs, int nparams) -> MocoTrajectory

        Parameters
        ----------
        ntime: int
        state_names: std::vector< std::string,std::allocator< std::string > >
        control_names: std::vector< std::string,std::allocator< std::string > >
        multiplier_names: std::vector< std::string,std::allocator< std::string > >
        derivative_names: std::vector< std::string,std::allocator< std::string > >
        parameter_names: std::vector< std::string,std::allocator< std::string > >
        nrowstates: int
        nrowcontrols: int
        nrowmults: int
        nrowderivs: int
        nparams: int

        """
        _moco.MocoTrajectory_swiginit(self, _moco.new_MocoTrajectory(*args))

    def setTime(self, *args):
        r"""
        setTime(MocoTrajectory self, Vector time)

        Parameters
        ----------
        time: SimTK::Vector const &

        setTime(MocoTrajectory self, StdVectorDouble time)

        Parameters
        ----------
        time: std::vector< double,std::allocator< double > > const &

        """
        return _moco.MocoTrajectory_setTime(self, *args)

    def setState(self, *args):
        r"""
        setState(MocoTrajectory self, std::string const & name, Vector trajectory)

        Parameters
        ----------
        name: std::string const &
        trajectory: SimTK::Vector const &

        setState(MocoTrajectory self, std::string const & name, StdVectorDouble traj)

        Parameters
        ----------
        name: std::string const &
        traj: std::vector< double,std::allocator< double > > const &

        """
        return _moco.MocoTrajectory_setState(self, *args)

    def setControl(self, *args):
        r"""
        setControl(MocoTrajectory self, std::string const & name, Vector trajectory)

        Parameters
        ----------
        name: std::string const &
        trajectory: SimTK::Vector const &

        setControl(MocoTrajectory self, std::string const & name, StdVectorDouble traj)

        Parameters
        ----------
        name: std::string const &
        traj: std::vector< double,std::allocator< double > > const &

        """
        return _moco.MocoTrajectory_setControl(self, *args)

    def setMultiplier(self, *args):
        r"""
        setMultiplier(MocoTrajectory self, std::string const & name, Vector trajectory)

        Parameters
        ----------
        name: std::string const &
        trajectory: SimTK::Vector const &

        setMultiplier(MocoTrajectory self, std::string const & name, StdVectorDouble traj)

        Parameters
        ----------
        name: std::string const &
        traj: std::vector< double,std::allocator< double > > const &

        """
        return _moco.MocoTrajectory_setMultiplier(self, *args)

    def setDerivative(self, *args):
        r"""
        setDerivative(MocoTrajectory self, std::string const & name, Vector trajectory)

        Parameters
        ----------
        name: std::string const &
        trajectory: SimTK::Vector const &

        setDerivative(MocoTrajectory self, std::string const & name, StdVectorDouble traj)

        Parameters
        ----------
        name: std::string const &
        traj: std::vector< double,std::allocator< double > > const &

        """
        return _moco.MocoTrajectory_setDerivative(self, *args)

    def _getTimeMat(self, n):
        r"""
        _getTimeMat(MocoTrajectory self, int n)

        Parameters
        ----------
        n: int

        """
        return _moco.MocoTrajectory__getTimeMat(self, n)

    def _getStateMat(self, name, n):
        r"""
        _getStateMat(MocoTrajectory self, std::string name, int n)

        Parameters
        ----------
        name: std::string
        n: int

        """
        return _moco.MocoTrajectory__getStateMat(self, name, n)

    def _getControlMat(self, name, n):
        r"""
        _getControlMat(MocoTrajectory self, std::string name, int n)

        Parameters
        ----------
        name: std::string
        n: int

        """
        return _moco.MocoTrajectory__getControlMat(self, name, n)

    def _getMultiplierMat(self, name, n):
        r"""
        _getMultiplierMat(MocoTrajectory self, std::string name, int n)

        Parameters
        ----------
        name: std::string
        n: int

        """
        return _moco.MocoTrajectory__getMultiplierMat(self, name, n)

    def _getDerivativeMat(self, name, n):
        r"""
        _getDerivativeMat(MocoTrajectory self, std::string name, int n)

        Parameters
        ----------
        name: std::string
        n: int

        """
        return _moco.MocoTrajectory__getDerivativeMat(self, name, n)

    def _getParametersMat(self, n):
        r"""
        _getParametersMat(MocoTrajectory self, int n)

        Parameters
        ----------
        n: int

        """
        return _moco.MocoTrajectory__getParametersMat(self, n)

    def _getStatesTrajectoryMat(self, nrow):
        r"""
        _getStatesTrajectoryMat(MocoTrajectory self, int nrow)

        Parameters
        ----------
        nrow: int

        """
        return _moco.MocoTrajectory__getStatesTrajectoryMat(self, nrow)

    def _getControlsTrajectoryMat(self, nrow):
        r"""
        _getControlsTrajectoryMat(MocoTrajectory self, int nrow)

        Parameters
        ----------
        nrow: int

        """
        return _moco.MocoTrajectory__getControlsTrajectoryMat(self, nrow)

    def _getMultipliersTrajectoryMat(self, nrow):
        r"""
        _getMultipliersTrajectoryMat(MocoTrajectory self, int nrow)

        Parameters
        ----------
        nrow: int

        """
        return _moco.MocoTrajectory__getMultipliersTrajectoryMat(self, nrow)

    def _getDerivativesTrajectoryMat(self, nrow):
        r"""
        _getDerivativesTrajectoryMat(MocoTrajectory self, int nrow)

        Parameters
        ----------
        nrow: int

        """
        return _moco.MocoTrajectory__getDerivativesTrajectoryMat(self, nrow)

    def getTimeMat(self):
        return self._getTimeMat(self.getNumTimes())
    def getStateMat(self, name):
        return self._getStateMat(name, self.getNumTimes())
    def getControlMat(self, name):
        return self._getControlMat(name, self.getNumTimes())
    def getMultiplierMat(self, name):
        return self._getMultiplierMat(name, self.getNumTimes())
    def getDerivativeMat(self, name):
        return self._getDerivativeMat(name, self.getNumTimes())
    def getParametersMat(self):
        return self._getParametersMat(len(self.getParameterNames()))

    def getStatesTrajectoryMat(self):
        import numpy as np
        mat = np.empty([self.getNumTimes(), len(self.getStateNames())])
        self._getStatesTrajectoryMat(mat)
        return mat
    def getControlsTrajectoryMat(self):
        import numpy as np
        mat = np.empty([self.getNumTimes(), len(self.getControlNames())])
        self._getControlsTrajectoryMat(mat)
        return mat
    def getMultipliersTrajectoryMat(self):
        import numpy as np
        mat = np.empty([self.getNumTimes(), len(self.getMultiplierNames())])
        self._getMultipliersTrajectoryMat(mat)
        return mat
    def getDerivativesTrajectoryMat(self):
        import numpy as np
        mat = np.empty([self.getNumTimes(), len(self.getDerivativeNames())])
        self._getDerivativesTrajectoryMat(mat)
        return mat



# Register MocoTrajectory in _moco:
_moco.MocoTrajectory_swigregister(MocoTrajectory)

def MocoTrajectory_createFromStatesControlsTables(arg1, statesTrajectory, controlsTrajectory):
    r"""
    MocoTrajectory_createFromStatesControlsTables(MocoProblemRep arg1, TimeSeriesTable statesTrajectory, TimeSeriesTable controlsTrajectory) -> MocoTrajectory

    Parameters
    ----------
    arg1: OpenSim::MocoProblemRep const &
    statesTrajectory: OpenSim::TimeSeriesTable const &
    controlsTrajectory: OpenSim::TimeSeriesTable const &

    """
    return _moco.MocoTrajectory_createFromStatesControlsTables(arg1, statesTrajectory, controlsTrajectory)

class MocoSolution(MocoTrajectory):
    r"""Proxy of C++ OpenSim::MocoSolution class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def clone(self):
        r"""clone(MocoSolution self) -> MocoSolution"""
        return _moco.MocoSolution_clone(self)

    def success(self):
        r"""success(MocoSolution self) -> bool"""
        return _moco.MocoSolution_success(self)

    def getObjective(self):
        r"""getObjective(MocoSolution self) -> double"""
        return _moco.MocoSolution_getObjective(self)

    def __nonzero__(self):
        return _moco.MocoSolution___nonzero__(self)
    __bool__ = __nonzero__



    def getStatus(self):
        r"""getStatus(MocoSolution self) -> std::string const &"""
        return _moco.MocoSolution_getStatus(self)

    def getNumIterations(self):
        r"""getNumIterations(MocoSolution self) -> int"""
        return _moco.MocoSolution_getNumIterations(self)

    def getSolverDuration(self):
        r"""getSolverDuration(MocoSolution self) -> double"""
        return _moco.MocoSolution_getSolverDuration(self)

    def getNumObjectiveTerms(self):
        r"""getNumObjectiveTerms(MocoSolution self) -> int"""
        return _moco.MocoSolution_getNumObjectiveTerms(self)

    def getObjectiveTermNames(self):
        r"""getObjectiveTermNames(MocoSolution self) -> StdVectorString"""
        return _moco.MocoSolution_getObjectiveTermNames(self)

    def getObjectiveTerm(self, name):
        r"""
        getObjectiveTerm(MocoSolution self, std::string const & name) -> double

        Parameters
        ----------
        name: std::string const &

        """
        return _moco.MocoSolution_getObjectiveTerm(self, name)

    def getObjectiveTermByIndex(self, index):
        r"""
        getObjectiveTermByIndex(MocoSolution self, int index) -> double

        Parameters
        ----------
        index: int

        """
        return _moco.MocoSolution_getObjectiveTermByIndex(self, index)

    def printObjectiveBreakdown(self):
        r"""printObjectiveBreakdown(MocoSolution self)"""
        return _moco.MocoSolution_printObjectiveBreakdown(self)

    def unseal(self):
        r"""unseal(MocoSolution self) -> MocoSolution"""
        return _moco.MocoSolution_unseal(self)

    def seal(self):
        r"""seal(MocoSolution self) -> MocoSolution"""
        return _moco.MocoSolution_seal(self)

    def isSealed(self):
        r"""isSealed(MocoSolution self) -> bool"""
        return _moco.MocoSolution_isSealed(self)

    def __init__(self):
        r"""__init__(MocoSolution self) -> MocoSolution"""
        _moco.MocoSolution_swiginit(self, _moco.new_MocoSolution())
    __swig_destroy__ = _moco.delete_MocoSolution

# Register MocoSolution in _moco:
_moco.MocoSolution_swigregister(MocoSolution)

class MocoSolver(opensim.common.OpenSimObject):
    r"""Proxy of C++ OpenSim::MocoSolver class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    @staticmethod
    def safeDownCast(obj):
        r"""
        safeDownCast(OpenSimObject obj) -> MocoSolver

        Parameters
        ----------
        obj: OpenSim::Object *

        """
        return _moco.MocoSolver_safeDownCast(obj)

    def assign(self, aObject):
        r"""
        assign(MocoSolver self, OpenSimObject aObject)

        Parameters
        ----------
        aObject: OpenSim::Object &

        """
        return _moco.MocoSolver_assign(self, aObject)

    @staticmethod
    def getClassName():
        r"""getClassName() -> std::string const &"""
        return _moco.MocoSolver_getClassName()

    def clone(self):
        r"""clone(MocoSolver self) -> MocoSolver"""
        return _moco.MocoSolver_clone(self)

    def getConcreteClassName(self):
        r"""getConcreteClassName(MocoSolver self) -> std::string const &"""
        return _moco.MocoSolver_getConcreteClassName(self)
    __swig_destroy__ = _moco.delete_MocoSolver

    def resetProblem(self, problem):
        r"""
        resetProblem(MocoSolver self, MocoProblem problem)

        Parameters
        ----------
        problem: OpenSim::MocoProblem const &

        """
        return _moco.MocoSolver_resetProblem(self, problem)

    def createGuessTimeStepping(self):
        r"""createGuessTimeStepping(MocoSolver self) -> MocoTrajectory"""
        return _moco.MocoSolver_createGuessTimeStepping(self)

# Register MocoSolver in _moco:
_moco.MocoSolver_swigregister(MocoSolver)

def MocoSolver_safeDownCast(obj):
    r"""
    MocoSolver_safeDownCast(OpenSimObject obj) -> MocoSolver

    Parameters
    ----------
    obj: OpenSim::Object *

    """
    return _moco.MocoSolver_safeDownCast(obj)

def MocoSolver_getClassName():
    r"""MocoSolver_getClassName() -> std::string const &"""
    return _moco.MocoSolver_getClassName()

class MocoDirectCollocationSolver(MocoSolver):
    r"""Proxy of C++ OpenSim::MocoDirectCollocationSolver class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    @staticmethod
    def safeDownCast(obj):
        r"""
        safeDownCast(OpenSimObject obj) -> MocoDirectCollocationSolver

        Parameters
        ----------
        obj: OpenSim::Object *

        """
        return _moco.MocoDirectCollocationSolver_safeDownCast(obj)

    def assign(self, aObject):
        r"""
        assign(MocoDirectCollocationSolver self, OpenSimObject aObject)

        Parameters
        ----------
        aObject: OpenSim::Object &

        """
        return _moco.MocoDirectCollocationSolver_assign(self, aObject)

    @staticmethod
    def getClassName():
        r"""getClassName() -> std::string const &"""
        return _moco.MocoDirectCollocationSolver_getClassName()

    def clone(self):
        r"""clone(MocoDirectCollocationSolver self) -> MocoDirectCollocationSolver"""
        return _moco.MocoDirectCollocationSolver_clone(self)

    def getConcreteClassName(self):
        r"""getConcreteClassName(MocoDirectCollocationSolver self) -> std::string const &"""
        return _moco.MocoDirectCollocationSolver_getConcreteClassName(self)

    def copyProperty_num_mesh_intervals(self, source):
        r"""
        copyProperty_num_mesh_intervals(MocoDirectCollocationSolver self, MocoDirectCollocationSolver source)

        Parameters
        ----------
        source: OpenSim::MocoDirectCollocationSolver::Self const &

        """
        return _moco.MocoDirectCollocationSolver_copyProperty_num_mesh_intervals(self, source)

    def append_num_mesh_intervals(self, value):
        r"""
        append_num_mesh_intervals(MocoDirectCollocationSolver self, int const & value) -> int

        Parameters
        ----------
        value: int const &

        """
        return _moco.MocoDirectCollocationSolver_append_num_mesh_intervals(self, value)

    def constructProperty_num_mesh_intervals(self, initValue):
        r"""
        constructProperty_num_mesh_intervals(MocoDirectCollocationSolver self, int const & initValue)

        Parameters
        ----------
        initValue: int const &

        """
        return _moco.MocoDirectCollocationSolver_constructProperty_num_mesh_intervals(self, initValue)

    def get_num_mesh_intervals(self, *args):
        r"""
        get_num_mesh_intervals(MocoDirectCollocationSolver self, int i) -> int const

        Parameters
        ----------
        i: int

        get_num_mesh_intervals(MocoDirectCollocationSolver self) -> int const &
        """
        return _moco.MocoDirectCollocationSolver_get_num_mesh_intervals(self, *args)

    def upd_num_mesh_intervals(self, *args):
        r"""
        upd_num_mesh_intervals(MocoDirectCollocationSolver self, int i) -> int

        Parameters
        ----------
        i: int

        upd_num_mesh_intervals(MocoDirectCollocationSolver self) -> int &
        """
        return _moco.MocoDirectCollocationSolver_upd_num_mesh_intervals(self, *args)

    def set_num_mesh_intervals(self, *args):
        r"""
        set_num_mesh_intervals(MocoDirectCollocationSolver self, int i, int const & value)

        Parameters
        ----------
        i: int
        value: int const &

        set_num_mesh_intervals(MocoDirectCollocationSolver self, int const & value)

        Parameters
        ----------
        value: int const &

        """
        return _moco.MocoDirectCollocationSolver_set_num_mesh_intervals(self, *args)

    def copyProperty_verbosity(self, source):
        r"""
        copyProperty_verbosity(MocoDirectCollocationSolver self, MocoDirectCollocationSolver source)

        Parameters
        ----------
        source: OpenSim::MocoDirectCollocationSolver::Self const &

        """
        return _moco.MocoDirectCollocationSolver_copyProperty_verbosity(self, source)

    def append_verbosity(self, value):
        r"""
        append_verbosity(MocoDirectCollocationSolver self, int const & value) -> int

        Parameters
        ----------
        value: int const &

        """
        return _moco.MocoDirectCollocationSolver_append_verbosity(self, value)

    def constructProperty_verbosity(self, initValue):
        r"""
        constructProperty_verbosity(MocoDirectCollocationSolver self, int const & initValue)

        Parameters
        ----------
        initValue: int const &

        """
        return _moco.MocoDirectCollocationSolver_constructProperty_verbosity(self, initValue)

    def get_verbosity(self, *args):
        r"""
        get_verbosity(MocoDirectCollocationSolver self, int i) -> int const

        Parameters
        ----------
        i: int

        get_verbosity(MocoDirectCollocationSolver self) -> int const &
        """
        return _moco.MocoDirectCollocationSolver_get_verbosity(self, *args)

    def upd_verbosity(self, *args):
        r"""
        upd_verbosity(MocoDirectCollocationSolver self, int i) -> int

        Parameters
        ----------
        i: int

        upd_verbosity(MocoDirectCollocationSolver self) -> int &
        """
        return _moco.MocoDirectCollocationSolver_upd_verbosity(self, *args)

    def set_verbosity(self, *args):
        r"""
        set_verbosity(MocoDirectCollocationSolver self, int i, int const & value)

        Parameters
        ----------
        i: int
        value: int const &

        set_verbosity(MocoDirectCollocationSolver self, int const & value)

        Parameters
        ----------
        value: int const &

        """
        return _moco.MocoDirectCollocationSolver_set_verbosity(self, *args)

    def copyProperty_transcription_scheme(self, source):
        r"""
        copyProperty_transcription_scheme(MocoDirectCollocationSolver self, MocoDirectCollocationSolver source)

        Parameters
        ----------
        source: OpenSim::MocoDirectCollocationSolver::Self const &

        """
        return _moco.MocoDirectCollocationSolver_copyProperty_transcription_scheme(self, source)

    def append_transcription_scheme(self, value):
        r"""
        append_transcription_scheme(MocoDirectCollocationSolver self, std::string const & value) -> int

        Parameters
        ----------
        value: std::string const &

        """
        return _moco.MocoDirectCollocationSolver_append_transcription_scheme(self, value)

    def constructProperty_transcription_scheme(self, initValue):
        r"""
        constructProperty_transcription_scheme(MocoDirectCollocationSolver self, std::string const & initValue)

        Parameters
        ----------
        initValue: std::string const &

        """
        return _moco.MocoDirectCollocationSolver_constructProperty_transcription_scheme(self, initValue)

    def get_transcription_scheme(self, *args):
        r"""
        get_transcription_scheme(MocoDirectCollocationSolver self, int i) -> std::string const

        Parameters
        ----------
        i: int

        get_transcription_scheme(MocoDirectCollocationSolver self) -> std::string const &
        """
        return _moco.MocoDirectCollocationSolver_get_transcription_scheme(self, *args)

    def upd_transcription_scheme(self, *args):
        r"""
        upd_transcription_scheme(MocoDirectCollocationSolver self, int i) -> std::string

        Parameters
        ----------
        i: int

        upd_transcription_scheme(MocoDirectCollocationSolver self) -> std::string &
        """
        return _moco.MocoDirectCollocationSolver_upd_transcription_scheme(self, *args)

    def set_transcription_scheme(self, *args):
        r"""
        set_transcription_scheme(MocoDirectCollocationSolver self, int i, std::string const & value)

        Parameters
        ----------
        i: int
        value: std::string const &

        set_transcription_scheme(MocoDirectCollocationSolver self, std::string const & value)

        Parameters
        ----------
        value: std::string const &

        """
        return _moco.MocoDirectCollocationSolver_set_transcription_scheme(self, *args)

    def copyProperty_interpolate_control_midpoints(self, source):
        r"""
        copyProperty_interpolate_control_midpoints(MocoDirectCollocationSolver self, MocoDirectCollocationSolver source)

        Parameters
        ----------
        source: OpenSim::MocoDirectCollocationSolver::Self const &

        """
        return _moco.MocoDirectCollocationSolver_copyProperty_interpolate_control_midpoints(self, source)

    def append_interpolate_control_midpoints(self, value):
        r"""
        append_interpolate_control_midpoints(MocoDirectCollocationSolver self, bool const & value) -> int

        Parameters
        ----------
        value: bool const &

        """
        return _moco.MocoDirectCollocationSolver_append_interpolate_control_midpoints(self, value)

    def constructProperty_interpolate_control_midpoints(self, initValue):
        r"""
        constructProperty_interpolate_control_midpoints(MocoDirectCollocationSolver self, bool const & initValue)

        Parameters
        ----------
        initValue: bool const &

        """
        return _moco.MocoDirectCollocationSolver_constructProperty_interpolate_control_midpoints(self, initValue)

    def get_interpolate_control_midpoints(self, *args):
        r"""
        get_interpolate_control_midpoints(MocoDirectCollocationSolver self, int i) -> bool const

        Parameters
        ----------
        i: int

        get_interpolate_control_midpoints(MocoDirectCollocationSolver self) -> bool const &
        """
        return _moco.MocoDirectCollocationSolver_get_interpolate_control_midpoints(self, *args)

    def upd_interpolate_control_midpoints(self, *args):
        r"""
        upd_interpolate_control_midpoints(MocoDirectCollocationSolver self, int i) -> bool

        Parameters
        ----------
        i: int

        upd_interpolate_control_midpoints(MocoDirectCollocationSolver self) -> bool &
        """
        return _moco.MocoDirectCollocationSolver_upd_interpolate_control_midpoints(self, *args)

    def set_interpolate_control_midpoints(self, *args):
        r"""
        set_interpolate_control_midpoints(MocoDirectCollocationSolver self, int i, bool const & value)

        Parameters
        ----------
        i: int
        value: bool const &

        set_interpolate_control_midpoints(MocoDirectCollocationSolver self, bool const & value)

        Parameters
        ----------
        value: bool const &

        """
        return _moco.MocoDirectCollocationSolver_set_interpolate_control_midpoints(self, *args)

    def copyProperty_multibody_dynamics_mode(self, source):
        r"""
        copyProperty_multibody_dynamics_mode(MocoDirectCollocationSolver self, MocoDirectCollocationSolver source)

        Parameters
        ----------
        source: OpenSim::MocoDirectCollocationSolver::Self const &

        """
        return _moco.MocoDirectCollocationSolver_copyProperty_multibody_dynamics_mode(self, source)

    def append_multibody_dynamics_mode(self, value):
        r"""
        append_multibody_dynamics_mode(MocoDirectCollocationSolver self, std::string const & value) -> int

        Parameters
        ----------
        value: std::string const &

        """
        return _moco.MocoDirectCollocationSolver_append_multibody_dynamics_mode(self, value)

    def constructProperty_multibody_dynamics_mode(self, initValue):
        r"""
        constructProperty_multibody_dynamics_mode(MocoDirectCollocationSolver self, std::string const & initValue)

        Parameters
        ----------
        initValue: std::string const &

        """
        return _moco.MocoDirectCollocationSolver_constructProperty_multibody_dynamics_mode(self, initValue)

    def get_multibody_dynamics_mode(self, *args):
        r"""
        get_multibody_dynamics_mode(MocoDirectCollocationSolver self, int i) -> std::string const

        Parameters
        ----------
        i: int

        get_multibody_dynamics_mode(MocoDirectCollocationSolver self) -> std::string const &
        """
        return _moco.MocoDirectCollocationSolver_get_multibody_dynamics_mode(self, *args)

    def upd_multibody_dynamics_mode(self, *args):
        r"""
        upd_multibody_dynamics_mode(MocoDirectCollocationSolver self, int i) -> std::string

        Parameters
        ----------
        i: int

        upd_multibody_dynamics_mode(MocoDirectCollocationSolver self) -> std::string &
        """
        return _moco.MocoDirectCollocationSolver_upd_multibody_dynamics_mode(self, *args)

    def set_multibody_dynamics_mode(self, *args):
        r"""
        set_multibody_dynamics_mode(MocoDirectCollocationSolver self, int i, std::string const & value)

        Parameters
        ----------
        i: int
        value: std::string const &

        set_multibody_dynamics_mode(MocoDirectCollocationSolver self, std::string const & value)

        Parameters
        ----------
        value: std::string const &

        """
        return _moco.MocoDirectCollocationSolver_set_multibody_dynamics_mode(self, *args)

    def copyProperty_optim_solver(self, source):
        r"""
        copyProperty_optim_solver(MocoDirectCollocationSolver self, MocoDirectCollocationSolver source)

        Parameters
        ----------
        source: OpenSim::MocoDirectCollocationSolver::Self const &

        """
        return _moco.MocoDirectCollocationSolver_copyProperty_optim_solver(self, source)

    def append_optim_solver(self, value):
        r"""
        append_optim_solver(MocoDirectCollocationSolver self, std::string const & value) -> int

        Parameters
        ----------
        value: std::string const &

        """
        return _moco.MocoDirectCollocationSolver_append_optim_solver(self, value)

    def constructProperty_optim_solver(self, initValue):
        r"""
        constructProperty_optim_solver(MocoDirectCollocationSolver self, std::string const & initValue)

        Parameters
        ----------
        initValue: std::string const &

        """
        return _moco.MocoDirectCollocationSolver_constructProperty_optim_solver(self, initValue)

    def get_optim_solver(self, *args):
        r"""
        get_optim_solver(MocoDirectCollocationSolver self, int i) -> std::string const

        Parameters
        ----------
        i: int

        get_optim_solver(MocoDirectCollocationSolver self) -> std::string const &
        """
        return _moco.MocoDirectCollocationSolver_get_optim_solver(self, *args)

    def upd_optim_solver(self, *args):
        r"""
        upd_optim_solver(MocoDirectCollocationSolver self, int i) -> std::string

        Parameters
        ----------
        i: int

        upd_optim_solver(MocoDirectCollocationSolver self) -> std::string &
        """
        return _moco.MocoDirectCollocationSolver_upd_optim_solver(self, *args)

    def set_optim_solver(self, *args):
        r"""
        set_optim_solver(MocoDirectCollocationSolver self, int i, std::string const & value)

        Parameters
        ----------
        i: int
        value: std::string const &

        set_optim_solver(MocoDirectCollocationSolver self, std::string const & value)

        Parameters
        ----------
        value: std::string const &

        """
        return _moco.MocoDirectCollocationSolver_set_optim_solver(self, *args)

    def copyProperty_optim_max_iterations(self, source):
        r"""
        copyProperty_optim_max_iterations(MocoDirectCollocationSolver self, MocoDirectCollocationSolver source)

        Parameters
        ----------
        source: OpenSim::MocoDirectCollocationSolver::Self const &

        """
        return _moco.MocoDirectCollocationSolver_copyProperty_optim_max_iterations(self, source)

    def append_optim_max_iterations(self, value):
        r"""
        append_optim_max_iterations(MocoDirectCollocationSolver self, int const & value) -> int

        Parameters
        ----------
        value: int const &

        """
        return _moco.MocoDirectCollocationSolver_append_optim_max_iterations(self, value)

    def constructProperty_optim_max_iterations(self, initValue):
        r"""
        constructProperty_optim_max_iterations(MocoDirectCollocationSolver self, int const & initValue)

        Parameters
        ----------
        initValue: int const &

        """
        return _moco.MocoDirectCollocationSolver_constructProperty_optim_max_iterations(self, initValue)

    def get_optim_max_iterations(self, *args):
        r"""
        get_optim_max_iterations(MocoDirectCollocationSolver self, int i) -> int const

        Parameters
        ----------
        i: int

        get_optim_max_iterations(MocoDirectCollocationSolver self) -> int const &
        """
        return _moco.MocoDirectCollocationSolver_get_optim_max_iterations(self, *args)

    def upd_optim_max_iterations(self, *args):
        r"""
        upd_optim_max_iterations(MocoDirectCollocationSolver self, int i) -> int

        Parameters
        ----------
        i: int

        upd_optim_max_iterations(MocoDirectCollocationSolver self) -> int &
        """
        return _moco.MocoDirectCollocationSolver_upd_optim_max_iterations(self, *args)

    def set_optim_max_iterations(self, *args):
        r"""
        set_optim_max_iterations(MocoDirectCollocationSolver self, int i, int const & value)

        Parameters
        ----------
        i: int
        value: int const &

        set_optim_max_iterations(MocoDirectCollocationSolver self, int const & value)

        Parameters
        ----------
        value: int const &

        """
        return _moco.MocoDirectCollocationSolver_set_optim_max_iterations(self, *args)

    def copyProperty_optim_convergence_tolerance(self, source):
        r"""
        copyProperty_optim_convergence_tolerance(MocoDirectCollocationSolver self, MocoDirectCollocationSolver source)

        Parameters
        ----------
        source: OpenSim::MocoDirectCollocationSolver::Self const &

        """
        return _moco.MocoDirectCollocationSolver_copyProperty_optim_convergence_tolerance(self, source)

    def append_optim_convergence_tolerance(self, value):
        r"""
        append_optim_convergence_tolerance(MocoDirectCollocationSolver self, double const & value) -> int

        Parameters
        ----------
        value: double const &

        """
        return _moco.MocoDirectCollocationSolver_append_optim_convergence_tolerance(self, value)

    def constructProperty_optim_convergence_tolerance(self, initValue):
        r"""
        constructProperty_optim_convergence_tolerance(MocoDirectCollocationSolver self, double const & initValue)

        Parameters
        ----------
        initValue: double const &

        """
        return _moco.MocoDirectCollocationSolver_constructProperty_optim_convergence_tolerance(self, initValue)

    def get_optim_convergence_tolerance(self, *args):
        r"""
        get_optim_convergence_tolerance(MocoDirectCollocationSolver self, int i) -> double const

        Parameters
        ----------
        i: int

        get_optim_convergence_tolerance(MocoDirectCollocationSolver self) -> double const &
        """
        return _moco.MocoDirectCollocationSolver_get_optim_convergence_tolerance(self, *args)

    def upd_optim_convergence_tolerance(self, *args):
        r"""
        upd_optim_convergence_tolerance(MocoDirectCollocationSolver self, int i) -> double

        Parameters
        ----------
        i: int

        upd_optim_convergence_tolerance(MocoDirectCollocationSolver self) -> double &
        """
        return _moco.MocoDirectCollocationSolver_upd_optim_convergence_tolerance(self, *args)

    def set_optim_convergence_tolerance(self, *args):
        r"""
        set_optim_convergence_tolerance(MocoDirectCollocationSolver self, int i, double const & value)

        Parameters
        ----------
        i: int
        value: double const &

        set_optim_convergence_tolerance(MocoDirectCollocationSolver self, double const & value)

        Parameters
        ----------
        value: double const &

        """
        return _moco.MocoDirectCollocationSolver_set_optim_convergence_tolerance(self, *args)

    def copyProperty_optim_constraint_tolerance(self, source):
        r"""
        copyProperty_optim_constraint_tolerance(MocoDirectCollocationSolver self, MocoDirectCollocationSolver source)

        Parameters
        ----------
        source: OpenSim::MocoDirectCollocationSolver::Self const &

        """
        return _moco.MocoDirectCollocationSolver_copyProperty_optim_constraint_tolerance(self, source)

    def append_optim_constraint_tolerance(self, value):
        r"""
        append_optim_constraint_tolerance(MocoDirectCollocationSolver self, double const & value) -> int

        Parameters
        ----------
        value: double const &

        """
        return _moco.MocoDirectCollocationSolver_append_optim_constraint_tolerance(self, value)

    def constructProperty_optim_constraint_tolerance(self, initValue):
        r"""
        constructProperty_optim_constraint_tolerance(MocoDirectCollocationSolver self, double const & initValue)

        Parameters
        ----------
        initValue: double const &

        """
        return _moco.MocoDirectCollocationSolver_constructProperty_optim_constraint_tolerance(self, initValue)

    def get_optim_constraint_tolerance(self, *args):
        r"""
        get_optim_constraint_tolerance(MocoDirectCollocationSolver self, int i) -> double const

        Parameters
        ----------
        i: int

        get_optim_constraint_tolerance(MocoDirectCollocationSolver self) -> double const &
        """
        return _moco.MocoDirectCollocationSolver_get_optim_constraint_tolerance(self, *args)

    def upd_optim_constraint_tolerance(self, *args):
        r"""
        upd_optim_constraint_tolerance(MocoDirectCollocationSolver self, int i) -> double

        Parameters
        ----------
        i: int

        upd_optim_constraint_tolerance(MocoDirectCollocationSolver self) -> double &
        """
        return _moco.MocoDirectCollocationSolver_upd_optim_constraint_tolerance(self, *args)

    def set_optim_constraint_tolerance(self, *args):
        r"""
        set_optim_constraint_tolerance(MocoDirectCollocationSolver self, int i, double const & value)

        Parameters
        ----------
        i: int
        value: double const &

        set_optim_constraint_tolerance(MocoDirectCollocationSolver self, double const & value)

        Parameters
        ----------
        value: double const &

        """
        return _moco.MocoDirectCollocationSolver_set_optim_constraint_tolerance(self, *args)

    def copyProperty_optim_hessian_approximation(self, source):
        r"""
        copyProperty_optim_hessian_approximation(MocoDirectCollocationSolver self, MocoDirectCollocationSolver source)

        Parameters
        ----------
        source: OpenSim::MocoDirectCollocationSolver::Self const &

        """
        return _moco.MocoDirectCollocationSolver_copyProperty_optim_hessian_approximation(self, source)

    def append_optim_hessian_approximation(self, value):
        r"""
        append_optim_hessian_approximation(MocoDirectCollocationSolver self, std::string const & value) -> int

        Parameters
        ----------
        value: std::string const &

        """
        return _moco.MocoDirectCollocationSolver_append_optim_hessian_approximation(self, value)

    def constructProperty_optim_hessian_approximation(self, initValue):
        r"""
        constructProperty_optim_hessian_approximation(MocoDirectCollocationSolver self, std::string const & initValue)

        Parameters
        ----------
        initValue: std::string const &

        """
        return _moco.MocoDirectCollocationSolver_constructProperty_optim_hessian_approximation(self, initValue)

    def get_optim_hessian_approximation(self, *args):
        r"""
        get_optim_hessian_approximation(MocoDirectCollocationSolver self, int i) -> std::string const

        Parameters
        ----------
        i: int

        get_optim_hessian_approximation(MocoDirectCollocationSolver self) -> std::string const &
        """
        return _moco.MocoDirectCollocationSolver_get_optim_hessian_approximation(self, *args)

    def upd_optim_hessian_approximation(self, *args):
        r"""
        upd_optim_hessian_approximation(MocoDirectCollocationSolver self, int i) -> std::string

        Parameters
        ----------
        i: int

        upd_optim_hessian_approximation(MocoDirectCollocationSolver self) -> std::string &
        """
        return _moco.MocoDirectCollocationSolver_upd_optim_hessian_approximation(self, *args)

    def set_optim_hessian_approximation(self, *args):
        r"""
        set_optim_hessian_approximation(MocoDirectCollocationSolver self, int i, std::string const & value)

        Parameters
        ----------
        i: int
        value: std::string const &

        set_optim_hessian_approximation(MocoDirectCollocationSolver self, std::string const & value)

        Parameters
        ----------
        value: std::string const &

        """
        return _moco.MocoDirectCollocationSolver_set_optim_hessian_approximation(self, *args)

    def copyProperty_optim_ipopt_print_level(self, source):
        r"""
        copyProperty_optim_ipopt_print_level(MocoDirectCollocationSolver self, MocoDirectCollocationSolver source)

        Parameters
        ----------
        source: OpenSim::MocoDirectCollocationSolver::Self const &

        """
        return _moco.MocoDirectCollocationSolver_copyProperty_optim_ipopt_print_level(self, source)

    def append_optim_ipopt_print_level(self, value):
        r"""
        append_optim_ipopt_print_level(MocoDirectCollocationSolver self, int const & value) -> int

        Parameters
        ----------
        value: int const &

        """
        return _moco.MocoDirectCollocationSolver_append_optim_ipopt_print_level(self, value)

    def constructProperty_optim_ipopt_print_level(self, initValue):
        r"""
        constructProperty_optim_ipopt_print_level(MocoDirectCollocationSolver self, int const & initValue)

        Parameters
        ----------
        initValue: int const &

        """
        return _moco.MocoDirectCollocationSolver_constructProperty_optim_ipopt_print_level(self, initValue)

    def get_optim_ipopt_print_level(self, *args):
        r"""
        get_optim_ipopt_print_level(MocoDirectCollocationSolver self, int i) -> int const

        Parameters
        ----------
        i: int

        get_optim_ipopt_print_level(MocoDirectCollocationSolver self) -> int const &
        """
        return _moco.MocoDirectCollocationSolver_get_optim_ipopt_print_level(self, *args)

    def upd_optim_ipopt_print_level(self, *args):
        r"""
        upd_optim_ipopt_print_level(MocoDirectCollocationSolver self, int i) -> int

        Parameters
        ----------
        i: int

        upd_optim_ipopt_print_level(MocoDirectCollocationSolver self) -> int &
        """
        return _moco.MocoDirectCollocationSolver_upd_optim_ipopt_print_level(self, *args)

    def set_optim_ipopt_print_level(self, *args):
        r"""
        set_optim_ipopt_print_level(MocoDirectCollocationSolver self, int i, int const & value)

        Parameters
        ----------
        i: int
        value: int const &

        set_optim_ipopt_print_level(MocoDirectCollocationSolver self, int const & value)

        Parameters
        ----------
        value: int const &

        """
        return _moco.MocoDirectCollocationSolver_set_optim_ipopt_print_level(self, *args)

    def copyProperty_enforce_constraint_derivatives(self, source):
        r"""
        copyProperty_enforce_constraint_derivatives(MocoDirectCollocationSolver self, MocoDirectCollocationSolver source)

        Parameters
        ----------
        source: OpenSim::MocoDirectCollocationSolver::Self const &

        """
        return _moco.MocoDirectCollocationSolver_copyProperty_enforce_constraint_derivatives(self, source)

    def append_enforce_constraint_derivatives(self, value):
        r"""
        append_enforce_constraint_derivatives(MocoDirectCollocationSolver self, bool const & value) -> int

        Parameters
        ----------
        value: bool const &

        """
        return _moco.MocoDirectCollocationSolver_append_enforce_constraint_derivatives(self, value)

    def constructProperty_enforce_constraint_derivatives(self, *args):
        r"""
        constructProperty_enforce_constraint_derivatives(MocoDirectCollocationSolver self)
        constructProperty_enforce_constraint_derivatives(MocoDirectCollocationSolver self, bool const & initValue)

        Parameters
        ----------
        initValue: bool const &

        """
        return _moco.MocoDirectCollocationSolver_constructProperty_enforce_constraint_derivatives(self, *args)

    def get_enforce_constraint_derivatives(self, *args):
        r"""
        get_enforce_constraint_derivatives(MocoDirectCollocationSolver self, int i) -> bool const

        Parameters
        ----------
        i: int

        get_enforce_constraint_derivatives(MocoDirectCollocationSolver self) -> bool const &
        """
        return _moco.MocoDirectCollocationSolver_get_enforce_constraint_derivatives(self, *args)

    def upd_enforce_constraint_derivatives(self, *args):
        r"""
        upd_enforce_constraint_derivatives(MocoDirectCollocationSolver self, int i) -> bool

        Parameters
        ----------
        i: int

        upd_enforce_constraint_derivatives(MocoDirectCollocationSolver self) -> bool &
        """
        return _moco.MocoDirectCollocationSolver_upd_enforce_constraint_derivatives(self, *args)

    def set_enforce_constraint_derivatives(self, *args):
        r"""
        set_enforce_constraint_derivatives(MocoDirectCollocationSolver self, int i, bool const & value)

        Parameters
        ----------
        i: int
        value: bool const &

        set_enforce_constraint_derivatives(MocoDirectCollocationSolver self, bool const & value)

        Parameters
        ----------
        value: bool const &

        """
        return _moco.MocoDirectCollocationSolver_set_enforce_constraint_derivatives(self, *args)

    def copyProperty_minimize_lagrange_multipliers(self, source):
        r"""
        copyProperty_minimize_lagrange_multipliers(MocoDirectCollocationSolver self, MocoDirectCollocationSolver source)

        Parameters
        ----------
        source: OpenSim::MocoDirectCollocationSolver::Self const &

        """
        return _moco.MocoDirectCollocationSolver_copyProperty_minimize_lagrange_multipliers(self, source)

    def append_minimize_lagrange_multipliers(self, value):
        r"""
        append_minimize_lagrange_multipliers(MocoDirectCollocationSolver self, bool const & value) -> int

        Parameters
        ----------
        value: bool const &

        """
        return _moco.MocoDirectCollocationSolver_append_minimize_lagrange_multipliers(self, value)

    def constructProperty_minimize_lagrange_multipliers(self, initValue):
        r"""
        constructProperty_minimize_lagrange_multipliers(MocoDirectCollocationSolver self, bool const & initValue)

        Parameters
        ----------
        initValue: bool const &

        """
        return _moco.MocoDirectCollocationSolver_constructProperty_minimize_lagrange_multipliers(self, initValue)

    def get_minimize_lagrange_multipliers(self, *args):
        r"""
        get_minimize_lagrange_multipliers(MocoDirectCollocationSolver self, int i) -> bool const

        Parameters
        ----------
        i: int

        get_minimize_lagrange_multipliers(MocoDirectCollocationSolver self) -> bool const &
        """
        return _moco.MocoDirectCollocationSolver_get_minimize_lagrange_multipliers(self, *args)

    def upd_minimize_lagrange_multipliers(self, *args):
        r"""
        upd_minimize_lagrange_multipliers(MocoDirectCollocationSolver self, int i) -> bool

        Parameters
        ----------
        i: int

        upd_minimize_lagrange_multipliers(MocoDirectCollocationSolver self) -> bool &
        """
        return _moco.MocoDirectCollocationSolver_upd_minimize_lagrange_multipliers(self, *args)

    def set_minimize_lagrange_multipliers(self, *args):
        r"""
        set_minimize_lagrange_multipliers(MocoDirectCollocationSolver self, int i, bool const & value)

        Parameters
        ----------
        i: int
        value: bool const &

        set_minimize_lagrange_multipliers(MocoDirectCollocationSolver self, bool const & value)

        Parameters
        ----------
        value: bool const &

        """
        return _moco.MocoDirectCollocationSolver_set_minimize_lagrange_multipliers(self, *args)

    def copyProperty_lagrange_multiplier_weight(self, source):
        r"""
        copyProperty_lagrange_multiplier_weight(MocoDirectCollocationSolver self, MocoDirectCollocationSolver source)

        Parameters
        ----------
        source: OpenSim::MocoDirectCollocationSolver::Self const &

        """
        return _moco.MocoDirectCollocationSolver_copyProperty_lagrange_multiplier_weight(self, source)

    def append_lagrange_multiplier_weight(self, value):
        r"""
        append_lagrange_multiplier_weight(MocoDirectCollocationSolver self, double const & value) -> int

        Parameters
        ----------
        value: double const &

        """
        return _moco.MocoDirectCollocationSolver_append_lagrange_multiplier_weight(self, value)

    def constructProperty_lagrange_multiplier_weight(self, initValue):
        r"""
        constructProperty_lagrange_multiplier_weight(MocoDirectCollocationSolver self, double const & initValue)

        Parameters
        ----------
        initValue: double const &

        """
        return _moco.MocoDirectCollocationSolver_constructProperty_lagrange_multiplier_weight(self, initValue)

    def get_lagrange_multiplier_weight(self, *args):
        r"""
        get_lagrange_multiplier_weight(MocoDirectCollocationSolver self, int i) -> double const

        Parameters
        ----------
        i: int

        get_lagrange_multiplier_weight(MocoDirectCollocationSolver self) -> double const &
        """
        return _moco.MocoDirectCollocationSolver_get_lagrange_multiplier_weight(self, *args)

    def upd_lagrange_multiplier_weight(self, *args):
        r"""
        upd_lagrange_multiplier_weight(MocoDirectCollocationSolver self, int i) -> double

        Parameters
        ----------
        i: int

        upd_lagrange_multiplier_weight(MocoDirectCollocationSolver self) -> double &
        """
        return _moco.MocoDirectCollocationSolver_upd_lagrange_multiplier_weight(self, *args)

    def set_lagrange_multiplier_weight(self, *args):
        r"""
        set_lagrange_multiplier_weight(MocoDirectCollocationSolver self, int i, double const & value)

        Parameters
        ----------
        i: int
        value: double const &

        set_lagrange_multiplier_weight(MocoDirectCollocationSolver self, double const & value)

        Parameters
        ----------
        value: double const &

        """
        return _moco.MocoDirectCollocationSolver_set_lagrange_multiplier_weight(self, *args)

    def copyProperty_velocity_correction_bounds(self, source):
        r"""
        copyProperty_velocity_correction_bounds(MocoDirectCollocationSolver self, MocoDirectCollocationSolver source)

        Parameters
        ----------
        source: OpenSim::MocoDirectCollocationSolver::Self const &

        """
        return _moco.MocoDirectCollocationSolver_copyProperty_velocity_correction_bounds(self, source)

    def append_velocity_correction_bounds(self, value):
        r"""
        append_velocity_correction_bounds(MocoDirectCollocationSolver self, MocoBounds value) -> int

        Parameters
        ----------
        value: OpenSim::MocoBounds const &

        """
        return _moco.MocoDirectCollocationSolver_append_velocity_correction_bounds(self, value)

    def constructProperty_velocity_correction_bounds(self, initValue):
        r"""
        constructProperty_velocity_correction_bounds(MocoDirectCollocationSolver self, MocoBounds initValue)

        Parameters
        ----------
        initValue: OpenSim::MocoBounds const &

        """
        return _moco.MocoDirectCollocationSolver_constructProperty_velocity_correction_bounds(self, initValue)

    def get_velocity_correction_bounds(self, *args):
        r"""
        get_velocity_correction_bounds(MocoDirectCollocationSolver self, int i) -> MocoBounds

        Parameters
        ----------
        i: int

        get_velocity_correction_bounds(MocoDirectCollocationSolver self) -> MocoBounds
        """
        return _moco.MocoDirectCollocationSolver_get_velocity_correction_bounds(self, *args)

    def upd_velocity_correction_bounds(self, *args):
        r"""
        upd_velocity_correction_bounds(MocoDirectCollocationSolver self, int i) -> MocoBounds

        Parameters
        ----------
        i: int

        upd_velocity_correction_bounds(MocoDirectCollocationSolver self) -> MocoBounds
        """
        return _moco.MocoDirectCollocationSolver_upd_velocity_correction_bounds(self, *args)

    def set_velocity_correction_bounds(self, *args):
        r"""
        set_velocity_correction_bounds(MocoDirectCollocationSolver self, int i, MocoBounds value)

        Parameters
        ----------
        i: int
        value: OpenSim::MocoBounds const &

        set_velocity_correction_bounds(MocoDirectCollocationSolver self, MocoBounds value)

        Parameters
        ----------
        value: OpenSim::MocoBounds const &

        """
        return _moco.MocoDirectCollocationSolver_set_velocity_correction_bounds(self, *args)

    def copyProperty_implicit_multibody_acceleration_bounds(self, source):
        r"""
        copyProperty_implicit_multibody_acceleration_bounds(MocoDirectCollocationSolver self, MocoDirectCollocationSolver source)

        Parameters
        ----------
        source: OpenSim::MocoDirectCollocationSolver::Self const &

        """
        return _moco.MocoDirectCollocationSolver_copyProperty_implicit_multibody_acceleration_bounds(self, source)

    def append_implicit_multibody_acceleration_bounds(self, value):
        r"""
        append_implicit_multibody_acceleration_bounds(MocoDirectCollocationSolver self, MocoBounds value) -> int

        Parameters
        ----------
        value: OpenSim::MocoBounds const &

        """
        return _moco.MocoDirectCollocationSolver_append_implicit_multibody_acceleration_bounds(self, value)

    def constructProperty_implicit_multibody_acceleration_bounds(self, initValue):
        r"""
        constructProperty_implicit_multibody_acceleration_bounds(MocoDirectCollocationSolver self, MocoBounds initValue)

        Parameters
        ----------
        initValue: OpenSim::MocoBounds const &

        """
        return _moco.MocoDirectCollocationSolver_constructProperty_implicit_multibody_acceleration_bounds(self, initValue)

    def get_implicit_multibody_acceleration_bounds(self, *args):
        r"""
        get_implicit_multibody_acceleration_bounds(MocoDirectCollocationSolver self, int i) -> MocoBounds

        Parameters
        ----------
        i: int

        get_implicit_multibody_acceleration_bounds(MocoDirectCollocationSolver self) -> MocoBounds
        """
        return _moco.MocoDirectCollocationSolver_get_implicit_multibody_acceleration_bounds(self, *args)

    def upd_implicit_multibody_acceleration_bounds(self, *args):
        r"""
        upd_implicit_multibody_acceleration_bounds(MocoDirectCollocationSolver self, int i) -> MocoBounds

        Parameters
        ----------
        i: int

        upd_implicit_multibody_acceleration_bounds(MocoDirectCollocationSolver self) -> MocoBounds
        """
        return _moco.MocoDirectCollocationSolver_upd_implicit_multibody_acceleration_bounds(self, *args)

    def set_implicit_multibody_acceleration_bounds(self, *args):
        r"""
        set_implicit_multibody_acceleration_bounds(MocoDirectCollocationSolver self, int i, MocoBounds value)

        Parameters
        ----------
        i: int
        value: OpenSim::MocoBounds const &

        set_implicit_multibody_acceleration_bounds(MocoDirectCollocationSolver self, MocoBounds value)

        Parameters
        ----------
        value: OpenSim::MocoBounds const &

        """
        return _moco.MocoDirectCollocationSolver_set_implicit_multibody_acceleration_bounds(self, *args)

    def copyProperty_implicit_auxiliary_derivative_bounds(self, source):
        r"""
        copyProperty_implicit_auxiliary_derivative_bounds(MocoDirectCollocationSolver self, MocoDirectCollocationSolver source)

        Parameters
        ----------
        source: OpenSim::MocoDirectCollocationSolver::Self const &

        """
        return _moco.MocoDirectCollocationSolver_copyProperty_implicit_auxiliary_derivative_bounds(self, source)

    def append_implicit_auxiliary_derivative_bounds(self, value):
        r"""
        append_implicit_auxiliary_derivative_bounds(MocoDirectCollocationSolver self, MocoBounds value) -> int

        Parameters
        ----------
        value: OpenSim::MocoBounds const &

        """
        return _moco.MocoDirectCollocationSolver_append_implicit_auxiliary_derivative_bounds(self, value)

    def constructProperty_implicit_auxiliary_derivative_bounds(self, initValue):
        r"""
        constructProperty_implicit_auxiliary_derivative_bounds(MocoDirectCollocationSolver self, MocoBounds initValue)

        Parameters
        ----------
        initValue: OpenSim::MocoBounds const &

        """
        return _moco.MocoDirectCollocationSolver_constructProperty_implicit_auxiliary_derivative_bounds(self, initValue)

    def get_implicit_auxiliary_derivative_bounds(self, *args):
        r"""
        get_implicit_auxiliary_derivative_bounds(MocoDirectCollocationSolver self, int i) -> MocoBounds

        Parameters
        ----------
        i: int

        get_implicit_auxiliary_derivative_bounds(MocoDirectCollocationSolver self) -> MocoBounds
        """
        return _moco.MocoDirectCollocationSolver_get_implicit_auxiliary_derivative_bounds(self, *args)

    def upd_implicit_auxiliary_derivative_bounds(self, *args):
        r"""
        upd_implicit_auxiliary_derivative_bounds(MocoDirectCollocationSolver self, int i) -> MocoBounds

        Parameters
        ----------
        i: int

        upd_implicit_auxiliary_derivative_bounds(MocoDirectCollocationSolver self) -> MocoBounds
        """
        return _moco.MocoDirectCollocationSolver_upd_implicit_auxiliary_derivative_bounds(self, *args)

    def set_implicit_auxiliary_derivative_bounds(self, *args):
        r"""
        set_implicit_auxiliary_derivative_bounds(MocoDirectCollocationSolver self, int i, MocoBounds value)

        Parameters
        ----------
        i: int
        value: OpenSim::MocoBounds const &

        set_implicit_auxiliary_derivative_bounds(MocoDirectCollocationSolver self, MocoBounds value)

        Parameters
        ----------
        value: OpenSim::MocoBounds const &

        """
        return _moco.MocoDirectCollocationSolver_set_implicit_auxiliary_derivative_bounds(self, *args)

    def setMesh(self, mesh):
        r"""
        setMesh(MocoDirectCollocationSolver self, StdVectorDouble mesh)

        Parameters
        ----------
        mesh: std::vector< double,std::allocator< double > > const &

        """
        return _moco.MocoDirectCollocationSolver_setMesh(self, mesh)
    __swig_destroy__ = _moco.delete_MocoDirectCollocationSolver

# Register MocoDirectCollocationSolver in _moco:
_moco.MocoDirectCollocationSolver_swigregister(MocoDirectCollocationSolver)

def MocoDirectCollocationSolver_safeDownCast(obj):
    r"""
    MocoDirectCollocationSolver_safeDownCast(OpenSimObject obj) -> MocoDirectCollocationSolver

    Parameters
    ----------
    obj: OpenSim::Object *

    """
    return _moco.MocoDirectCollocationSolver_safeDownCast(obj)

def MocoDirectCollocationSolver_getClassName():
    r"""MocoDirectCollocationSolver_getClassName() -> std::string const &"""
    return _moco.MocoDirectCollocationSolver_getClassName()

class MocoTropterSolverNotAvailable(opensim.common.OpenSimException):
    r"""Proxy of C++ OpenSim::MocoTropterSolverNotAvailable class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, file, line, func):
        r"""
        __init__(MocoTropterSolverNotAvailable self, std::string const & file, int line, std::string const & func) -> MocoTropterSolverNotAvailable

        Parameters
        ----------
        file: std::string const &
        line: int
        func: std::string const &

        """
        _moco.MocoTropterSolverNotAvailable_swiginit(self, _moco.new_MocoTropterSolverNotAvailable(file, line, func))
    __swig_destroy__ = _moco.delete_MocoTropterSolverNotAvailable

# Register MocoTropterSolverNotAvailable in _moco:
_moco.MocoTropterSolverNotAvailable_swigregister(MocoTropterSolverNotAvailable)

class MocoTropterSolver(MocoDirectCollocationSolver):
    r"""Proxy of C++ OpenSim::MocoTropterSolver class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def safeDownCast(obj):
        r"""
        safeDownCast(OpenSimObject obj) -> MocoTropterSolver

        Parameters
        ----------
        obj: OpenSim::Object *

        """
        return _moco.MocoTropterSolver_safeDownCast(obj)

    def assign(self, aObject):
        r"""
        assign(MocoTropterSolver self, OpenSimObject aObject)

        Parameters
        ----------
        aObject: OpenSim::Object &

        """
        return _moco.MocoTropterSolver_assign(self, aObject)

    @staticmethod
    def getClassName():
        r"""getClassName() -> std::string const &"""
        return _moco.MocoTropterSolver_getClassName()

    def clone(self):
        r"""clone(MocoTropterSolver self) -> MocoTropterSolver"""
        return _moco.MocoTropterSolver_clone(self)

    def getConcreteClassName(self):
        r"""getConcreteClassName(MocoTropterSolver self) -> std::string const &"""
        return _moco.MocoTropterSolver_getConcreteClassName(self)

    def copyProperty_optim_jacobian_approximation(self, source):
        r"""
        copyProperty_optim_jacobian_approximation(MocoTropterSolver self, MocoTropterSolver source)

        Parameters
        ----------
        source: OpenSim::MocoTropterSolver::Self const &

        """
        return _moco.MocoTropterSolver_copyProperty_optim_jacobian_approximation(self, source)

    def append_optim_jacobian_approximation(self, value):
        r"""
        append_optim_jacobian_approximation(MocoTropterSolver self, std::string const & value) -> int

        Parameters
        ----------
        value: std::string const &

        """
        return _moco.MocoTropterSolver_append_optim_jacobian_approximation(self, value)

    def constructProperty_optim_jacobian_approximation(self, initValue):
        r"""
        constructProperty_optim_jacobian_approximation(MocoTropterSolver self, std::string const & initValue)

        Parameters
        ----------
        initValue: std::string const &

        """
        return _moco.MocoTropterSolver_constructProperty_optim_jacobian_approximation(self, initValue)

    def get_optim_jacobian_approximation(self, *args):
        r"""
        get_optim_jacobian_approximation(MocoTropterSolver self, int i) -> std::string const

        Parameters
        ----------
        i: int

        get_optim_jacobian_approximation(MocoTropterSolver self) -> std::string const &
        """
        return _moco.MocoTropterSolver_get_optim_jacobian_approximation(self, *args)

    def upd_optim_jacobian_approximation(self, *args):
        r"""
        upd_optim_jacobian_approximation(MocoTropterSolver self, int i) -> std::string

        Parameters
        ----------
        i: int

        upd_optim_jacobian_approximation(MocoTropterSolver self) -> std::string &
        """
        return _moco.MocoTropterSolver_upd_optim_jacobian_approximation(self, *args)

    def set_optim_jacobian_approximation(self, *args):
        r"""
        set_optim_jacobian_approximation(MocoTropterSolver self, int i, std::string const & value)

        Parameters
        ----------
        i: int
        value: std::string const &

        set_optim_jacobian_approximation(MocoTropterSolver self, std::string const & value)

        Parameters
        ----------
        value: std::string const &

        """
        return _moco.MocoTropterSolver_set_optim_jacobian_approximation(self, *args)

    def copyProperty_optim_sparsity_detection(self, source):
        r"""
        copyProperty_optim_sparsity_detection(MocoTropterSolver self, MocoTropterSolver source)

        Parameters
        ----------
        source: OpenSim::MocoTropterSolver::Self const &

        """
        return _moco.MocoTropterSolver_copyProperty_optim_sparsity_detection(self, source)

    def append_optim_sparsity_detection(self, value):
        r"""
        append_optim_sparsity_detection(MocoTropterSolver self, std::string const & value) -> int

        Parameters
        ----------
        value: std::string const &

        """
        return _moco.MocoTropterSolver_append_optim_sparsity_detection(self, value)

    def constructProperty_optim_sparsity_detection(self, initValue):
        r"""
        constructProperty_optim_sparsity_detection(MocoTropterSolver self, std::string const & initValue)

        Parameters
        ----------
        initValue: std::string const &

        """
        return _moco.MocoTropterSolver_constructProperty_optim_sparsity_detection(self, initValue)

    def get_optim_sparsity_detection(self, *args):
        r"""
        get_optim_sparsity_detection(MocoTropterSolver self, int i) -> std::string const

        Parameters
        ----------
        i: int

        get_optim_sparsity_detection(MocoTropterSolver self) -> std::string const &
        """
        return _moco.MocoTropterSolver_get_optim_sparsity_detection(self, *args)

    def upd_optim_sparsity_detection(self, *args):
        r"""
        upd_optim_sparsity_detection(MocoTropterSolver self, int i) -> std::string

        Parameters
        ----------
        i: int

        upd_optim_sparsity_detection(MocoTropterSolver self) -> std::string &
        """
        return _moco.MocoTropterSolver_upd_optim_sparsity_detection(self, *args)

    def set_optim_sparsity_detection(self, *args):
        r"""
        set_optim_sparsity_detection(MocoTropterSolver self, int i, std::string const & value)

        Parameters
        ----------
        i: int
        value: std::string const &

        set_optim_sparsity_detection(MocoTropterSolver self, std::string const & value)

        Parameters
        ----------
        value: std::string const &

        """
        return _moco.MocoTropterSolver_set_optim_sparsity_detection(self, *args)

    def copyProperty_exact_hessian_block_sparsity_mode(self, source):
        r"""
        copyProperty_exact_hessian_block_sparsity_mode(MocoTropterSolver self, MocoTropterSolver source)

        Parameters
        ----------
        source: OpenSim::MocoTropterSolver::Self const &

        """
        return _moco.MocoTropterSolver_copyProperty_exact_hessian_block_sparsity_mode(self, source)

    def append_exact_hessian_block_sparsity_mode(self, value):
        r"""
        append_exact_hessian_block_sparsity_mode(MocoTropterSolver self, std::string const & value) -> int

        Parameters
        ----------
        value: std::string const &

        """
        return _moco.MocoTropterSolver_append_exact_hessian_block_sparsity_mode(self, value)

    def constructProperty_exact_hessian_block_sparsity_mode(self, *args):
        r"""
        constructProperty_exact_hessian_block_sparsity_mode(MocoTropterSolver self)
        constructProperty_exact_hessian_block_sparsity_mode(MocoTropterSolver self, std::string const & initValue)

        Parameters
        ----------
        initValue: std::string const &

        """
        return _moco.MocoTropterSolver_constructProperty_exact_hessian_block_sparsity_mode(self, *args)

    def get_exact_hessian_block_sparsity_mode(self, *args):
        r"""
        get_exact_hessian_block_sparsity_mode(MocoTropterSolver self, int i) -> std::string const

        Parameters
        ----------
        i: int

        get_exact_hessian_block_sparsity_mode(MocoTropterSolver self) -> std::string const &
        """
        return _moco.MocoTropterSolver_get_exact_hessian_block_sparsity_mode(self, *args)

    def upd_exact_hessian_block_sparsity_mode(self, *args):
        r"""
        upd_exact_hessian_block_sparsity_mode(MocoTropterSolver self, int i) -> std::string

        Parameters
        ----------
        i: int

        upd_exact_hessian_block_sparsity_mode(MocoTropterSolver self) -> std::string &
        """
        return _moco.MocoTropterSolver_upd_exact_hessian_block_sparsity_mode(self, *args)

    def set_exact_hessian_block_sparsity_mode(self, *args):
        r"""
        set_exact_hessian_block_sparsity_mode(MocoTropterSolver self, int i, std::string const & value)

        Parameters
        ----------
        i: int
        value: std::string const &

        set_exact_hessian_block_sparsity_mode(MocoTropterSolver self, std::string const & value)

        Parameters
        ----------
        value: std::string const &

        """
        return _moco.MocoTropterSolver_set_exact_hessian_block_sparsity_mode(self, *args)

    def __init__(self):
        r"""__init__(MocoTropterSolver self) -> MocoTropterSolver"""
        _moco.MocoTropterSolver_swiginit(self, _moco.new_MocoTropterSolver())

    @staticmethod
    def isAvailable():
        r"""isAvailable() -> bool"""
        return _moco.MocoTropterSolver_isAvailable()

    def createGuess(self, *args):
        r"""
        createGuess(MocoTropterSolver self, std::string const & type="bounds") -> MocoTrajectory

        Parameters
        ----------
        type: std::string const &

        """
        return _moco.MocoTropterSolver_createGuess(self, *args)

    def setGuess(self, *args):
        r"""
        setGuess(MocoTropterSolver self, MocoTrajectory guess)

        Parameters
        ----------
        guess: OpenSim::MocoTrajectory

        setGuess(MocoTropterSolver self, std::string const & type)

        Parameters
        ----------
        type: std::string const &

        """
        return _moco.MocoTropterSolver_setGuess(self, *args)

    def setGuessFile(self, file):
        r"""
        setGuessFile(MocoTropterSolver self, std::string const & file)

        Parameters
        ----------
        file: std::string const &

        """
        return _moco.MocoTropterSolver_setGuessFile(self, file)

    def clearGuess(self):
        r"""clearGuess(MocoTropterSolver self)"""
        return _moco.MocoTropterSolver_clearGuess(self)

    def getGuess(self):
        r"""getGuess(MocoTropterSolver self) -> MocoTrajectory"""
        return _moco.MocoTropterSolver_getGuess(self)

    @staticmethod
    def printOptimizationSolverOptions(*args):
        r"""
        printOptimizationSolverOptions(std::string solver="ipopt")

        Parameters
        ----------
        solver: std::string

        """
        return _moco.MocoTropterSolver_printOptimizationSolverOptions(*args)
    __swig_destroy__ = _moco.delete_MocoTropterSolver

# Register MocoTropterSolver in _moco:
_moco.MocoTropterSolver_swigregister(MocoTropterSolver)

def MocoTropterSolver_safeDownCast(obj):
    r"""
    MocoTropterSolver_safeDownCast(OpenSimObject obj) -> MocoTropterSolver

    Parameters
    ----------
    obj: OpenSim::Object *

    """
    return _moco.MocoTropterSolver_safeDownCast(obj)

def MocoTropterSolver_getClassName():
    r"""MocoTropterSolver_getClassName() -> std::string const &"""
    return _moco.MocoTropterSolver_getClassName()

def MocoTropterSolver_isAvailable():
    r"""MocoTropterSolver_isAvailable() -> bool"""
    return _moco.MocoTropterSolver_isAvailable()

def MocoTropterSolver_printOptimizationSolverOptions(*args):
    r"""
    MocoTropterSolver_printOptimizationSolverOptions(std::string solver="ipopt")

    Parameters
    ----------
    solver: std::string

    """
    return _moco.MocoTropterSolver_printOptimizationSolverOptions(*args)

class MocoCasADiSolverNotAvailable(opensim.common.OpenSimException):
    r"""Proxy of C++ OpenSim::MocoCasADiSolverNotAvailable class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, file, line, func):
        r"""
        __init__(MocoCasADiSolverNotAvailable self, std::string const & file, int line, std::string const & func) -> MocoCasADiSolverNotAvailable

        Parameters
        ----------
        file: std::string const &
        line: int
        func: std::string const &

        """
        _moco.MocoCasADiSolverNotAvailable_swiginit(self, _moco.new_MocoCasADiSolverNotAvailable(file, line, func))
    __swig_destroy__ = _moco.delete_MocoCasADiSolverNotAvailable

# Register MocoCasADiSolverNotAvailable in _moco:
_moco.MocoCasADiSolverNotAvailable_swigregister(MocoCasADiSolverNotAvailable)

class MocoCasADiSolver(MocoDirectCollocationSolver):
    r"""Proxy of C++ OpenSim::MocoCasADiSolver class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def safeDownCast(obj):
        r"""
        safeDownCast(OpenSimObject obj) -> MocoCasADiSolver

        Parameters
        ----------
        obj: OpenSim::Object *

        """
        return _moco.MocoCasADiSolver_safeDownCast(obj)

    def assign(self, aObject):
        r"""
        assign(MocoCasADiSolver self, OpenSimObject aObject)

        Parameters
        ----------
        aObject: OpenSim::Object &

        """
        return _moco.MocoCasADiSolver_assign(self, aObject)

    @staticmethod
    def getClassName():
        r"""getClassName() -> std::string const &"""
        return _moco.MocoCasADiSolver_getClassName()

    def clone(self):
        r"""clone(MocoCasADiSolver self) -> MocoCasADiSolver"""
        return _moco.MocoCasADiSolver_clone(self)

    def getConcreteClassName(self):
        r"""getConcreteClassName(MocoCasADiSolver self) -> std::string const &"""
        return _moco.MocoCasADiSolver_getConcreteClassName(self)

    def copyProperty_parameters_require_initsystem(self, source):
        r"""
        copyProperty_parameters_require_initsystem(MocoCasADiSolver self, MocoCasADiSolver source)

        Parameters
        ----------
        source: OpenSim::MocoCasADiSolver::Self const &

        """
        return _moco.MocoCasADiSolver_copyProperty_parameters_require_initsystem(self, source)

    def append_parameters_require_initsystem(self, value):
        r"""
        append_parameters_require_initsystem(MocoCasADiSolver self, bool const & value) -> int

        Parameters
        ----------
        value: bool const &

        """
        return _moco.MocoCasADiSolver_append_parameters_require_initsystem(self, value)

    def constructProperty_parameters_require_initsystem(self, initValue):
        r"""
        constructProperty_parameters_require_initsystem(MocoCasADiSolver self, bool const & initValue)

        Parameters
        ----------
        initValue: bool const &

        """
        return _moco.MocoCasADiSolver_constructProperty_parameters_require_initsystem(self, initValue)

    def get_parameters_require_initsystem(self, *args):
        r"""
        get_parameters_require_initsystem(MocoCasADiSolver self, int i) -> bool const

        Parameters
        ----------
        i: int

        get_parameters_require_initsystem(MocoCasADiSolver self) -> bool const &
        """
        return _moco.MocoCasADiSolver_get_parameters_require_initsystem(self, *args)

    def upd_parameters_require_initsystem(self, *args):
        r"""
        upd_parameters_require_initsystem(MocoCasADiSolver self, int i) -> bool

        Parameters
        ----------
        i: int

        upd_parameters_require_initsystem(MocoCasADiSolver self) -> bool &
        """
        return _moco.MocoCasADiSolver_upd_parameters_require_initsystem(self, *args)

    def set_parameters_require_initsystem(self, *args):
        r"""
        set_parameters_require_initsystem(MocoCasADiSolver self, int i, bool const & value)

        Parameters
        ----------
        i: int
        value: bool const &

        set_parameters_require_initsystem(MocoCasADiSolver self, bool const & value)

        Parameters
        ----------
        value: bool const &

        """
        return _moco.MocoCasADiSolver_set_parameters_require_initsystem(self, *args)

    def copyProperty_optim_sparsity_detection(self, source):
        r"""
        copyProperty_optim_sparsity_detection(MocoCasADiSolver self, MocoCasADiSolver source)

        Parameters
        ----------
        source: OpenSim::MocoCasADiSolver::Self const &

        """
        return _moco.MocoCasADiSolver_copyProperty_optim_sparsity_detection(self, source)

    def append_optim_sparsity_detection(self, value):
        r"""
        append_optim_sparsity_detection(MocoCasADiSolver self, std::string const & value) -> int

        Parameters
        ----------
        value: std::string const &

        """
        return _moco.MocoCasADiSolver_append_optim_sparsity_detection(self, value)

    def constructProperty_optim_sparsity_detection(self, initValue):
        r"""
        constructProperty_optim_sparsity_detection(MocoCasADiSolver self, std::string const & initValue)

        Parameters
        ----------
        initValue: std::string const &

        """
        return _moco.MocoCasADiSolver_constructProperty_optim_sparsity_detection(self, initValue)

    def get_optim_sparsity_detection(self, *args):
        r"""
        get_optim_sparsity_detection(MocoCasADiSolver self, int i) -> std::string const

        Parameters
        ----------
        i: int

        get_optim_sparsity_detection(MocoCasADiSolver self) -> std::string const &
        """
        return _moco.MocoCasADiSolver_get_optim_sparsity_detection(self, *args)

    def upd_optim_sparsity_detection(self, *args):
        r"""
        upd_optim_sparsity_detection(MocoCasADiSolver self, int i) -> std::string

        Parameters
        ----------
        i: int

        upd_optim_sparsity_detection(MocoCasADiSolver self) -> std::string &
        """
        return _moco.MocoCasADiSolver_upd_optim_sparsity_detection(self, *args)

    def set_optim_sparsity_detection(self, *args):
        r"""
        set_optim_sparsity_detection(MocoCasADiSolver self, int i, std::string const & value)

        Parameters
        ----------
        i: int
        value: std::string const &

        set_optim_sparsity_detection(MocoCasADiSolver self, std::string const & value)

        Parameters
        ----------
        value: std::string const &

        """
        return _moco.MocoCasADiSolver_set_optim_sparsity_detection(self, *args)

    def copyProperty_optim_write_sparsity(self, source):
        r"""
        copyProperty_optim_write_sparsity(MocoCasADiSolver self, MocoCasADiSolver source)

        Parameters
        ----------
        source: OpenSim::MocoCasADiSolver::Self const &

        """
        return _moco.MocoCasADiSolver_copyProperty_optim_write_sparsity(self, source)

    def append_optim_write_sparsity(self, value):
        r"""
        append_optim_write_sparsity(MocoCasADiSolver self, std::string const & value) -> int

        Parameters
        ----------
        value: std::string const &

        """
        return _moco.MocoCasADiSolver_append_optim_write_sparsity(self, value)

    def constructProperty_optim_write_sparsity(self, initValue):
        r"""
        constructProperty_optim_write_sparsity(MocoCasADiSolver self, std::string const & initValue)

        Parameters
        ----------
        initValue: std::string const &

        """
        return _moco.MocoCasADiSolver_constructProperty_optim_write_sparsity(self, initValue)

    def get_optim_write_sparsity(self, *args):
        r"""
        get_optim_write_sparsity(MocoCasADiSolver self, int i) -> std::string const

        Parameters
        ----------
        i: int

        get_optim_write_sparsity(MocoCasADiSolver self) -> std::string const &
        """
        return _moco.MocoCasADiSolver_get_optim_write_sparsity(self, *args)

    def upd_optim_write_sparsity(self, *args):
        r"""
        upd_optim_write_sparsity(MocoCasADiSolver self, int i) -> std::string

        Parameters
        ----------
        i: int

        upd_optim_write_sparsity(MocoCasADiSolver self) -> std::string &
        """
        return _moco.MocoCasADiSolver_upd_optim_write_sparsity(self, *args)

    def set_optim_write_sparsity(self, *args):
        r"""
        set_optim_write_sparsity(MocoCasADiSolver self, int i, std::string const & value)

        Parameters
        ----------
        i: int
        value: std::string const &

        set_optim_write_sparsity(MocoCasADiSolver self, std::string const & value)

        Parameters
        ----------
        value: std::string const &

        """
        return _moco.MocoCasADiSolver_set_optim_write_sparsity(self, *args)

    def copyProperty_optim_finite_difference_scheme(self, source):
        r"""
        copyProperty_optim_finite_difference_scheme(MocoCasADiSolver self, MocoCasADiSolver source)

        Parameters
        ----------
        source: OpenSim::MocoCasADiSolver::Self const &

        """
        return _moco.MocoCasADiSolver_copyProperty_optim_finite_difference_scheme(self, source)

    def append_optim_finite_difference_scheme(self, value):
        r"""
        append_optim_finite_difference_scheme(MocoCasADiSolver self, std::string const & value) -> int

        Parameters
        ----------
        value: std::string const &

        """
        return _moco.MocoCasADiSolver_append_optim_finite_difference_scheme(self, value)

    def constructProperty_optim_finite_difference_scheme(self, initValue):
        r"""
        constructProperty_optim_finite_difference_scheme(MocoCasADiSolver self, std::string const & initValue)

        Parameters
        ----------
        initValue: std::string const &

        """
        return _moco.MocoCasADiSolver_constructProperty_optim_finite_difference_scheme(self, initValue)

    def get_optim_finite_difference_scheme(self, *args):
        r"""
        get_optim_finite_difference_scheme(MocoCasADiSolver self, int i) -> std::string const

        Parameters
        ----------
        i: int

        get_optim_finite_difference_scheme(MocoCasADiSolver self) -> std::string const &
        """
        return _moco.MocoCasADiSolver_get_optim_finite_difference_scheme(self, *args)

    def upd_optim_finite_difference_scheme(self, *args):
        r"""
        upd_optim_finite_difference_scheme(MocoCasADiSolver self, int i) -> std::string

        Parameters
        ----------
        i: int

        upd_optim_finite_difference_scheme(MocoCasADiSolver self) -> std::string &
        """
        return _moco.MocoCasADiSolver_upd_optim_finite_difference_scheme(self, *args)

    def set_optim_finite_difference_scheme(self, *args):
        r"""
        set_optim_finite_difference_scheme(MocoCasADiSolver self, int i, std::string const & value)

        Parameters
        ----------
        i: int
        value: std::string const &

        set_optim_finite_difference_scheme(MocoCasADiSolver self, std::string const & value)

        Parameters
        ----------
        value: std::string const &

        """
        return _moco.MocoCasADiSolver_set_optim_finite_difference_scheme(self, *args)

    def copyProperty_parallel(self, source):
        r"""
        copyProperty_parallel(MocoCasADiSolver self, MocoCasADiSolver source)

        Parameters
        ----------
        source: OpenSim::MocoCasADiSolver::Self const &

        """
        return _moco.MocoCasADiSolver_copyProperty_parallel(self, source)

    def append_parallel(self, value):
        r"""
        append_parallel(MocoCasADiSolver self, int const & value) -> int

        Parameters
        ----------
        value: int const &

        """
        return _moco.MocoCasADiSolver_append_parallel(self, value)

    def constructProperty_parallel(self, *args):
        r"""
        constructProperty_parallel(MocoCasADiSolver self)
        constructProperty_parallel(MocoCasADiSolver self, int const & initValue)

        Parameters
        ----------
        initValue: int const &

        """
        return _moco.MocoCasADiSolver_constructProperty_parallel(self, *args)

    def get_parallel(self, *args):
        r"""
        get_parallel(MocoCasADiSolver self, int i) -> int const

        Parameters
        ----------
        i: int

        get_parallel(MocoCasADiSolver self) -> int const &
        """
        return _moco.MocoCasADiSolver_get_parallel(self, *args)

    def upd_parallel(self, *args):
        r"""
        upd_parallel(MocoCasADiSolver self, int i) -> int

        Parameters
        ----------
        i: int

        upd_parallel(MocoCasADiSolver self) -> int &
        """
        return _moco.MocoCasADiSolver_upd_parallel(self, *args)

    def set_parallel(self, *args):
        r"""
        set_parallel(MocoCasADiSolver self, int i, int const & value)

        Parameters
        ----------
        i: int
        value: int const &

        set_parallel(MocoCasADiSolver self, int const & value)

        Parameters
        ----------
        value: int const &

        """
        return _moco.MocoCasADiSolver_set_parallel(self, *args)

    def copyProperty_output_interval(self, source):
        r"""
        copyProperty_output_interval(MocoCasADiSolver self, MocoCasADiSolver source)

        Parameters
        ----------
        source: OpenSim::MocoCasADiSolver::Self const &

        """
        return _moco.MocoCasADiSolver_copyProperty_output_interval(self, source)

    def append_output_interval(self, value):
        r"""
        append_output_interval(MocoCasADiSolver self, int const & value) -> int

        Parameters
        ----------
        value: int const &

        """
        return _moco.MocoCasADiSolver_append_output_interval(self, value)

    def constructProperty_output_interval(self, initValue):
        r"""
        constructProperty_output_interval(MocoCasADiSolver self, int const & initValue)

        Parameters
        ----------
        initValue: int const &

        """
        return _moco.MocoCasADiSolver_constructProperty_output_interval(self, initValue)

    def get_output_interval(self, *args):
        r"""
        get_output_interval(MocoCasADiSolver self, int i) -> int const

        Parameters
        ----------
        i: int

        get_output_interval(MocoCasADiSolver self) -> int const &
        """
        return _moco.MocoCasADiSolver_get_output_interval(self, *args)

    def upd_output_interval(self, *args):
        r"""
        upd_output_interval(MocoCasADiSolver self, int i) -> int

        Parameters
        ----------
        i: int

        upd_output_interval(MocoCasADiSolver self) -> int &
        """
        return _moco.MocoCasADiSolver_upd_output_interval(self, *args)

    def set_output_interval(self, *args):
        r"""
        set_output_interval(MocoCasADiSolver self, int i, int const & value)

        Parameters
        ----------
        i: int
        value: int const &

        set_output_interval(MocoCasADiSolver self, int const & value)

        Parameters
        ----------
        value: int const &

        """
        return _moco.MocoCasADiSolver_set_output_interval(self, *args)

    def copyProperty_minimize_implicit_multibody_accelerations(self, source):
        r"""
        copyProperty_minimize_implicit_multibody_accelerations(MocoCasADiSolver self, MocoCasADiSolver source)

        Parameters
        ----------
        source: OpenSim::MocoCasADiSolver::Self const &

        """
        return _moco.MocoCasADiSolver_copyProperty_minimize_implicit_multibody_accelerations(self, source)

    def append_minimize_implicit_multibody_accelerations(self, value):
        r"""
        append_minimize_implicit_multibody_accelerations(MocoCasADiSolver self, bool const & value) -> int

        Parameters
        ----------
        value: bool const &

        """
        return _moco.MocoCasADiSolver_append_minimize_implicit_multibody_accelerations(self, value)

    def constructProperty_minimize_implicit_multibody_accelerations(self, initValue):
        r"""
        constructProperty_minimize_implicit_multibody_accelerations(MocoCasADiSolver self, bool const & initValue)

        Parameters
        ----------
        initValue: bool const &

        """
        return _moco.MocoCasADiSolver_constructProperty_minimize_implicit_multibody_accelerations(self, initValue)

    def get_minimize_implicit_multibody_accelerations(self, *args):
        r"""
        get_minimize_implicit_multibody_accelerations(MocoCasADiSolver self, int i) -> bool const

        Parameters
        ----------
        i: int

        get_minimize_implicit_multibody_accelerations(MocoCasADiSolver self) -> bool const &
        """
        return _moco.MocoCasADiSolver_get_minimize_implicit_multibody_accelerations(self, *args)

    def upd_minimize_implicit_multibody_accelerations(self, *args):
        r"""
        upd_minimize_implicit_multibody_accelerations(MocoCasADiSolver self, int i) -> bool

        Parameters
        ----------
        i: int

        upd_minimize_implicit_multibody_accelerations(MocoCasADiSolver self) -> bool &
        """
        return _moco.MocoCasADiSolver_upd_minimize_implicit_multibody_accelerations(self, *args)

    def set_minimize_implicit_multibody_accelerations(self, *args):
        r"""
        set_minimize_implicit_multibody_accelerations(MocoCasADiSolver self, int i, bool const & value)

        Parameters
        ----------
        i: int
        value: bool const &

        set_minimize_implicit_multibody_accelerations(MocoCasADiSolver self, bool const & value)

        Parameters
        ----------
        value: bool const &

        """
        return _moco.MocoCasADiSolver_set_minimize_implicit_multibody_accelerations(self, *args)

    def copyProperty_implicit_multibody_accelerations_weight(self, source):
        r"""
        copyProperty_implicit_multibody_accelerations_weight(MocoCasADiSolver self, MocoCasADiSolver source)

        Parameters
        ----------
        source: OpenSim::MocoCasADiSolver::Self const &

        """
        return _moco.MocoCasADiSolver_copyProperty_implicit_multibody_accelerations_weight(self, source)

    def append_implicit_multibody_accelerations_weight(self, value):
        r"""
        append_implicit_multibody_accelerations_weight(MocoCasADiSolver self, double const & value) -> int

        Parameters
        ----------
        value: double const &

        """
        return _moco.MocoCasADiSolver_append_implicit_multibody_accelerations_weight(self, value)

    def constructProperty_implicit_multibody_accelerations_weight(self, initValue):
        r"""
        constructProperty_implicit_multibody_accelerations_weight(MocoCasADiSolver self, double const & initValue)

        Parameters
        ----------
        initValue: double const &

        """
        return _moco.MocoCasADiSolver_constructProperty_implicit_multibody_accelerations_weight(self, initValue)

    def get_implicit_multibody_accelerations_weight(self, *args):
        r"""
        get_implicit_multibody_accelerations_weight(MocoCasADiSolver self, int i) -> double const

        Parameters
        ----------
        i: int

        get_implicit_multibody_accelerations_weight(MocoCasADiSolver self) -> double const &
        """
        return _moco.MocoCasADiSolver_get_implicit_multibody_accelerations_weight(self, *args)

    def upd_implicit_multibody_accelerations_weight(self, *args):
        r"""
        upd_implicit_multibody_accelerations_weight(MocoCasADiSolver self, int i) -> double

        Parameters
        ----------
        i: int

        upd_implicit_multibody_accelerations_weight(MocoCasADiSolver self) -> double &
        """
        return _moco.MocoCasADiSolver_upd_implicit_multibody_accelerations_weight(self, *args)

    def set_implicit_multibody_accelerations_weight(self, *args):
        r"""
        set_implicit_multibody_accelerations_weight(MocoCasADiSolver self, int i, double const & value)

        Parameters
        ----------
        i: int
        value: double const &

        set_implicit_multibody_accelerations_weight(MocoCasADiSolver self, double const & value)

        Parameters
        ----------
        value: double const &

        """
        return _moco.MocoCasADiSolver_set_implicit_multibody_accelerations_weight(self, *args)

    def copyProperty_minimize_implicit_auxiliary_derivatives(self, source):
        r"""
        copyProperty_minimize_implicit_auxiliary_derivatives(MocoCasADiSolver self, MocoCasADiSolver source)

        Parameters
        ----------
        source: OpenSim::MocoCasADiSolver::Self const &

        """
        return _moco.MocoCasADiSolver_copyProperty_minimize_implicit_auxiliary_derivatives(self, source)

    def append_minimize_implicit_auxiliary_derivatives(self, value):
        r"""
        append_minimize_implicit_auxiliary_derivatives(MocoCasADiSolver self, bool const & value) -> int

        Parameters
        ----------
        value: bool const &

        """
        return _moco.MocoCasADiSolver_append_minimize_implicit_auxiliary_derivatives(self, value)

    def constructProperty_minimize_implicit_auxiliary_derivatives(self, initValue):
        r"""
        constructProperty_minimize_implicit_auxiliary_derivatives(MocoCasADiSolver self, bool const & initValue)

        Parameters
        ----------
        initValue: bool const &

        """
        return _moco.MocoCasADiSolver_constructProperty_minimize_implicit_auxiliary_derivatives(self, initValue)

    def get_minimize_implicit_auxiliary_derivatives(self, *args):
        r"""
        get_minimize_implicit_auxiliary_derivatives(MocoCasADiSolver self, int i) -> bool const

        Parameters
        ----------
        i: int

        get_minimize_implicit_auxiliary_derivatives(MocoCasADiSolver self) -> bool const &
        """
        return _moco.MocoCasADiSolver_get_minimize_implicit_auxiliary_derivatives(self, *args)

    def upd_minimize_implicit_auxiliary_derivatives(self, *args):
        r"""
        upd_minimize_implicit_auxiliary_derivatives(MocoCasADiSolver self, int i) -> bool

        Parameters
        ----------
        i: int

        upd_minimize_implicit_auxiliary_derivatives(MocoCasADiSolver self) -> bool &
        """
        return _moco.MocoCasADiSolver_upd_minimize_implicit_auxiliary_derivatives(self, *args)

    def set_minimize_implicit_auxiliary_derivatives(self, *args):
        r"""
        set_minimize_implicit_auxiliary_derivatives(MocoCasADiSolver self, int i, bool const & value)

        Parameters
        ----------
        i: int
        value: bool const &

        set_minimize_implicit_auxiliary_derivatives(MocoCasADiSolver self, bool const & value)

        Parameters
        ----------
        value: bool const &

        """
        return _moco.MocoCasADiSolver_set_minimize_implicit_auxiliary_derivatives(self, *args)

    def copyProperty_implicit_auxiliary_derivatives_weight(self, source):
        r"""
        copyProperty_implicit_auxiliary_derivatives_weight(MocoCasADiSolver self, MocoCasADiSolver source)

        Parameters
        ----------
        source: OpenSim::MocoCasADiSolver::Self const &

        """
        return _moco.MocoCasADiSolver_copyProperty_implicit_auxiliary_derivatives_weight(self, source)

    def append_implicit_auxiliary_derivatives_weight(self, value):
        r"""
        append_implicit_auxiliary_derivatives_weight(MocoCasADiSolver self, double const & value) -> int

        Parameters
        ----------
        value: double const &

        """
        return _moco.MocoCasADiSolver_append_implicit_auxiliary_derivatives_weight(self, value)

    def constructProperty_implicit_auxiliary_derivatives_weight(self, initValue):
        r"""
        constructProperty_implicit_auxiliary_derivatives_weight(MocoCasADiSolver self, double const & initValue)

        Parameters
        ----------
        initValue: double const &

        """
        return _moco.MocoCasADiSolver_constructProperty_implicit_auxiliary_derivatives_weight(self, initValue)

    def get_implicit_auxiliary_derivatives_weight(self, *args):
        r"""
        get_implicit_auxiliary_derivatives_weight(MocoCasADiSolver self, int i) -> double const

        Parameters
        ----------
        i: int

        get_implicit_auxiliary_derivatives_weight(MocoCasADiSolver self) -> double const &
        """
        return _moco.MocoCasADiSolver_get_implicit_auxiliary_derivatives_weight(self, *args)

    def upd_implicit_auxiliary_derivatives_weight(self, *args):
        r"""
        upd_implicit_auxiliary_derivatives_weight(MocoCasADiSolver self, int i) -> double

        Parameters
        ----------
        i: int

        upd_implicit_auxiliary_derivatives_weight(MocoCasADiSolver self) -> double &
        """
        return _moco.MocoCasADiSolver_upd_implicit_auxiliary_derivatives_weight(self, *args)

    def set_implicit_auxiliary_derivatives_weight(self, *args):
        r"""
        set_implicit_auxiliary_derivatives_weight(MocoCasADiSolver self, int i, double const & value)

        Parameters
        ----------
        i: int
        value: double const &

        set_implicit_auxiliary_derivatives_weight(MocoCasADiSolver self, double const & value)

        Parameters
        ----------
        value: double const &

        """
        return _moco.MocoCasADiSolver_set_implicit_auxiliary_derivatives_weight(self, *args)

    def __init__(self):
        r"""__init__(MocoCasADiSolver self) -> MocoCasADiSolver"""
        _moco.MocoCasADiSolver_swiginit(self, _moco.new_MocoCasADiSolver())

    @staticmethod
    def isAvailable():
        r"""isAvailable() -> bool"""
        return _moco.MocoCasADiSolver_isAvailable()

    def createGuess(self, *args):
        r"""
        createGuess(MocoCasADiSolver self, std::string const & type="bounds") -> MocoTrajectory

        Parameters
        ----------
        type: std::string const &

        """
        return _moco.MocoCasADiSolver_createGuess(self, *args)

    def setGuess(self, *args):
        r"""
        setGuess(MocoCasADiSolver self, MocoTrajectory guess)

        Parameters
        ----------
        guess: OpenSim::MocoTrajectory

        setGuess(MocoCasADiSolver self, std::string const & type)

        Parameters
        ----------
        type: std::string const &

        """
        return _moco.MocoCasADiSolver_setGuess(self, *args)

    def setGuessFile(self, file):
        r"""
        setGuessFile(MocoCasADiSolver self, std::string const & file)

        Parameters
        ----------
        file: std::string const &

        """
        return _moco.MocoCasADiSolver_setGuessFile(self, file)

    def clearGuess(self):
        r"""clearGuess(MocoCasADiSolver self)"""
        return _moco.MocoCasADiSolver_clearGuess(self)

    def getGuess(self):
        r"""getGuess(MocoCasADiSolver self) -> MocoTrajectory"""
        return _moco.MocoCasADiSolver_getGuess(self)
    __swig_destroy__ = _moco.delete_MocoCasADiSolver

# Register MocoCasADiSolver in _moco:
_moco.MocoCasADiSolver_swigregister(MocoCasADiSolver)

def MocoCasADiSolver_safeDownCast(obj):
    r"""
    MocoCasADiSolver_safeDownCast(OpenSimObject obj) -> MocoCasADiSolver

    Parameters
    ----------
    obj: OpenSim::Object *

    """
    return _moco.MocoCasADiSolver_safeDownCast(obj)

def MocoCasADiSolver_getClassName():
    r"""MocoCasADiSolver_getClassName() -> std::string const &"""
    return _moco.MocoCasADiSolver_getClassName()

def MocoCasADiSolver_isAvailable():
    r"""MocoCasADiSolver_isAvailable() -> bool"""
    return _moco.MocoCasADiSolver_isAvailable()

class MocoStudy(opensim.common.OpenSimObject):
    r"""Proxy of C++ OpenSim::MocoStudy class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def safeDownCast(obj):
        r"""
        safeDownCast(OpenSimObject obj) -> MocoStudy

        Parameters
        ----------
        obj: OpenSim::Object *

        """
        return _moco.MocoStudy_safeDownCast(obj)

    def assign(self, aObject):
        r"""
        assign(MocoStudy self, OpenSimObject aObject)

        Parameters
        ----------
        aObject: OpenSim::Object &

        """
        return _moco.MocoStudy_assign(self, aObject)

    @staticmethod
    def getClassName():
        r"""getClassName() -> std::string const &"""
        return _moco.MocoStudy_getClassName()

    def clone(self):
        r"""clone(MocoStudy self) -> MocoStudy"""
        return _moco.MocoStudy_clone(self)

    def getConcreteClassName(self):
        r"""getConcreteClassName(MocoStudy self) -> std::string const &"""
        return _moco.MocoStudy_getConcreteClassName(self)

    def copyProperty_write_solution(self, source):
        r"""
        copyProperty_write_solution(MocoStudy self, MocoStudy source)

        Parameters
        ----------
        source: OpenSim::MocoStudy::Self const &

        """
        return _moco.MocoStudy_copyProperty_write_solution(self, source)

    def append_write_solution(self, value):
        r"""
        append_write_solution(MocoStudy self, bool const & value) -> int

        Parameters
        ----------
        value: bool const &

        """
        return _moco.MocoStudy_append_write_solution(self, value)

    def constructProperty_write_solution(self, initValue):
        r"""
        constructProperty_write_solution(MocoStudy self, bool const & initValue)

        Parameters
        ----------
        initValue: bool const &

        """
        return _moco.MocoStudy_constructProperty_write_solution(self, initValue)

    def get_write_solution(self, *args):
        r"""
        get_write_solution(MocoStudy self, int i) -> bool const

        Parameters
        ----------
        i: int

        get_write_solution(MocoStudy self) -> bool const &
        """
        return _moco.MocoStudy_get_write_solution(self, *args)

    def upd_write_solution(self, *args):
        r"""
        upd_write_solution(MocoStudy self, int i) -> bool

        Parameters
        ----------
        i: int

        upd_write_solution(MocoStudy self) -> bool &
        """
        return _moco.MocoStudy_upd_write_solution(self, *args)

    def set_write_solution(self, *args):
        r"""
        set_write_solution(MocoStudy self, int i, bool const & value)

        Parameters
        ----------
        i: int
        value: bool const &

        set_write_solution(MocoStudy self, bool const & value)

        Parameters
        ----------
        value: bool const &

        """
        return _moco.MocoStudy_set_write_solution(self, *args)

    def copyProperty_results_directory(self, source):
        r"""
        copyProperty_results_directory(MocoStudy self, MocoStudy source)

        Parameters
        ----------
        source: OpenSim::MocoStudy::Self const &

        """
        return _moco.MocoStudy_copyProperty_results_directory(self, source)

    def append_results_directory(self, value):
        r"""
        append_results_directory(MocoStudy self, std::string const & value) -> int

        Parameters
        ----------
        value: std::string const &

        """
        return _moco.MocoStudy_append_results_directory(self, value)

    def constructProperty_results_directory(self, initValue):
        r"""
        constructProperty_results_directory(MocoStudy self, std::string const & initValue)

        Parameters
        ----------
        initValue: std::string const &

        """
        return _moco.MocoStudy_constructProperty_results_directory(self, initValue)

    def get_results_directory(self, *args):
        r"""
        get_results_directory(MocoStudy self, int i) -> std::string const

        Parameters
        ----------
        i: int

        get_results_directory(MocoStudy self) -> std::string const &
        """
        return _moco.MocoStudy_get_results_directory(self, *args)

    def upd_results_directory(self, *args):
        r"""
        upd_results_directory(MocoStudy self, int i) -> std::string

        Parameters
        ----------
        i: int

        upd_results_directory(MocoStudy self) -> std::string &
        """
        return _moco.MocoStudy_upd_results_directory(self, *args)

    def set_results_directory(self, *args):
        r"""
        set_results_directory(MocoStudy self, int i, std::string const & value)

        Parameters
        ----------
        i: int
        value: std::string const &

        set_results_directory(MocoStudy self, std::string const & value)

        Parameters
        ----------
        value: std::string const &

        """
        return _moco.MocoStudy_set_results_directory(self, *args)

    def __init__(self, *args):
        r"""
        __init__(MocoStudy self) -> MocoStudy
        __init__(MocoStudy self, std::string const & omocoFile) -> MocoStudy

        Parameters
        ----------
        omocoFile: std::string const &

        """
        _moco.MocoStudy_swiginit(self, _moco.new_MocoStudy(*args))

    def getProblem(self):
        r"""getProblem(MocoStudy self) -> MocoProblem"""
        return _moco.MocoStudy_getProblem(self)

    def updProblem(self):
        r"""updProblem(MocoStudy self) -> MocoProblem"""
        return _moco.MocoStudy_updProblem(self)

    def initCasADiSolver(self):
        r"""initCasADiSolver(MocoStudy self) -> MocoCasADiSolver"""
        return _moco.MocoStudy_initCasADiSolver(self)

    def initTropterSolver(self):
        r"""initTropterSolver(MocoStudy self) -> MocoTropterSolver"""
        return _moco.MocoStudy_initTropterSolver(self)

    def updSolver(self):
        r"""updSolver(MocoStudy self) -> MocoSolver"""
        return _moco.MocoStudy_updSolver(self)

    def solve(self):
        r"""solve(MocoStudy self) -> MocoSolution"""
        return _moco.MocoStudy_solve(self)

    def visualize(self, it):
        r"""
        visualize(MocoStudy self, MocoTrajectory it)

        Parameters
        ----------
        it: OpenSim::MocoTrajectory const &

        """
        return _moco.MocoStudy_visualize(self, it)

    def analyze(self, it, outputPaths):
        r"""
        analyze(MocoStudy self, MocoTrajectory it, StdVectorString outputPaths) -> TimeSeriesTable

        Parameters
        ----------
        it: OpenSim::MocoTrajectory const &
        outputPaths: std::vector< std::string,std::allocator< std::string > >

        """
        return _moco.MocoStudy_analyze(self, it, outputPaths)
    __swig_destroy__ = _moco.delete_MocoStudy

# Register MocoStudy in _moco:
_moco.MocoStudy_swigregister(MocoStudy)

def MocoStudy_safeDownCast(obj):
    r"""
    MocoStudy_safeDownCast(OpenSimObject obj) -> MocoStudy

    Parameters
    ----------
    obj: OpenSim::Object *

    """
    return _moco.MocoStudy_safeDownCast(obj)

def MocoStudy_getClassName():
    r"""MocoStudy_getClassName() -> std::string const &"""
    return _moco.MocoStudy_getClassName()

class MocoStudyFactory(object):
    r"""Proxy of C++ OpenSim::MocoStudyFactory class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def createLinearTangentSteeringStudy(acceleration, finalTime, finalHeight):
        r"""
        createLinearTangentSteeringStudy(double acceleration, double finalTime, double finalHeight) -> MocoStudy

        Parameters
        ----------
        acceleration: double
        finalTime: double
        finalHeight: double

        """
        return _moco.MocoStudyFactory_createLinearTangentSteeringStudy(acceleration, finalTime, finalHeight)

    def __init__(self):
        r"""__init__(MocoStudyFactory self) -> MocoStudyFactory"""
        _moco.MocoStudyFactory_swiginit(self, _moco.new_MocoStudyFactory())
    __swig_destroy__ = _moco.delete_MocoStudyFactory

# Register MocoStudyFactory in _moco:
_moco.MocoStudyFactory_swigregister(MocoStudyFactory)

def MocoStudyFactory_createLinearTangentSteeringStudy(acceleration, finalTime, finalHeight):
    r"""
    MocoStudyFactory_createLinearTangentSteeringStudy(double acceleration, double finalTime, double finalHeight) -> MocoStudy

    Parameters
    ----------
    acceleration: double
    finalTime: double
    finalHeight: double

    """
    return _moco.MocoStudyFactory_createLinearTangentSteeringStudy(acceleration, finalTime, finalHeight)

class MocoTool(opensim.common.OpenSimObject):
    r"""Proxy of C++ OpenSim::MocoTool class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    @staticmethod
    def safeDownCast(obj):
        r"""
        safeDownCast(OpenSimObject obj) -> MocoTool

        Parameters
        ----------
        obj: OpenSim::Object *

        """
        return _moco.MocoTool_safeDownCast(obj)

    def assign(self, aObject):
        r"""
        assign(MocoTool self, OpenSimObject aObject)

        Parameters
        ----------
        aObject: OpenSim::Object &

        """
        return _moco.MocoTool_assign(self, aObject)

    @staticmethod
    def getClassName():
        r"""getClassName() -> std::string const &"""
        return _moco.MocoTool_getClassName()

    def clone(self):
        r"""clone(MocoTool self) -> MocoTool"""
        return _moco.MocoTool_clone(self)

    def getConcreteClassName(self):
        r"""getConcreteClassName(MocoTool self) -> std::string const &"""
        return _moco.MocoTool_getConcreteClassName(self)

    def copyProperty_initial_time(self, source):
        r"""
        copyProperty_initial_time(MocoTool self, MocoTool source)

        Parameters
        ----------
        source: OpenSim::MocoTool::Self const &

        """
        return _moco.MocoTool_copyProperty_initial_time(self, source)

    def append_initial_time(self, value):
        r"""
        append_initial_time(MocoTool self, double const & value) -> int

        Parameters
        ----------
        value: double const &

        """
        return _moco.MocoTool_append_initial_time(self, value)

    def constructProperty_initial_time(self, *args):
        r"""
        constructProperty_initial_time(MocoTool self)
        constructProperty_initial_time(MocoTool self, double const & initValue)

        Parameters
        ----------
        initValue: double const &

        """
        return _moco.MocoTool_constructProperty_initial_time(self, *args)

    def get_initial_time(self, *args):
        r"""
        get_initial_time(MocoTool self, int i) -> double const

        Parameters
        ----------
        i: int

        get_initial_time(MocoTool self) -> double const &
        """
        return _moco.MocoTool_get_initial_time(self, *args)

    def upd_initial_time(self, *args):
        r"""
        upd_initial_time(MocoTool self, int i) -> double

        Parameters
        ----------
        i: int

        upd_initial_time(MocoTool self) -> double &
        """
        return _moco.MocoTool_upd_initial_time(self, *args)

    def set_initial_time(self, *args):
        r"""
        set_initial_time(MocoTool self, int i, double const & value)

        Parameters
        ----------
        i: int
        value: double const &

        set_initial_time(MocoTool self, double const & value)

        Parameters
        ----------
        value: double const &

        """
        return _moco.MocoTool_set_initial_time(self, *args)

    def copyProperty_final_time(self, source):
        r"""
        copyProperty_final_time(MocoTool self, MocoTool source)

        Parameters
        ----------
        source: OpenSim::MocoTool::Self const &

        """
        return _moco.MocoTool_copyProperty_final_time(self, source)

    def append_final_time(self, value):
        r"""
        append_final_time(MocoTool self, double const & value) -> int

        Parameters
        ----------
        value: double const &

        """
        return _moco.MocoTool_append_final_time(self, value)

    def constructProperty_final_time(self, *args):
        r"""
        constructProperty_final_time(MocoTool self)
        constructProperty_final_time(MocoTool self, double const & initValue)

        Parameters
        ----------
        initValue: double const &

        """
        return _moco.MocoTool_constructProperty_final_time(self, *args)

    def get_final_time(self, *args):
        r"""
        get_final_time(MocoTool self, int i) -> double const

        Parameters
        ----------
        i: int

        get_final_time(MocoTool self) -> double const &
        """
        return _moco.MocoTool_get_final_time(self, *args)

    def upd_final_time(self, *args):
        r"""
        upd_final_time(MocoTool self, int i) -> double

        Parameters
        ----------
        i: int

        upd_final_time(MocoTool self) -> double &
        """
        return _moco.MocoTool_upd_final_time(self, *args)

    def set_final_time(self, *args):
        r"""
        set_final_time(MocoTool self, int i, double const & value)

        Parameters
        ----------
        i: int
        value: double const &

        set_final_time(MocoTool self, double const & value)

        Parameters
        ----------
        value: double const &

        """
        return _moco.MocoTool_set_final_time(self, *args)

    def copyProperty_mesh_interval(self, source):
        r"""
        copyProperty_mesh_interval(MocoTool self, MocoTool source)

        Parameters
        ----------
        source: OpenSim::MocoTool::Self const &

        """
        return _moco.MocoTool_copyProperty_mesh_interval(self, source)

    def append_mesh_interval(self, value):
        r"""
        append_mesh_interval(MocoTool self, double const & value) -> int

        Parameters
        ----------
        value: double const &

        """
        return _moco.MocoTool_append_mesh_interval(self, value)

    def constructProperty_mesh_interval(self, initValue):
        r"""
        constructProperty_mesh_interval(MocoTool self, double const & initValue)

        Parameters
        ----------
        initValue: double const &

        """
        return _moco.MocoTool_constructProperty_mesh_interval(self, initValue)

    def get_mesh_interval(self, *args):
        r"""
        get_mesh_interval(MocoTool self, int i) -> double const

        Parameters
        ----------
        i: int

        get_mesh_interval(MocoTool self) -> double const &
        """
        return _moco.MocoTool_get_mesh_interval(self, *args)

    def upd_mesh_interval(self, *args):
        r"""
        upd_mesh_interval(MocoTool self, int i) -> double

        Parameters
        ----------
        i: int

        upd_mesh_interval(MocoTool self) -> double &
        """
        return _moco.MocoTool_upd_mesh_interval(self, *args)

    def set_mesh_interval(self, *args):
        r"""
        set_mesh_interval(MocoTool self, int i, double const & value)

        Parameters
        ----------
        i: int
        value: double const &

        set_mesh_interval(MocoTool self, double const & value)

        Parameters
        ----------
        value: double const &

        """
        return _moco.MocoTool_set_mesh_interval(self, *args)

    def copyProperty_clip_time_range(self, source):
        r"""
        copyProperty_clip_time_range(MocoTool self, MocoTool source)

        Parameters
        ----------
        source: OpenSim::MocoTool::Self const &

        """
        return _moco.MocoTool_copyProperty_clip_time_range(self, source)

    def append_clip_time_range(self, value):
        r"""
        append_clip_time_range(MocoTool self, bool const & value) -> int

        Parameters
        ----------
        value: bool const &

        """
        return _moco.MocoTool_append_clip_time_range(self, value)

    def constructProperty_clip_time_range(self, initValue):
        r"""
        constructProperty_clip_time_range(MocoTool self, bool const & initValue)

        Parameters
        ----------
        initValue: bool const &

        """
        return _moco.MocoTool_constructProperty_clip_time_range(self, initValue)

    def get_clip_time_range(self, *args):
        r"""
        get_clip_time_range(MocoTool self, int i) -> bool const

        Parameters
        ----------
        i: int

        get_clip_time_range(MocoTool self) -> bool const &
        """
        return _moco.MocoTool_get_clip_time_range(self, *args)

    def upd_clip_time_range(self, *args):
        r"""
        upd_clip_time_range(MocoTool self, int i) -> bool

        Parameters
        ----------
        i: int

        upd_clip_time_range(MocoTool self) -> bool &
        """
        return _moco.MocoTool_upd_clip_time_range(self, *args)

    def set_clip_time_range(self, *args):
        r"""
        set_clip_time_range(MocoTool self, int i, bool const & value)

        Parameters
        ----------
        i: int
        value: bool const &

        set_clip_time_range(MocoTool self, bool const & value)

        Parameters
        ----------
        value: bool const &

        """
        return _moco.MocoTool_set_clip_time_range(self, *args)

    def copyProperty_model(self, source):
        r"""
        copyProperty_model(MocoTool self, MocoTool source)

        Parameters
        ----------
        source: OpenSim::MocoTool::Self const &

        """
        return _moco.MocoTool_copyProperty_model(self, source)

    def append_model(self, value):
        r"""
        append_model(MocoTool self, ModelProcessor value) -> int

        Parameters
        ----------
        value: OpenSim::ModelProcessor const &

        """
        return _moco.MocoTool_append_model(self, value)

    def constructProperty_model(self, initValue):
        r"""
        constructProperty_model(MocoTool self, ModelProcessor initValue)

        Parameters
        ----------
        initValue: OpenSim::ModelProcessor const &

        """
        return _moco.MocoTool_constructProperty_model(self, initValue)

    def get_model(self, *args):
        r"""
        get_model(MocoTool self, int i) -> ModelProcessor

        Parameters
        ----------
        i: int

        get_model(MocoTool self) -> ModelProcessor
        """
        return _moco.MocoTool_get_model(self, *args)

    def upd_model(self, *args):
        r"""
        upd_model(MocoTool self, int i) -> ModelProcessor

        Parameters
        ----------
        i: int

        upd_model(MocoTool self) -> ModelProcessor
        """
        return _moco.MocoTool_upd_model(self, *args)

    def set_model(self, *args):
        r"""
        set_model(MocoTool self, int i, ModelProcessor value)

        Parameters
        ----------
        i: int
        value: OpenSim::ModelProcessor const &

        set_model(MocoTool self, ModelProcessor value)

        Parameters
        ----------
        value: OpenSim::ModelProcessor const &

        """
        return _moco.MocoTool_set_model(self, *args)

    def setModel(self, model):
        r"""
        setModel(MocoTool self, ModelProcessor model)

        Parameters
        ----------
        model: OpenSim::ModelProcessor

        """
        return _moco.MocoTool_setModel(self, model)
    __swig_destroy__ = _moco.delete_MocoTool

# Register MocoTool in _moco:
_moco.MocoTool_swigregister(MocoTool)

def MocoTool_safeDownCast(obj):
    r"""
    MocoTool_safeDownCast(OpenSimObject obj) -> MocoTool

    Parameters
    ----------
    obj: OpenSim::Object *

    """
    return _moco.MocoTool_safeDownCast(obj)

def MocoTool_getClassName():
    r"""MocoTool_getClassName() -> std::string const &"""
    return _moco.MocoTool_getClassName()

class MocoInverseSolution(object):
    r"""Proxy of C++ OpenSim::MocoInverseSolution class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def getMocoSolution(self):
        r"""getMocoSolution(MocoInverseSolution self) -> MocoSolution"""
        return _moco.MocoInverseSolution_getMocoSolution(self)

    def getOutputs(self):
        r"""getOutputs(MocoInverseSolution self) -> TimeSeriesTable"""
        return _moco.MocoInverseSolution_getOutputs(self)

    def __init__(self):
        r"""__init__(MocoInverseSolution self) -> MocoInverseSolution"""
        _moco.MocoInverseSolution_swiginit(self, _moco.new_MocoInverseSolution())
    __swig_destroy__ = _moco.delete_MocoInverseSolution

# Register MocoInverseSolution in _moco:
_moco.MocoInverseSolution_swigregister(MocoInverseSolution)

class MocoInverse(MocoTool):
    r"""Proxy of C++ OpenSim::MocoInverse class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def safeDownCast(obj):
        r"""
        safeDownCast(OpenSimObject obj) -> MocoInverse

        Parameters
        ----------
        obj: OpenSim::Object *

        """
        return _moco.MocoInverse_safeDownCast(obj)

    def assign(self, aObject):
        r"""
        assign(MocoInverse self, OpenSimObject aObject)

        Parameters
        ----------
        aObject: OpenSim::Object &

        """
        return _moco.MocoInverse_assign(self, aObject)

    @staticmethod
    def getClassName():
        r"""getClassName() -> std::string const &"""
        return _moco.MocoInverse_getClassName()

    def clone(self):
        r"""clone(MocoInverse self) -> MocoInverse"""
        return _moco.MocoInverse_clone(self)

    def getConcreteClassName(self):
        r"""getConcreteClassName(MocoInverse self) -> std::string const &"""
        return _moco.MocoInverse_getConcreteClassName(self)

    def copyProperty_kinematics(self, source):
        r"""
        copyProperty_kinematics(MocoInverse self, MocoInverse source)

        Parameters
        ----------
        source: OpenSim::MocoInverse::Self const &

        """
        return _moco.MocoInverse_copyProperty_kinematics(self, source)

    def append_kinematics(self, value):
        r"""
        append_kinematics(MocoInverse self, TableProcessor value) -> int

        Parameters
        ----------
        value: OpenSim::TableProcessor const &

        """
        return _moco.MocoInverse_append_kinematics(self, value)

    def constructProperty_kinematics(self, initValue):
        r"""
        constructProperty_kinematics(MocoInverse self, TableProcessor initValue)

        Parameters
        ----------
        initValue: OpenSim::TableProcessor const &

        """
        return _moco.MocoInverse_constructProperty_kinematics(self, initValue)

    def get_kinematics(self, *args):
        r"""
        get_kinematics(MocoInverse self, int i) -> TableProcessor

        Parameters
        ----------
        i: int

        get_kinematics(MocoInverse self) -> TableProcessor
        """
        return _moco.MocoInverse_get_kinematics(self, *args)

    def upd_kinematics(self, *args):
        r"""
        upd_kinematics(MocoInverse self, int i) -> TableProcessor

        Parameters
        ----------
        i: int

        upd_kinematics(MocoInverse self) -> TableProcessor
        """
        return _moco.MocoInverse_upd_kinematics(self, *args)

    def set_kinematics(self, *args):
        r"""
        set_kinematics(MocoInverse self, int i, TableProcessor value)

        Parameters
        ----------
        i: int
        value: OpenSim::TableProcessor const &

        set_kinematics(MocoInverse self, TableProcessor value)

        Parameters
        ----------
        value: OpenSim::TableProcessor const &

        """
        return _moco.MocoInverse_set_kinematics(self, *args)

    def copyProperty_kinematics_allow_extra_columns(self, source):
        r"""
        copyProperty_kinematics_allow_extra_columns(MocoInverse self, MocoInverse source)

        Parameters
        ----------
        source: OpenSim::MocoInverse::Self const &

        """
        return _moco.MocoInverse_copyProperty_kinematics_allow_extra_columns(self, source)

    def append_kinematics_allow_extra_columns(self, value):
        r"""
        append_kinematics_allow_extra_columns(MocoInverse self, bool const & value) -> int

        Parameters
        ----------
        value: bool const &

        """
        return _moco.MocoInverse_append_kinematics_allow_extra_columns(self, value)

    def constructProperty_kinematics_allow_extra_columns(self, initValue):
        r"""
        constructProperty_kinematics_allow_extra_columns(MocoInverse self, bool const & initValue)

        Parameters
        ----------
        initValue: bool const &

        """
        return _moco.MocoInverse_constructProperty_kinematics_allow_extra_columns(self, initValue)

    def get_kinematics_allow_extra_columns(self, *args):
        r"""
        get_kinematics_allow_extra_columns(MocoInverse self, int i) -> bool const

        Parameters
        ----------
        i: int

        get_kinematics_allow_extra_columns(MocoInverse self) -> bool const &
        """
        return _moco.MocoInverse_get_kinematics_allow_extra_columns(self, *args)

    def upd_kinematics_allow_extra_columns(self, *args):
        r"""
        upd_kinematics_allow_extra_columns(MocoInverse self, int i) -> bool

        Parameters
        ----------
        i: int

        upd_kinematics_allow_extra_columns(MocoInverse self) -> bool &
        """
        return _moco.MocoInverse_upd_kinematics_allow_extra_columns(self, *args)

    def set_kinematics_allow_extra_columns(self, *args):
        r"""
        set_kinematics_allow_extra_columns(MocoInverse self, int i, bool const & value)

        Parameters
        ----------
        i: int
        value: bool const &

        set_kinematics_allow_extra_columns(MocoInverse self, bool const & value)

        Parameters
        ----------
        value: bool const &

        """
        return _moco.MocoInverse_set_kinematics_allow_extra_columns(self, *args)

    def copyProperty_minimize_sum_squared_activations(self, source):
        r"""
        copyProperty_minimize_sum_squared_activations(MocoInverse self, MocoInverse source)

        Parameters
        ----------
        source: OpenSim::MocoInverse::Self const &

        """
        return _moco.MocoInverse_copyProperty_minimize_sum_squared_activations(self, source)

    def append_minimize_sum_squared_activations(self, value):
        r"""
        append_minimize_sum_squared_activations(MocoInverse self, bool const & value) -> int

        Parameters
        ----------
        value: bool const &

        """
        return _moco.MocoInverse_append_minimize_sum_squared_activations(self, value)

    def constructProperty_minimize_sum_squared_activations(self, initValue):
        r"""
        constructProperty_minimize_sum_squared_activations(MocoInverse self, bool const & initValue)

        Parameters
        ----------
        initValue: bool const &

        """
        return _moco.MocoInverse_constructProperty_minimize_sum_squared_activations(self, initValue)

    def get_minimize_sum_squared_activations(self, *args):
        r"""
        get_minimize_sum_squared_activations(MocoInverse self, int i) -> bool const

        Parameters
        ----------
        i: int

        get_minimize_sum_squared_activations(MocoInverse self) -> bool const &
        """
        return _moco.MocoInverse_get_minimize_sum_squared_activations(self, *args)

    def upd_minimize_sum_squared_activations(self, *args):
        r"""
        upd_minimize_sum_squared_activations(MocoInverse self, int i) -> bool

        Parameters
        ----------
        i: int

        upd_minimize_sum_squared_activations(MocoInverse self) -> bool &
        """
        return _moco.MocoInverse_upd_minimize_sum_squared_activations(self, *args)

    def set_minimize_sum_squared_activations(self, *args):
        r"""
        set_minimize_sum_squared_activations(MocoInverse self, int i, bool const & value)

        Parameters
        ----------
        i: int
        value: bool const &

        set_minimize_sum_squared_activations(MocoInverse self, bool const & value)

        Parameters
        ----------
        value: bool const &

        """
        return _moco.MocoInverse_set_minimize_sum_squared_activations(self, *args)

    def copyProperty_max_iterations(self, source):
        r"""
        copyProperty_max_iterations(MocoInverse self, MocoInverse source)

        Parameters
        ----------
        source: OpenSim::MocoInverse::Self const &

        """
        return _moco.MocoInverse_copyProperty_max_iterations(self, source)

    def append_max_iterations(self, value):
        r"""
        append_max_iterations(MocoInverse self, int const & value) -> int

        Parameters
        ----------
        value: int const &

        """
        return _moco.MocoInverse_append_max_iterations(self, value)

    def constructProperty_max_iterations(self, *args):
        r"""
        constructProperty_max_iterations(MocoInverse self)
        constructProperty_max_iterations(MocoInverse self, int const & initValue)

        Parameters
        ----------
        initValue: int const &

        """
        return _moco.MocoInverse_constructProperty_max_iterations(self, *args)

    def get_max_iterations(self, *args):
        r"""
        get_max_iterations(MocoInverse self, int i) -> int const

        Parameters
        ----------
        i: int

        get_max_iterations(MocoInverse self) -> int const &
        """
        return _moco.MocoInverse_get_max_iterations(self, *args)

    def upd_max_iterations(self, *args):
        r"""
        upd_max_iterations(MocoInverse self, int i) -> int

        Parameters
        ----------
        i: int

        upd_max_iterations(MocoInverse self) -> int &
        """
        return _moco.MocoInverse_upd_max_iterations(self, *args)

    def set_max_iterations(self, *args):
        r"""
        set_max_iterations(MocoInverse self, int i, int const & value)

        Parameters
        ----------
        i: int
        value: int const &

        set_max_iterations(MocoInverse self, int const & value)

        Parameters
        ----------
        value: int const &

        """
        return _moco.MocoInverse_set_max_iterations(self, *args)

    def copyProperty_convergence_tolerance(self, source):
        r"""
        copyProperty_convergence_tolerance(MocoInverse self, MocoInverse source)

        Parameters
        ----------
        source: OpenSim::MocoInverse::Self const &

        """
        return _moco.MocoInverse_copyProperty_convergence_tolerance(self, source)

    def append_convergence_tolerance(self, value):
        r"""
        append_convergence_tolerance(MocoInverse self, double const & value) -> int

        Parameters
        ----------
        value: double const &

        """
        return _moco.MocoInverse_append_convergence_tolerance(self, value)

    def constructProperty_convergence_tolerance(self, initValue):
        r"""
        constructProperty_convergence_tolerance(MocoInverse self, double const & initValue)

        Parameters
        ----------
        initValue: double const &

        """
        return _moco.MocoInverse_constructProperty_convergence_tolerance(self, initValue)

    def get_convergence_tolerance(self, *args):
        r"""
        get_convergence_tolerance(MocoInverse self, int i) -> double const

        Parameters
        ----------
        i: int

        get_convergence_tolerance(MocoInverse self) -> double const &
        """
        return _moco.MocoInverse_get_convergence_tolerance(self, *args)

    def upd_convergence_tolerance(self, *args):
        r"""
        upd_convergence_tolerance(MocoInverse self, int i) -> double

        Parameters
        ----------
        i: int

        upd_convergence_tolerance(MocoInverse self) -> double &
        """
        return _moco.MocoInverse_upd_convergence_tolerance(self, *args)

    def set_convergence_tolerance(self, *args):
        r"""
        set_convergence_tolerance(MocoInverse self, int i, double const & value)

        Parameters
        ----------
        i: int
        value: double const &

        set_convergence_tolerance(MocoInverse self, double const & value)

        Parameters
        ----------
        value: double const &

        """
        return _moco.MocoInverse_set_convergence_tolerance(self, *args)

    def copyProperty_constraint_tolerance(self, source):
        r"""
        copyProperty_constraint_tolerance(MocoInverse self, MocoInverse source)

        Parameters
        ----------
        source: OpenSim::MocoInverse::Self const &

        """
        return _moco.MocoInverse_copyProperty_constraint_tolerance(self, source)

    def append_constraint_tolerance(self, value):
        r"""
        append_constraint_tolerance(MocoInverse self, double const & value) -> int

        Parameters
        ----------
        value: double const &

        """
        return _moco.MocoInverse_append_constraint_tolerance(self, value)

    def constructProperty_constraint_tolerance(self, initValue):
        r"""
        constructProperty_constraint_tolerance(MocoInverse self, double const & initValue)

        Parameters
        ----------
        initValue: double const &

        """
        return _moco.MocoInverse_constructProperty_constraint_tolerance(self, initValue)

    def get_constraint_tolerance(self, *args):
        r"""
        get_constraint_tolerance(MocoInverse self, int i) -> double const

        Parameters
        ----------
        i: int

        get_constraint_tolerance(MocoInverse self) -> double const &
        """
        return _moco.MocoInverse_get_constraint_tolerance(self, *args)

    def upd_constraint_tolerance(self, *args):
        r"""
        upd_constraint_tolerance(MocoInverse self, int i) -> double

        Parameters
        ----------
        i: int

        upd_constraint_tolerance(MocoInverse self) -> double &
        """
        return _moco.MocoInverse_upd_constraint_tolerance(self, *args)

    def set_constraint_tolerance(self, *args):
        r"""
        set_constraint_tolerance(MocoInverse self, int i, double const & value)

        Parameters
        ----------
        i: int
        value: double const &

        set_constraint_tolerance(MocoInverse self, double const & value)

        Parameters
        ----------
        value: double const &

        """
        return _moco.MocoInverse_set_constraint_tolerance(self, *args)

    def copyProperty_output_paths(self, source):
        r"""
        copyProperty_output_paths(MocoInverse self, MocoInverse source)

        Parameters
        ----------
        source: OpenSim::MocoInverse::Self const &

        """
        return _moco.MocoInverse_copyProperty_output_paths(self, source)

    def get_output_paths(self, i):
        r"""
        get_output_paths(MocoInverse self, int i) -> std::string const &

        Parameters
        ----------
        i: int

        """
        return _moco.MocoInverse_get_output_paths(self, i)

    def upd_output_paths(self, i):
        r"""
        upd_output_paths(MocoInverse self, int i) -> std::string &

        Parameters
        ----------
        i: int

        """
        return _moco.MocoInverse_upd_output_paths(self, i)

    def set_output_paths(self, i, value):
        r"""
        set_output_paths(MocoInverse self, int i, std::string const & value)

        Parameters
        ----------
        i: int
        value: std::string const &

        """
        return _moco.MocoInverse_set_output_paths(self, i, value)

    def append_output_paths(self, value):
        r"""
        append_output_paths(MocoInverse self, std::string const & value) -> int

        Parameters
        ----------
        value: std::string const &

        """
        return _moco.MocoInverse_append_output_paths(self, value)

    def constructProperty_output_paths(self):
        r"""constructProperty_output_paths(MocoInverse self)"""
        return _moco.MocoInverse_constructProperty_output_paths(self)

    def copyProperty_reserves_weight(self, source):
        r"""
        copyProperty_reserves_weight(MocoInverse self, MocoInverse source)

        Parameters
        ----------
        source: OpenSim::MocoInverse::Self const &

        """
        return _moco.MocoInverse_copyProperty_reserves_weight(self, source)

    def append_reserves_weight(self, value):
        r"""
        append_reserves_weight(MocoInverse self, double const & value) -> int

        Parameters
        ----------
        value: double const &

        """
        return _moco.MocoInverse_append_reserves_weight(self, value)

    def constructProperty_reserves_weight(self, initValue):
        r"""
        constructProperty_reserves_weight(MocoInverse self, double const & initValue)

        Parameters
        ----------
        initValue: double const &

        """
        return _moco.MocoInverse_constructProperty_reserves_weight(self, initValue)

    def get_reserves_weight(self, *args):
        r"""
        get_reserves_weight(MocoInverse self, int i) -> double const

        Parameters
        ----------
        i: int

        get_reserves_weight(MocoInverse self) -> double const &
        """
        return _moco.MocoInverse_get_reserves_weight(self, *args)

    def upd_reserves_weight(self, *args):
        r"""
        upd_reserves_weight(MocoInverse self, int i) -> double

        Parameters
        ----------
        i: int

        upd_reserves_weight(MocoInverse self) -> double &
        """
        return _moco.MocoInverse_upd_reserves_weight(self, *args)

    def set_reserves_weight(self, *args):
        r"""
        set_reserves_weight(MocoInverse self, int i, double const & value)

        Parameters
        ----------
        i: int
        value: double const &

        set_reserves_weight(MocoInverse self, double const & value)

        Parameters
        ----------
        value: double const &

        """
        return _moco.MocoInverse_set_reserves_weight(self, *args)

    def __init__(self):
        r"""__init__(MocoInverse self) -> MocoInverse"""
        _moco.MocoInverse_swiginit(self, _moco.new_MocoInverse())

    def setKinematics(self, kinematics):
        r"""
        setKinematics(MocoInverse self, TableProcessor kinematics)

        Parameters
        ----------
        kinematics: OpenSim::TableProcessor

        """
        return _moco.MocoInverse_setKinematics(self, kinematics)

    def initialize(self):
        r"""initialize(MocoInverse self) -> MocoStudy"""
        return _moco.MocoInverse_initialize(self)

    def solve(self):
        r"""solve(MocoInverse self) -> MocoInverseSolution"""
        return _moco.MocoInverse_solve(self)
    __swig_destroy__ = _moco.delete_MocoInverse

# Register MocoInverse in _moco:
_moco.MocoInverse_swigregister(MocoInverse)

def MocoInverse_safeDownCast(obj):
    r"""
    MocoInverse_safeDownCast(OpenSimObject obj) -> MocoInverse

    Parameters
    ----------
    obj: OpenSim::Object *

    """
    return _moco.MocoInverse_safeDownCast(obj)

def MocoInverse_getClassName():
    r"""MocoInverse_getClassName() -> std::string const &"""
    return _moco.MocoInverse_getClassName()

class MocoTrack(MocoTool):
    r"""Proxy of C++ OpenSim::MocoTrack class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def safeDownCast(obj):
        r"""
        safeDownCast(OpenSimObject obj) -> MocoTrack

        Parameters
        ----------
        obj: OpenSim::Object *

        """
        return _moco.MocoTrack_safeDownCast(obj)

    def assign(self, aObject):
        r"""
        assign(MocoTrack self, OpenSimObject aObject)

        Parameters
        ----------
        aObject: OpenSim::Object &

        """
        return _moco.MocoTrack_assign(self, aObject)

    @staticmethod
    def getClassName():
        r"""getClassName() -> std::string const &"""
        return _moco.MocoTrack_getClassName()

    def clone(self):
        r"""clone(MocoTrack self) -> MocoTrack"""
        return _moco.MocoTrack_clone(self)

    def getConcreteClassName(self):
        r"""getConcreteClassName(MocoTrack self) -> std::string const &"""
        return _moco.MocoTrack_getConcreteClassName(self)

    def copyProperty_states_reference(self, source):
        r"""
        copyProperty_states_reference(MocoTrack self, MocoTrack source)

        Parameters
        ----------
        source: OpenSim::MocoTrack::Self const &

        """
        return _moco.MocoTrack_copyProperty_states_reference(self, source)

    def append_states_reference(self, value):
        r"""
        append_states_reference(MocoTrack self, TableProcessor value) -> int

        Parameters
        ----------
        value: OpenSim::TableProcessor const &

        """
        return _moco.MocoTrack_append_states_reference(self, value)

    def constructProperty_states_reference(self, initValue):
        r"""
        constructProperty_states_reference(MocoTrack self, TableProcessor initValue)

        Parameters
        ----------
        initValue: OpenSim::TableProcessor const &

        """
        return _moco.MocoTrack_constructProperty_states_reference(self, initValue)

    def get_states_reference(self, *args):
        r"""
        get_states_reference(MocoTrack self, int i) -> TableProcessor

        Parameters
        ----------
        i: int

        get_states_reference(MocoTrack self) -> TableProcessor
        """
        return _moco.MocoTrack_get_states_reference(self, *args)

    def upd_states_reference(self, *args):
        r"""
        upd_states_reference(MocoTrack self, int i) -> TableProcessor

        Parameters
        ----------
        i: int

        upd_states_reference(MocoTrack self) -> TableProcessor
        """
        return _moco.MocoTrack_upd_states_reference(self, *args)

    def set_states_reference(self, *args):
        r"""
        set_states_reference(MocoTrack self, int i, TableProcessor value)

        Parameters
        ----------
        i: int
        value: OpenSim::TableProcessor const &

        set_states_reference(MocoTrack self, TableProcessor value)

        Parameters
        ----------
        value: OpenSim::TableProcessor const &

        """
        return _moco.MocoTrack_set_states_reference(self, *args)

    def copyProperty_states_global_tracking_weight(self, source):
        r"""
        copyProperty_states_global_tracking_weight(MocoTrack self, MocoTrack source)

        Parameters
        ----------
        source: OpenSim::MocoTrack::Self const &

        """
        return _moco.MocoTrack_copyProperty_states_global_tracking_weight(self, source)

    def append_states_global_tracking_weight(self, value):
        r"""
        append_states_global_tracking_weight(MocoTrack self, double const & value) -> int

        Parameters
        ----------
        value: double const &

        """
        return _moco.MocoTrack_append_states_global_tracking_weight(self, value)

    def constructProperty_states_global_tracking_weight(self, initValue):
        r"""
        constructProperty_states_global_tracking_weight(MocoTrack self, double const & initValue)

        Parameters
        ----------
        initValue: double const &

        """
        return _moco.MocoTrack_constructProperty_states_global_tracking_weight(self, initValue)

    def get_states_global_tracking_weight(self, *args):
        r"""
        get_states_global_tracking_weight(MocoTrack self, int i) -> double const

        Parameters
        ----------
        i: int

        get_states_global_tracking_weight(MocoTrack self) -> double const &
        """
        return _moco.MocoTrack_get_states_global_tracking_weight(self, *args)

    def upd_states_global_tracking_weight(self, *args):
        r"""
        upd_states_global_tracking_weight(MocoTrack self, int i) -> double

        Parameters
        ----------
        i: int

        upd_states_global_tracking_weight(MocoTrack self) -> double &
        """
        return _moco.MocoTrack_upd_states_global_tracking_weight(self, *args)

    def set_states_global_tracking_weight(self, *args):
        r"""
        set_states_global_tracking_weight(MocoTrack self, int i, double const & value)

        Parameters
        ----------
        i: int
        value: double const &

        set_states_global_tracking_weight(MocoTrack self, double const & value)

        Parameters
        ----------
        value: double const &

        """
        return _moco.MocoTrack_set_states_global_tracking_weight(self, *args)

    def copyProperty_states_weight_set(self, source):
        r"""
        copyProperty_states_weight_set(MocoTrack self, MocoTrack source)

        Parameters
        ----------
        source: OpenSim::MocoTrack::Self const &

        """
        return _moco.MocoTrack_copyProperty_states_weight_set(self, source)

    def append_states_weight_set(self, value):
        r"""
        append_states_weight_set(MocoTrack self, MocoWeightSet value) -> int

        Parameters
        ----------
        value: OpenSim::MocoWeightSet const &

        """
        return _moco.MocoTrack_append_states_weight_set(self, value)

    def constructProperty_states_weight_set(self, initValue):
        r"""
        constructProperty_states_weight_set(MocoTrack self, MocoWeightSet initValue)

        Parameters
        ----------
        initValue: OpenSim::MocoWeightSet const &

        """
        return _moco.MocoTrack_constructProperty_states_weight_set(self, initValue)

    def get_states_weight_set(self, *args):
        r"""
        get_states_weight_set(MocoTrack self, int i) -> MocoWeightSet

        Parameters
        ----------
        i: int

        get_states_weight_set(MocoTrack self) -> MocoWeightSet
        """
        return _moco.MocoTrack_get_states_weight_set(self, *args)

    def upd_states_weight_set(self, *args):
        r"""
        upd_states_weight_set(MocoTrack self, int i) -> MocoWeightSet

        Parameters
        ----------
        i: int

        upd_states_weight_set(MocoTrack self) -> MocoWeightSet
        """
        return _moco.MocoTrack_upd_states_weight_set(self, *args)

    def set_states_weight_set(self, *args):
        r"""
        set_states_weight_set(MocoTrack self, int i, MocoWeightSet value)

        Parameters
        ----------
        i: int
        value: OpenSim::MocoWeightSet const &

        set_states_weight_set(MocoTrack self, MocoWeightSet value)

        Parameters
        ----------
        value: OpenSim::MocoWeightSet const &

        """
        return _moco.MocoTrack_set_states_weight_set(self, *args)

    def copyProperty_scale_state_weights_with_range(self, source):
        r"""
        copyProperty_scale_state_weights_with_range(MocoTrack self, MocoTrack source)

        Parameters
        ----------
        source: OpenSim::MocoTrack::Self const &

        """
        return _moco.MocoTrack_copyProperty_scale_state_weights_with_range(self, source)

    def append_scale_state_weights_with_range(self, value):
        r"""
        append_scale_state_weights_with_range(MocoTrack self, bool const & value) -> int

        Parameters
        ----------
        value: bool const &

        """
        return _moco.MocoTrack_append_scale_state_weights_with_range(self, value)

    def constructProperty_scale_state_weights_with_range(self, initValue):
        r"""
        constructProperty_scale_state_weights_with_range(MocoTrack self, bool const & initValue)

        Parameters
        ----------
        initValue: bool const &

        """
        return _moco.MocoTrack_constructProperty_scale_state_weights_with_range(self, initValue)

    def get_scale_state_weights_with_range(self, *args):
        r"""
        get_scale_state_weights_with_range(MocoTrack self, int i) -> bool const

        Parameters
        ----------
        i: int

        get_scale_state_weights_with_range(MocoTrack self) -> bool const &
        """
        return _moco.MocoTrack_get_scale_state_weights_with_range(self, *args)

    def upd_scale_state_weights_with_range(self, *args):
        r"""
        upd_scale_state_weights_with_range(MocoTrack self, int i) -> bool

        Parameters
        ----------
        i: int

        upd_scale_state_weights_with_range(MocoTrack self) -> bool &
        """
        return _moco.MocoTrack_upd_scale_state_weights_with_range(self, *args)

    def set_scale_state_weights_with_range(self, *args):
        r"""
        set_scale_state_weights_with_range(MocoTrack self, int i, bool const & value)

        Parameters
        ----------
        i: int
        value: bool const &

        set_scale_state_weights_with_range(MocoTrack self, bool const & value)

        Parameters
        ----------
        value: bool const &

        """
        return _moco.MocoTrack_set_scale_state_weights_with_range(self, *args)

    def copyProperty_track_reference_position_derivatives(self, source):
        r"""
        copyProperty_track_reference_position_derivatives(MocoTrack self, MocoTrack source)

        Parameters
        ----------
        source: OpenSim::MocoTrack::Self const &

        """
        return _moco.MocoTrack_copyProperty_track_reference_position_derivatives(self, source)

    def append_track_reference_position_derivatives(self, value):
        r"""
        append_track_reference_position_derivatives(MocoTrack self, bool const & value) -> int

        Parameters
        ----------
        value: bool const &

        """
        return _moco.MocoTrack_append_track_reference_position_derivatives(self, value)

    def constructProperty_track_reference_position_derivatives(self, initValue):
        r"""
        constructProperty_track_reference_position_derivatives(MocoTrack self, bool const & initValue)

        Parameters
        ----------
        initValue: bool const &

        """
        return _moco.MocoTrack_constructProperty_track_reference_position_derivatives(self, initValue)

    def get_track_reference_position_derivatives(self, *args):
        r"""
        get_track_reference_position_derivatives(MocoTrack self, int i) -> bool const

        Parameters
        ----------
        i: int

        get_track_reference_position_derivatives(MocoTrack self) -> bool const &
        """
        return _moco.MocoTrack_get_track_reference_position_derivatives(self, *args)

    def upd_track_reference_position_derivatives(self, *args):
        r"""
        upd_track_reference_position_derivatives(MocoTrack self, int i) -> bool

        Parameters
        ----------
        i: int

        upd_track_reference_position_derivatives(MocoTrack self) -> bool &
        """
        return _moco.MocoTrack_upd_track_reference_position_derivatives(self, *args)

    def set_track_reference_position_derivatives(self, *args):
        r"""
        set_track_reference_position_derivatives(MocoTrack self, int i, bool const & value)

        Parameters
        ----------
        i: int
        value: bool const &

        set_track_reference_position_derivatives(MocoTrack self, bool const & value)

        Parameters
        ----------
        value: bool const &

        """
        return _moco.MocoTrack_set_track_reference_position_derivatives(self, *args)

    def copyProperty_markers_reference(self, source):
        r"""
        copyProperty_markers_reference(MocoTrack self, MocoTrack source)

        Parameters
        ----------
        source: OpenSim::MocoTrack::Self const &

        """
        return _moco.MocoTrack_copyProperty_markers_reference(self, source)

    def append_markers_reference(self, value):
        r"""
        append_markers_reference(MocoTrack self, TableProcessor value) -> int

        Parameters
        ----------
        value: OpenSim::TableProcessor const &

        """
        return _moco.MocoTrack_append_markers_reference(self, value)

    def constructProperty_markers_reference(self, initValue):
        r"""
        constructProperty_markers_reference(MocoTrack self, TableProcessor initValue)

        Parameters
        ----------
        initValue: OpenSim::TableProcessor const &

        """
        return _moco.MocoTrack_constructProperty_markers_reference(self, initValue)

    def get_markers_reference(self, *args):
        r"""
        get_markers_reference(MocoTrack self, int i) -> TableProcessor

        Parameters
        ----------
        i: int

        get_markers_reference(MocoTrack self) -> TableProcessor
        """
        return _moco.MocoTrack_get_markers_reference(self, *args)

    def upd_markers_reference(self, *args):
        r"""
        upd_markers_reference(MocoTrack self, int i) -> TableProcessor

        Parameters
        ----------
        i: int

        upd_markers_reference(MocoTrack self) -> TableProcessor
        """
        return _moco.MocoTrack_upd_markers_reference(self, *args)

    def set_markers_reference(self, *args):
        r"""
        set_markers_reference(MocoTrack self, int i, TableProcessor value)

        Parameters
        ----------
        i: int
        value: OpenSim::TableProcessor const &

        set_markers_reference(MocoTrack self, TableProcessor value)

        Parameters
        ----------
        value: OpenSim::TableProcessor const &

        """
        return _moco.MocoTrack_set_markers_reference(self, *args)

    def copyProperty_markers_global_tracking_weight(self, source):
        r"""
        copyProperty_markers_global_tracking_weight(MocoTrack self, MocoTrack source)

        Parameters
        ----------
        source: OpenSim::MocoTrack::Self const &

        """
        return _moco.MocoTrack_copyProperty_markers_global_tracking_weight(self, source)

    def append_markers_global_tracking_weight(self, value):
        r"""
        append_markers_global_tracking_weight(MocoTrack self, double const & value) -> int

        Parameters
        ----------
        value: double const &

        """
        return _moco.MocoTrack_append_markers_global_tracking_weight(self, value)

    def constructProperty_markers_global_tracking_weight(self, initValue):
        r"""
        constructProperty_markers_global_tracking_weight(MocoTrack self, double const & initValue)

        Parameters
        ----------
        initValue: double const &

        """
        return _moco.MocoTrack_constructProperty_markers_global_tracking_weight(self, initValue)

    def get_markers_global_tracking_weight(self, *args):
        r"""
        get_markers_global_tracking_weight(MocoTrack self, int i) -> double const

        Parameters
        ----------
        i: int

        get_markers_global_tracking_weight(MocoTrack self) -> double const &
        """
        return _moco.MocoTrack_get_markers_global_tracking_weight(self, *args)

    def upd_markers_global_tracking_weight(self, *args):
        r"""
        upd_markers_global_tracking_weight(MocoTrack self, int i) -> double

        Parameters
        ----------
        i: int

        upd_markers_global_tracking_weight(MocoTrack self) -> double &
        """
        return _moco.MocoTrack_upd_markers_global_tracking_weight(self, *args)

    def set_markers_global_tracking_weight(self, *args):
        r"""
        set_markers_global_tracking_weight(MocoTrack self, int i, double const & value)

        Parameters
        ----------
        i: int
        value: double const &

        set_markers_global_tracking_weight(MocoTrack self, double const & value)

        Parameters
        ----------
        value: double const &

        """
        return _moco.MocoTrack_set_markers_global_tracking_weight(self, *args)

    def copyProperty_markers_weight_set(self, source):
        r"""
        copyProperty_markers_weight_set(MocoTrack self, MocoTrack source)

        Parameters
        ----------
        source: OpenSim::MocoTrack::Self const &

        """
        return _moco.MocoTrack_copyProperty_markers_weight_set(self, source)

    def append_markers_weight_set(self, value):
        r"""
        append_markers_weight_set(MocoTrack self, MocoWeightSet value) -> int

        Parameters
        ----------
        value: OpenSim::MocoWeightSet const &

        """
        return _moco.MocoTrack_append_markers_weight_set(self, value)

    def constructProperty_markers_weight_set(self, initValue):
        r"""
        constructProperty_markers_weight_set(MocoTrack self, MocoWeightSet initValue)

        Parameters
        ----------
        initValue: OpenSim::MocoWeightSet const &

        """
        return _moco.MocoTrack_constructProperty_markers_weight_set(self, initValue)

    def get_markers_weight_set(self, *args):
        r"""
        get_markers_weight_set(MocoTrack self, int i) -> MocoWeightSet

        Parameters
        ----------
        i: int

        get_markers_weight_set(MocoTrack self) -> MocoWeightSet
        """
        return _moco.MocoTrack_get_markers_weight_set(self, *args)

    def upd_markers_weight_set(self, *args):
        r"""
        upd_markers_weight_set(MocoTrack self, int i) -> MocoWeightSet

        Parameters
        ----------
        i: int

        upd_markers_weight_set(MocoTrack self) -> MocoWeightSet
        """
        return _moco.MocoTrack_upd_markers_weight_set(self, *args)

    def set_markers_weight_set(self, *args):
        r"""
        set_markers_weight_set(MocoTrack self, int i, MocoWeightSet value)

        Parameters
        ----------
        i: int
        value: OpenSim::MocoWeightSet const &

        set_markers_weight_set(MocoTrack self, MocoWeightSet value)

        Parameters
        ----------
        value: OpenSim::MocoWeightSet const &

        """
        return _moco.MocoTrack_set_markers_weight_set(self, *args)

    def copyProperty_allow_unused_references(self, source):
        r"""
        copyProperty_allow_unused_references(MocoTrack self, MocoTrack source)

        Parameters
        ----------
        source: OpenSim::MocoTrack::Self const &

        """
        return _moco.MocoTrack_copyProperty_allow_unused_references(self, source)

    def append_allow_unused_references(self, value):
        r"""
        append_allow_unused_references(MocoTrack self, bool const & value) -> int

        Parameters
        ----------
        value: bool const &

        """
        return _moco.MocoTrack_append_allow_unused_references(self, value)

    def constructProperty_allow_unused_references(self, initValue):
        r"""
        constructProperty_allow_unused_references(MocoTrack self, bool const & initValue)

        Parameters
        ----------
        initValue: bool const &

        """
        return _moco.MocoTrack_constructProperty_allow_unused_references(self, initValue)

    def get_allow_unused_references(self, *args):
        r"""
        get_allow_unused_references(MocoTrack self, int i) -> bool const

        Parameters
        ----------
        i: int

        get_allow_unused_references(MocoTrack self) -> bool const &
        """
        return _moco.MocoTrack_get_allow_unused_references(self, *args)

    def upd_allow_unused_references(self, *args):
        r"""
        upd_allow_unused_references(MocoTrack self, int i) -> bool

        Parameters
        ----------
        i: int

        upd_allow_unused_references(MocoTrack self) -> bool &
        """
        return _moco.MocoTrack_upd_allow_unused_references(self, *args)

    def set_allow_unused_references(self, *args):
        r"""
        set_allow_unused_references(MocoTrack self, int i, bool const & value)

        Parameters
        ----------
        i: int
        value: bool const &

        set_allow_unused_references(MocoTrack self, bool const & value)

        Parameters
        ----------
        value: bool const &

        """
        return _moco.MocoTrack_set_allow_unused_references(self, *args)

    def copyProperty_guess_file(self, source):
        r"""
        copyProperty_guess_file(MocoTrack self, MocoTrack source)

        Parameters
        ----------
        source: OpenSim::MocoTrack::Self const &

        """
        return _moco.MocoTrack_copyProperty_guess_file(self, source)

    def append_guess_file(self, value):
        r"""
        append_guess_file(MocoTrack self, std::string const & value) -> int

        Parameters
        ----------
        value: std::string const &

        """
        return _moco.MocoTrack_append_guess_file(self, value)

    def constructProperty_guess_file(self, initValue):
        r"""
        constructProperty_guess_file(MocoTrack self, std::string const & initValue)

        Parameters
        ----------
        initValue: std::string const &

        """
        return _moco.MocoTrack_constructProperty_guess_file(self, initValue)

    def get_guess_file(self, *args):
        r"""
        get_guess_file(MocoTrack self, int i) -> std::string const

        Parameters
        ----------
        i: int

        get_guess_file(MocoTrack self) -> std::string const &
        """
        return _moco.MocoTrack_get_guess_file(self, *args)

    def upd_guess_file(self, *args):
        r"""
        upd_guess_file(MocoTrack self, int i) -> std::string

        Parameters
        ----------
        i: int

        upd_guess_file(MocoTrack self) -> std::string &
        """
        return _moco.MocoTrack_upd_guess_file(self, *args)

    def set_guess_file(self, *args):
        r"""
        set_guess_file(MocoTrack self, int i, std::string const & value)

        Parameters
        ----------
        i: int
        value: std::string const &

        set_guess_file(MocoTrack self, std::string const & value)

        Parameters
        ----------
        value: std::string const &

        """
        return _moco.MocoTrack_set_guess_file(self, *args)

    def copyProperty_apply_tracked_states_to_guess(self, source):
        r"""
        copyProperty_apply_tracked_states_to_guess(MocoTrack self, MocoTrack source)

        Parameters
        ----------
        source: OpenSim::MocoTrack::Self const &

        """
        return _moco.MocoTrack_copyProperty_apply_tracked_states_to_guess(self, source)

    def append_apply_tracked_states_to_guess(self, value):
        r"""
        append_apply_tracked_states_to_guess(MocoTrack self, bool const & value) -> int

        Parameters
        ----------
        value: bool const &

        """
        return _moco.MocoTrack_append_apply_tracked_states_to_guess(self, value)

    def constructProperty_apply_tracked_states_to_guess(self, initValue):
        r"""
        constructProperty_apply_tracked_states_to_guess(MocoTrack self, bool const & initValue)

        Parameters
        ----------
        initValue: bool const &

        """
        return _moco.MocoTrack_constructProperty_apply_tracked_states_to_guess(self, initValue)

    def get_apply_tracked_states_to_guess(self, *args):
        r"""
        get_apply_tracked_states_to_guess(MocoTrack self, int i) -> bool const

        Parameters
        ----------
        i: int

        get_apply_tracked_states_to_guess(MocoTrack self) -> bool const &
        """
        return _moco.MocoTrack_get_apply_tracked_states_to_guess(self, *args)

    def upd_apply_tracked_states_to_guess(self, *args):
        r"""
        upd_apply_tracked_states_to_guess(MocoTrack self, int i) -> bool

        Parameters
        ----------
        i: int

        upd_apply_tracked_states_to_guess(MocoTrack self) -> bool &
        """
        return _moco.MocoTrack_upd_apply_tracked_states_to_guess(self, *args)

    def set_apply_tracked_states_to_guess(self, *args):
        r"""
        set_apply_tracked_states_to_guess(MocoTrack self, int i, bool const & value)

        Parameters
        ----------
        i: int
        value: bool const &

        set_apply_tracked_states_to_guess(MocoTrack self, bool const & value)

        Parameters
        ----------
        value: bool const &

        """
        return _moco.MocoTrack_set_apply_tracked_states_to_guess(self, *args)

    def copyProperty_minimize_control_effort(self, source):
        r"""
        copyProperty_minimize_control_effort(MocoTrack self, MocoTrack source)

        Parameters
        ----------
        source: OpenSim::MocoTrack::Self const &

        """
        return _moco.MocoTrack_copyProperty_minimize_control_effort(self, source)

    def append_minimize_control_effort(self, value):
        r"""
        append_minimize_control_effort(MocoTrack self, bool const & value) -> int

        Parameters
        ----------
        value: bool const &

        """
        return _moco.MocoTrack_append_minimize_control_effort(self, value)

    def constructProperty_minimize_control_effort(self, initValue):
        r"""
        constructProperty_minimize_control_effort(MocoTrack self, bool const & initValue)

        Parameters
        ----------
        initValue: bool const &

        """
        return _moco.MocoTrack_constructProperty_minimize_control_effort(self, initValue)

    def get_minimize_control_effort(self, *args):
        r"""
        get_minimize_control_effort(MocoTrack self, int i) -> bool const

        Parameters
        ----------
        i: int

        get_minimize_control_effort(MocoTrack self) -> bool const &
        """
        return _moco.MocoTrack_get_minimize_control_effort(self, *args)

    def upd_minimize_control_effort(self, *args):
        r"""
        upd_minimize_control_effort(MocoTrack self, int i) -> bool

        Parameters
        ----------
        i: int

        upd_minimize_control_effort(MocoTrack self) -> bool &
        """
        return _moco.MocoTrack_upd_minimize_control_effort(self, *args)

    def set_minimize_control_effort(self, *args):
        r"""
        set_minimize_control_effort(MocoTrack self, int i, bool const & value)

        Parameters
        ----------
        i: int
        value: bool const &

        set_minimize_control_effort(MocoTrack self, bool const & value)

        Parameters
        ----------
        value: bool const &

        """
        return _moco.MocoTrack_set_minimize_control_effort(self, *args)

    def copyProperty_control_effort_weight(self, source):
        r"""
        copyProperty_control_effort_weight(MocoTrack self, MocoTrack source)

        Parameters
        ----------
        source: OpenSim::MocoTrack::Self const &

        """
        return _moco.MocoTrack_copyProperty_control_effort_weight(self, source)

    def append_control_effort_weight(self, value):
        r"""
        append_control_effort_weight(MocoTrack self, double const & value) -> int

        Parameters
        ----------
        value: double const &

        """
        return _moco.MocoTrack_append_control_effort_weight(self, value)

    def constructProperty_control_effort_weight(self, initValue):
        r"""
        constructProperty_control_effort_weight(MocoTrack self, double const & initValue)

        Parameters
        ----------
        initValue: double const &

        """
        return _moco.MocoTrack_constructProperty_control_effort_weight(self, initValue)

    def get_control_effort_weight(self, *args):
        r"""
        get_control_effort_weight(MocoTrack self, int i) -> double const

        Parameters
        ----------
        i: int

        get_control_effort_weight(MocoTrack self) -> double const &
        """
        return _moco.MocoTrack_get_control_effort_weight(self, *args)

    def upd_control_effort_weight(self, *args):
        r"""
        upd_control_effort_weight(MocoTrack self, int i) -> double

        Parameters
        ----------
        i: int

        upd_control_effort_weight(MocoTrack self) -> double &
        """
        return _moco.MocoTrack_upd_control_effort_weight(self, *args)

    def set_control_effort_weight(self, *args):
        r"""
        set_control_effort_weight(MocoTrack self, int i, double const & value)

        Parameters
        ----------
        i: int
        value: double const &

        set_control_effort_weight(MocoTrack self, double const & value)

        Parameters
        ----------
        value: double const &

        """
        return _moco.MocoTrack_set_control_effort_weight(self, *args)

    def __init__(self):
        r"""__init__(MocoTrack self) -> MocoTrack"""
        _moco.MocoTrack_swiginit(self, _moco.new_MocoTrack())

    def setStatesReference(self, states):
        r"""
        setStatesReference(MocoTrack self, TableProcessor states)

        Parameters
        ----------
        states: OpenSim::TableProcessor

        """
        return _moco.MocoTrack_setStatesReference(self, states)

    def setMarkersReference(self, markers):
        r"""
        setMarkersReference(MocoTrack self, TableProcessor markers)

        Parameters
        ----------
        markers: OpenSim::TableProcessor

        """
        return _moco.MocoTrack_setMarkersReference(self, markers)

    def setMarkersReferenceFromTRC(self, filename, lowpassFilterFreq=6.0):
        r"""
        setMarkersReferenceFromTRC(MocoTrack self, std::string const & filename, double lowpassFilterFreq=6.0)

        Parameters
        ----------
        filename: std::string const &
        lowpassFilterFreq: double

        """
        return _moco.MocoTrack_setMarkersReferenceFromTRC(self, filename, lowpassFilterFreq)

    def initialize(self):
        r"""initialize(MocoTrack self) -> MocoStudy"""
        return _moco.MocoTrack_initialize(self)

    def solve(self):
        r"""solve(MocoTrack self) -> MocoSolution"""
        return _moco.MocoTrack_solve(self)

    def solveAndVisualize(self):
        r"""solveAndVisualize(MocoTrack self) -> MocoSolution"""
        return _moco.MocoTrack_solveAndVisualize(self)
    __swig_destroy__ = _moco.delete_MocoTrack

# Register MocoTrack in _moco:
_moco.MocoTrack_swigregister(MocoTrack)

def MocoTrack_safeDownCast(obj):
    r"""
    MocoTrack_safeDownCast(OpenSimObject obj) -> MocoTrack

    Parameters
    ----------
    obj: OpenSim::Object *

    """
    return _moco.MocoTrack_safeDownCast(obj)

def MocoTrack_getClassName():
    r"""MocoTrack_getClassName() -> std::string const &"""
    return _moco.MocoTrack_getClassName()

class PositionMotion(opensim.simulation.ModelComponent):
    r"""Proxy of C++ OpenSim::PositionMotion class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def safeDownCast(obj):
        r"""
        safeDownCast(OpenSimObject obj) -> PositionMotion

        Parameters
        ----------
        obj: OpenSim::Object *

        """
        return _moco.PositionMotion_safeDownCast(obj)

    def assign(self, aObject):
        r"""
        assign(PositionMotion self, OpenSimObject aObject)

        Parameters
        ----------
        aObject: OpenSim::Object &

        """
        return _moco.PositionMotion_assign(self, aObject)

    @staticmethod
    def getClassName():
        r"""getClassName() -> std::string const &"""
        return _moco.PositionMotion_getClassName()

    def clone(self):
        r"""clone(PositionMotion self) -> PositionMotion"""
        return _moco.PositionMotion_clone(self)

    def getConcreteClassName(self):
        r"""getConcreteClassName(PositionMotion self) -> std::string const &"""
        return _moco.PositionMotion_getConcreteClassName(self)

    def copyProperty_default_enabled(self, source):
        r"""
        copyProperty_default_enabled(PositionMotion self, PositionMotion source)

        Parameters
        ----------
        source: OpenSim::PositionMotion::Self const &

        """
        return _moco.PositionMotion_copyProperty_default_enabled(self, source)

    def append_default_enabled(self, value):
        r"""
        append_default_enabled(PositionMotion self, bool const & value) -> int

        Parameters
        ----------
        value: bool const &

        """
        return _moco.PositionMotion_append_default_enabled(self, value)

    def constructProperty_default_enabled(self, initValue):
        r"""
        constructProperty_default_enabled(PositionMotion self, bool const & initValue)

        Parameters
        ----------
        initValue: bool const &

        """
        return _moco.PositionMotion_constructProperty_default_enabled(self, initValue)

    def get_default_enabled(self, *args):
        r"""
        get_default_enabled(PositionMotion self, int i) -> bool const

        Parameters
        ----------
        i: int

        get_default_enabled(PositionMotion self) -> bool const &
        """
        return _moco.PositionMotion_get_default_enabled(self, *args)

    def upd_default_enabled(self, *args):
        r"""
        upd_default_enabled(PositionMotion self, int i) -> bool

        Parameters
        ----------
        i: int

        upd_default_enabled(PositionMotion self) -> bool &
        """
        return _moco.PositionMotion_upd_default_enabled(self, *args)

    def set_default_enabled(self, *args):
        r"""
        set_default_enabled(PositionMotion self, int i, bool const & value)

        Parameters
        ----------
        i: int
        value: bool const &

        set_default_enabled(PositionMotion self, bool const & value)

        Parameters
        ----------
        value: bool const &

        """
        return _moco.PositionMotion_set_default_enabled(self, *args)

    def copyProperty_functions(self, source):
        r"""
        copyProperty_functions(PositionMotion self, PositionMotion source)

        Parameters
        ----------
        source: OpenSim::PositionMotion::Self const &

        """
        return _moco.PositionMotion_copyProperty_functions(self, source)

    def append_functions(self, value):
        r"""
        append_functions(PositionMotion self, FunctionSet value) -> int

        Parameters
        ----------
        value: OpenSim::FunctionSet const &

        """
        return _moco.PositionMotion_append_functions(self, value)

    def constructProperty_functions(self, initValue):
        r"""
        constructProperty_functions(PositionMotion self, FunctionSet initValue)

        Parameters
        ----------
        initValue: OpenSim::FunctionSet const &

        """
        return _moco.PositionMotion_constructProperty_functions(self, initValue)

    def get_functions(self, *args):
        r"""
        get_functions(PositionMotion self, int i) -> FunctionSet

        Parameters
        ----------
        i: int

        get_functions(PositionMotion self) -> FunctionSet
        """
        return _moco.PositionMotion_get_functions(self, *args)

    def upd_functions(self, *args):
        r"""
        upd_functions(PositionMotion self, int i) -> FunctionSet

        Parameters
        ----------
        i: int

        upd_functions(PositionMotion self) -> FunctionSet
        """
        return _moco.PositionMotion_upd_functions(self, *args)

    def set_functions(self, *args):
        r"""
        set_functions(PositionMotion self, int i, FunctionSet value)

        Parameters
        ----------
        i: int
        value: OpenSim::FunctionSet const &

        set_functions(PositionMotion self, FunctionSet value)

        Parameters
        ----------
        value: OpenSim::FunctionSet const &

        """
        return _moco.PositionMotion_set_functions(self, *args)

    def __init__(self, *args):
        r"""
        __init__(PositionMotion self) -> PositionMotion
        __init__(PositionMotion self, std::string name) -> PositionMotion

        Parameters
        ----------
        name: std::string

        """
        _moco.PositionMotion_swiginit(self, _moco.new_PositionMotion(*args))
    __swig_destroy__ = _moco.delete_PositionMotion

    def setPositionForCoordinate(self, coord, position):
        r"""
        setPositionForCoordinate(PositionMotion self, Coordinate coord, Function position)

        Parameters
        ----------
        coord: OpenSim::Coordinate const &
        position: OpenSim::Function const &

        """
        return _moco.PositionMotion_setPositionForCoordinate(self, coord, position)

    def setDefaultEnabled(self, enabled):
        r"""
        setDefaultEnabled(PositionMotion self, bool enabled)

        Parameters
        ----------
        enabled: bool

        """
        return _moco.PositionMotion_setDefaultEnabled(self, enabled)

    def getDefaultEnabled(self):
        r"""getDefaultEnabled(PositionMotion self) -> bool"""
        return _moco.PositionMotion_getDefaultEnabled(self)

    def setEnabled(self, state, enabled):
        r"""
        setEnabled(PositionMotion self, State state, bool enabled)

        Parameters
        ----------
        state: SimTK::State &
        enabled: bool

        """
        return _moco.PositionMotion_setEnabled(self, state, enabled)

    def getEnabled(self, state):
        r"""
        getEnabled(PositionMotion self, State state) -> bool

        Parameters
        ----------
        state: SimTK::State const &

        """
        return _moco.PositionMotion_getEnabled(self, state)

    @staticmethod
    def createFromTable(model, coords, allowExtraColumns=False):
        r"""
        createFromTable(Model model, TimeSeriesTable coords, bool allowExtraColumns=False) -> std::unique_ptr< OpenSim::PositionMotion >

        Parameters
        ----------
        model: OpenSim::Model const &
        coords: OpenSim::TimeSeriesTable const &
        allowExtraColumns: bool

        """
        return _moco.PositionMotion_createFromTable(model, coords, allowExtraColumns)

    @staticmethod
    def createFromStatesTrajectory(model, statesTraj):
        r"""
        createFromStatesTrajectory(Model model, StatesTrajectory statesTraj) -> std::unique_ptr< OpenSim::PositionMotion >

        Parameters
        ----------
        model: OpenSim::Model const &
        statesTraj: OpenSim::StatesTrajectory const &

        """
        return _moco.PositionMotion_createFromStatesTrajectory(model, statesTraj)

    def exportToTable(self, time):
        r"""
        exportToTable(PositionMotion self, StdVectorDouble time) -> TimeSeriesTable

        Parameters
        ----------
        time: std::vector< double,std::allocator< double > > const &

        """
        return _moco.PositionMotion_exportToTable(self, time)

# Register PositionMotion in _moco:
_moco.PositionMotion_swigregister(PositionMotion)

def PositionMotion_safeDownCast(obj):
    r"""
    PositionMotion_safeDownCast(OpenSimObject obj) -> PositionMotion

    Parameters
    ----------
    obj: OpenSim::Object *

    """
    return _moco.PositionMotion_safeDownCast(obj)

def PositionMotion_getClassName():
    r"""PositionMotion_getClassName() -> std::string const &"""
    return _moco.PositionMotion_getClassName()

def PositionMotion_createFromTable(model, coords, allowExtraColumns=False):
    r"""
    PositionMotion_createFromTable(Model model, TimeSeriesTable coords, bool allowExtraColumns=False) -> std::unique_ptr< OpenSim::PositionMotion >

    Parameters
    ----------
    model: OpenSim::Model const &
    coords: OpenSim::TimeSeriesTable const &
    allowExtraColumns: bool

    """
    return _moco.PositionMotion_createFromTable(model, coords, allowExtraColumns)

def PositionMotion_createFromStatesTrajectory(model, statesTraj):
    r"""
    PositionMotion_createFromStatesTrajectory(Model model, StatesTrajectory statesTraj) -> std::unique_ptr< OpenSim::PositionMotion >

    Parameters
    ----------
    model: OpenSim::Model const &
    statesTraj: OpenSim::StatesTrajectory const &

    """
    return _moco.PositionMotion_createFromStatesTrajectory(model, statesTraj)


def prescribeControlsToModel(*args):
    r"""
    prescribeControlsToModel(MocoTrajectory trajectory, Model model, std::string functionType="GCVSpline")

    Parameters
    ----------
    trajectory: OpenSim::MocoTrajectory const &
    model: OpenSim::Model &
    functionType: std::string

    """
    return _moco.prescribeControlsToModel(*args)

def simulateTrajectoryWithTimeStepping(*args):
    r"""
    simulateTrajectoryWithTimeStepping(MocoTrajectory trajectory, Model model, double integratorAccuracy=SimTK::NaN) -> MocoTrajectory

    Parameters
    ----------
    trajectory: OpenSim::MocoTrajectory const &
    model: OpenSim::Model
    integratorAccuracy: double

    """
    return _moco.simulateTrajectoryWithTimeStepping(*args)

def createPeriodicTrajectory(*args):
    r"""
    createPeriodicTrajectory(MocoTrajectory halfPeriodTrajectory, StdVectorString addPatterns={".*pelvis_tx/value"}, StdVectorString negatePatterns={
                                                ".*pelvis_list(?!/value).*",
                                                ".*pelvis_rotation.*",
                                                ".*pelvis_tz(?!/value).*",
                                                ".*lumbar_bending(?!/value).*",
                                                ".*lumbar_rotation.*"}, StdVectorString negateAndShiftPatterns={
                                                       ".*pelvis_list/value",
                                                       ".*pelvis_tz/value",
                                                       ".*lumbar_bending/value"}, std::vector< std::pair< std::string,std::string >,std::allocator< std::pair< std::string,std::string > > > symmetryPatterns={{R"(_r(\/|_|$))", "_l$1"}, {R"(_l(\/|_|$))", "_r$1"}}) -> MocoTrajectory

    Parameters
    ----------
    halfPeriodTrajectory: OpenSim::MocoTrajectory const &
    addPatterns: std::vector< std::string,std::allocator< std::string > >
    negatePatterns: std::vector< std::string,std::allocator< std::string > >
    negateAndShiftPatterns: std::vector< std::string,std::allocator< std::string > >
    symmetryPatterns: std::vector< std::pair< std::string,std::string >,std::allocator< std::pair< std::string,std::string > > >

    """
    return _moco.createPeriodicTrajectory(*args)

def getMocoParallelEnvironmentVariable():
    r"""getMocoParallelEnvironmentVariable() -> int"""
    return _moco.getMocoParallelEnvironmentVariable()
class FileDeletionThrowerException(opensim.common.OpenSimException):
    r"""Proxy of C++ OpenSim::FileDeletionThrowerException class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, file, line, func, deletedFile):
        r"""
        __init__(FileDeletionThrowerException self, std::string const & file, size_t line, std::string const & func, std::string const & deletedFile) -> FileDeletionThrowerException

        Parameters
        ----------
        file: std::string const &
        line: size_t
        func: std::string const &
        deletedFile: std::string const &

        """
        _moco.FileDeletionThrowerException_swiginit(self, _moco.new_FileDeletionThrowerException(file, line, func, deletedFile))
    __swig_destroy__ = _moco.delete_FileDeletionThrowerException

# Register FileDeletionThrowerException in _moco:
_moco.FileDeletionThrowerException_swigregister(FileDeletionThrowerException)

class FileDeletionThrower(object):
    r"""Proxy of C++ OpenSim::FileDeletionThrower class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(FileDeletionThrower self) -> FileDeletionThrower
        __init__(FileDeletionThrower self, std::string filepath) -> FileDeletionThrower

        Parameters
        ----------
        filepath: std::string

        """
        _moco.FileDeletionThrower_swiginit(self, _moco.new_FileDeletionThrower(*args))
    __swig_destroy__ = _moco.delete_FileDeletionThrower

    def throwIfDeleted(self):
        r"""throwIfDeleted(FileDeletionThrower self)"""
        return _moco.FileDeletionThrower_throwIfDeleted(self)

# Register FileDeletionThrower in _moco:
_moco.FileDeletionThrower_swigregister(FileDeletionThrower)


def createExternalLoadsTableForGait(*args):
    r"""
    createExternalLoadsTableForGait(Model model, StatesTrajectory trajectory, StdVectorString forcePathsRightFoot, StdVectorString forcePathsLeftFoot) -> TimeSeriesTable

    Parameters
    ----------
    model: OpenSim::Model
    trajectory: OpenSim::StatesTrajectory const &
    forcePathsRightFoot: std::vector< std::string,std::allocator< std::string > > const &
    forcePathsLeftFoot: std::vector< std::string,std::allocator< std::string > > const &

    createExternalLoadsTableForGait(Model model, MocoTrajectory trajectory, StdVectorString forcePathsRightFoot, StdVectorString forcePathsLeftFoot) -> TimeSeriesTable

    Parameters
    ----------
    model: OpenSim::Model
    trajectory: OpenSim::MocoTrajectory const &
    forcePathsRightFoot: std::vector< std::string,std::allocator< std::string > > const &
    forcePathsLeftFoot: std::vector< std::string,std::allocator< std::string > > const &

    """
    return _moco.createExternalLoadsTableForGait(*args)

def analyzeMocoTrajectory(model, statesTable, controlsTable, outputPaths):
    r"""
    analyzeMocoTrajectory(Model model, TimeSeriesTable statesTable, TimeSeriesTable controlsTable, StdVectorString outputPaths) -> TimeSeriesTable

    Parameters
    ----------
    model: OpenSim::Model
    statesTable: OpenSim::TimeSeriesTable const &
    controlsTable: OpenSim::TimeSeriesTable const &
    outputPaths: std::vector< std::string,std::allocator< std::string > > const &

    """
    return _moco.analyzeMocoTrajectory(model, statesTable, controlsTable, outputPaths)

def analyzeMocoTrajectoryVec3(model, statesTable, controlsTable, outputPaths):
    r"""
    analyzeMocoTrajectoryVec3(Model model, TimeSeriesTable statesTable, TimeSeriesTable controlsTable, StdVectorString outputPaths) -> TimeSeriesTableVec3

    Parameters
    ----------
    model: OpenSim::Model
    statesTable: OpenSim::TimeSeriesTable const &
    controlsTable: OpenSim::TimeSeriesTable const &
    outputPaths: std::vector< std::string,std::allocator< std::string > > const &

    """
    return _moco.analyzeMocoTrajectoryVec3(model, statesTable, controlsTable, outputPaths)

def analyzeMocoTrajectorySpatialVec(model, statesTable, controlsTable, outputPaths):
    r"""
    analyzeMocoTrajectorySpatialVec(Model model, TimeSeriesTable statesTable, TimeSeriesTable controlsTable, StdVectorString outputPaths) -> TimeSeriesTableSpatialVec

    Parameters
    ----------
    model: OpenSim::Model
    statesTable: OpenSim::TimeSeriesTable const &
    controlsTable: OpenSim::TimeSeriesTable const &
    outputPaths: std::vector< std::string,std::allocator< std::string > > const &

    """
    return _moco.analyzeMocoTrajectorySpatialVec(model, statesTable, controlsTable, outputPaths)
class ModOpReplaceMusclesWithDeGrooteFregly2016(opensim.actuators.ModelOperator):
    r"""Proxy of C++ OpenSim::ModOpReplaceMusclesWithDeGrooteFregly2016 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def safeDownCast(obj):
        r"""
        safeDownCast(OpenSimObject obj) -> ModOpReplaceMusclesWithDeGrooteFregly2016

        Parameters
        ----------
        obj: OpenSim::Object *

        """
        return _moco.ModOpReplaceMusclesWithDeGrooteFregly2016_safeDownCast(obj)

    def assign(self, aObject):
        r"""
        assign(ModOpReplaceMusclesWithDeGrooteFregly2016 self, OpenSimObject aObject)

        Parameters
        ----------
        aObject: OpenSim::Object &

        """
        return _moco.ModOpReplaceMusclesWithDeGrooteFregly2016_assign(self, aObject)

    @staticmethod
    def getClassName():
        r"""getClassName() -> std::string const &"""
        return _moco.ModOpReplaceMusclesWithDeGrooteFregly2016_getClassName()

    def clone(self):
        r"""clone(ModOpReplaceMusclesWithDeGrooteFregly2016 self) -> ModOpReplaceMusclesWithDeGrooteFregly2016"""
        return _moco.ModOpReplaceMusclesWithDeGrooteFregly2016_clone(self)

    def getConcreteClassName(self):
        r"""getConcreteClassName(ModOpReplaceMusclesWithDeGrooteFregly2016 self) -> std::string const &"""
        return _moco.ModOpReplaceMusclesWithDeGrooteFregly2016_getConcreteClassName(self)

    def operate(self, model, arg3):
        r"""
        operate(ModOpReplaceMusclesWithDeGrooteFregly2016 self, Model model, std::string const & arg3)

        Parameters
        ----------
        model: OpenSim::Model &
        arg3: std::string const &

        """
        return _moco.ModOpReplaceMusclesWithDeGrooteFregly2016_operate(self, model, arg3)

    def __init__(self):
        r"""__init__(ModOpReplaceMusclesWithDeGrooteFregly2016 self) -> ModOpReplaceMusclesWithDeGrooteFregly2016"""
        _moco.ModOpReplaceMusclesWithDeGrooteFregly2016_swiginit(self, _moco.new_ModOpReplaceMusclesWithDeGrooteFregly2016())
    __swig_destroy__ = _moco.delete_ModOpReplaceMusclesWithDeGrooteFregly2016

# Register ModOpReplaceMusclesWithDeGrooteFregly2016 in _moco:
_moco.ModOpReplaceMusclesWithDeGrooteFregly2016_swigregister(ModOpReplaceMusclesWithDeGrooteFregly2016)

def ModOpReplaceMusclesWithDeGrooteFregly2016_safeDownCast(obj):
    r"""
    ModOpReplaceMusclesWithDeGrooteFregly2016_safeDownCast(OpenSimObject obj) -> ModOpReplaceMusclesWithDeGrooteFregly2016

    Parameters
    ----------
    obj: OpenSim::Object *

    """
    return _moco.ModOpReplaceMusclesWithDeGrooteFregly2016_safeDownCast(obj)

def ModOpReplaceMusclesWithDeGrooteFregly2016_getClassName():
    r"""ModOpReplaceMusclesWithDeGrooteFregly2016_getClassName() -> std::string const &"""
    return _moco.ModOpReplaceMusclesWithDeGrooteFregly2016_getClassName()

class ModOpTendonComplianceDynamicsModeDGF(opensim.actuators.ModelOperator):
    r"""Proxy of C++ OpenSim::ModOpTendonComplianceDynamicsModeDGF class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def safeDownCast(obj):
        r"""
        safeDownCast(OpenSimObject obj) -> ModOpTendonComplianceDynamicsModeDGF

        Parameters
        ----------
        obj: OpenSim::Object *

        """
        return _moco.ModOpTendonComplianceDynamicsModeDGF_safeDownCast(obj)

    def assign(self, aObject):
        r"""
        assign(ModOpTendonComplianceDynamicsModeDGF self, OpenSimObject aObject)

        Parameters
        ----------
        aObject: OpenSim::Object &

        """
        return _moco.ModOpTendonComplianceDynamicsModeDGF_assign(self, aObject)

    @staticmethod
    def getClassName():
        r"""getClassName() -> std::string const &"""
        return _moco.ModOpTendonComplianceDynamicsModeDGF_getClassName()

    def clone(self):
        r"""clone(ModOpTendonComplianceDynamicsModeDGF self) -> ModOpTendonComplianceDynamicsModeDGF"""
        return _moco.ModOpTendonComplianceDynamicsModeDGF_clone(self)

    def getConcreteClassName(self):
        r"""getConcreteClassName(ModOpTendonComplianceDynamicsModeDGF self) -> std::string const &"""
        return _moco.ModOpTendonComplianceDynamicsModeDGF_getConcreteClassName(self)

    def __init__(self, *args):
        r"""
        __init__(ModOpTendonComplianceDynamicsModeDGF self) -> ModOpTendonComplianceDynamicsModeDGF
        __init__(ModOpTendonComplianceDynamicsModeDGF self, std::string mode) -> ModOpTendonComplianceDynamicsModeDGF

        Parameters
        ----------
        mode: std::string

        """
        _moco.ModOpTendonComplianceDynamicsModeDGF_swiginit(self, _moco.new_ModOpTendonComplianceDynamicsModeDGF(*args))

    def operate(self, model, arg3):
        r"""
        operate(ModOpTendonComplianceDynamicsModeDGF self, Model model, std::string const & arg3)

        Parameters
        ----------
        model: OpenSim::Model &
        arg3: std::string const &

        """
        return _moco.ModOpTendonComplianceDynamicsModeDGF_operate(self, model, arg3)
    __swig_destroy__ = _moco.delete_ModOpTendonComplianceDynamicsModeDGF

# Register ModOpTendonComplianceDynamicsModeDGF in _moco:
_moco.ModOpTendonComplianceDynamicsModeDGF_swigregister(ModOpTendonComplianceDynamicsModeDGF)

def ModOpTendonComplianceDynamicsModeDGF_safeDownCast(obj):
    r"""
    ModOpTendonComplianceDynamicsModeDGF_safeDownCast(OpenSimObject obj) -> ModOpTendonComplianceDynamicsModeDGF

    Parameters
    ----------
    obj: OpenSim::Object *

    """
    return _moco.ModOpTendonComplianceDynamicsModeDGF_safeDownCast(obj)

def ModOpTendonComplianceDynamicsModeDGF_getClassName():
    r"""ModOpTendonComplianceDynamicsModeDGF_getClassName() -> std::string const &"""
    return _moco.ModOpTendonComplianceDynamicsModeDGF_getClassName()

class ModOpUseImplicitTendonComplianceDynamicsDGF(opensim.actuators.ModelOperator):
    r"""Proxy of C++ OpenSim::ModOpUseImplicitTendonComplianceDynamicsDGF class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def safeDownCast(obj):
        r"""
        safeDownCast(OpenSimObject obj) -> ModOpUseImplicitTendonComplianceDynamicsDGF

        Parameters
        ----------
        obj: OpenSim::Object *

        """
        return _moco.ModOpUseImplicitTendonComplianceDynamicsDGF_safeDownCast(obj)

    def assign(self, aObject):
        r"""
        assign(ModOpUseImplicitTendonComplianceDynamicsDGF self, OpenSimObject aObject)

        Parameters
        ----------
        aObject: OpenSim::Object &

        """
        return _moco.ModOpUseImplicitTendonComplianceDynamicsDGF_assign(self, aObject)

    @staticmethod
    def getClassName():
        r"""getClassName() -> std::string const &"""
        return _moco.ModOpUseImplicitTendonComplianceDynamicsDGF_getClassName()

    def clone(self):
        r"""clone(ModOpUseImplicitTendonComplianceDynamicsDGF self) -> ModOpUseImplicitTendonComplianceDynamicsDGF"""
        return _moco.ModOpUseImplicitTendonComplianceDynamicsDGF_clone(self)

    def getConcreteClassName(self):
        r"""getConcreteClassName(ModOpUseImplicitTendonComplianceDynamicsDGF self) -> std::string const &"""
        return _moco.ModOpUseImplicitTendonComplianceDynamicsDGF_getConcreteClassName(self)

    def operate(self, model, arg3):
        r"""
        operate(ModOpUseImplicitTendonComplianceDynamicsDGF self, Model model, std::string const & arg3)

        Parameters
        ----------
        model: OpenSim::Model &
        arg3: std::string const &

        """
        return _moco.ModOpUseImplicitTendonComplianceDynamicsDGF_operate(self, model, arg3)

    def __init__(self):
        r"""__init__(ModOpUseImplicitTendonComplianceDynamicsDGF self) -> ModOpUseImplicitTendonComplianceDynamicsDGF"""
        _moco.ModOpUseImplicitTendonComplianceDynamicsDGF_swiginit(self, _moco.new_ModOpUseImplicitTendonComplianceDynamicsDGF())
    __swig_destroy__ = _moco.delete_ModOpUseImplicitTendonComplianceDynamicsDGF

# Register ModOpUseImplicitTendonComplianceDynamicsDGF in _moco:
_moco.ModOpUseImplicitTendonComplianceDynamicsDGF_swigregister(ModOpUseImplicitTendonComplianceDynamicsDGF)

def ModOpUseImplicitTendonComplianceDynamicsDGF_safeDownCast(obj):
    r"""
    ModOpUseImplicitTendonComplianceDynamicsDGF_safeDownCast(OpenSimObject obj) -> ModOpUseImplicitTendonComplianceDynamicsDGF

    Parameters
    ----------
    obj: OpenSim::Object *

    """
    return _moco.ModOpUseImplicitTendonComplianceDynamicsDGF_safeDownCast(obj)

def ModOpUseImplicitTendonComplianceDynamicsDGF_getClassName():
    r"""ModOpUseImplicitTendonComplianceDynamicsDGF_getClassName() -> std::string const &"""
    return _moco.ModOpUseImplicitTendonComplianceDynamicsDGF_getClassName()

class ModOpIgnorePassiveFiberForcesDGF(opensim.actuators.ModelOperator):
    r"""Proxy of C++ OpenSim::ModOpIgnorePassiveFiberForcesDGF class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def safeDownCast(obj):
        r"""
        safeDownCast(OpenSimObject obj) -> ModOpIgnorePassiveFiberForcesDGF

        Parameters
        ----------
        obj: OpenSim::Object *

        """
        return _moco.ModOpIgnorePassiveFiberForcesDGF_safeDownCast(obj)

    def assign(self, aObject):
        r"""
        assign(ModOpIgnorePassiveFiberForcesDGF self, OpenSimObject aObject)

        Parameters
        ----------
        aObject: OpenSim::Object &

        """
        return _moco.ModOpIgnorePassiveFiberForcesDGF_assign(self, aObject)

    @staticmethod
    def getClassName():
        r"""getClassName() -> std::string const &"""
        return _moco.ModOpIgnorePassiveFiberForcesDGF_getClassName()

    def clone(self):
        r"""clone(ModOpIgnorePassiveFiberForcesDGF self) -> ModOpIgnorePassiveFiberForcesDGF"""
        return _moco.ModOpIgnorePassiveFiberForcesDGF_clone(self)

    def getConcreteClassName(self):
        r"""getConcreteClassName(ModOpIgnorePassiveFiberForcesDGF self) -> std::string const &"""
        return _moco.ModOpIgnorePassiveFiberForcesDGF_getConcreteClassName(self)

    def operate(self, model, arg3):
        r"""
        operate(ModOpIgnorePassiveFiberForcesDGF self, Model model, std::string const & arg3)

        Parameters
        ----------
        model: OpenSim::Model &
        arg3: std::string const &

        """
        return _moco.ModOpIgnorePassiveFiberForcesDGF_operate(self, model, arg3)

    def __init__(self):
        r"""__init__(ModOpIgnorePassiveFiberForcesDGF self) -> ModOpIgnorePassiveFiberForcesDGF"""
        _moco.ModOpIgnorePassiveFiberForcesDGF_swiginit(self, _moco.new_ModOpIgnorePassiveFiberForcesDGF())
    __swig_destroy__ = _moco.delete_ModOpIgnorePassiveFiberForcesDGF

# Register ModOpIgnorePassiveFiberForcesDGF in _moco:
_moco.ModOpIgnorePassiveFiberForcesDGF_swigregister(ModOpIgnorePassiveFiberForcesDGF)

def ModOpIgnorePassiveFiberForcesDGF_safeDownCast(obj):
    r"""
    ModOpIgnorePassiveFiberForcesDGF_safeDownCast(OpenSimObject obj) -> ModOpIgnorePassiveFiberForcesDGF

    Parameters
    ----------
    obj: OpenSim::Object *

    """
    return _moco.ModOpIgnorePassiveFiberForcesDGF_safeDownCast(obj)

def ModOpIgnorePassiveFiberForcesDGF_getClassName():
    r"""ModOpIgnorePassiveFiberForcesDGF_getClassName() -> std::string const &"""
    return _moco.ModOpIgnorePassiveFiberForcesDGF_getClassName()

class ModOpPassiveFiberStrainAtOneNormForceDGF(opensim.actuators.ModelOperator):
    r"""Proxy of C++ OpenSim::ModOpPassiveFiberStrainAtOneNormForceDGF class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def safeDownCast(obj):
        r"""
        safeDownCast(OpenSimObject obj) -> ModOpPassiveFiberStrainAtOneNormForceDGF

        Parameters
        ----------
        obj: OpenSim::Object *

        """
        return _moco.ModOpPassiveFiberStrainAtOneNormForceDGF_safeDownCast(obj)

    def assign(self, aObject):
        r"""
        assign(ModOpPassiveFiberStrainAtOneNormForceDGF self, OpenSimObject aObject)

        Parameters
        ----------
        aObject: OpenSim::Object &

        """
        return _moco.ModOpPassiveFiberStrainAtOneNormForceDGF_assign(self, aObject)

    @staticmethod
    def getClassName():
        r"""getClassName() -> std::string const &"""
        return _moco.ModOpPassiveFiberStrainAtOneNormForceDGF_getClassName()

    def clone(self):
        r"""clone(ModOpPassiveFiberStrainAtOneNormForceDGF self) -> ModOpPassiveFiberStrainAtOneNormForceDGF"""
        return _moco.ModOpPassiveFiberStrainAtOneNormForceDGF_clone(self)

    def getConcreteClassName(self):
        r"""getConcreteClassName(ModOpPassiveFiberStrainAtOneNormForceDGF self) -> std::string const &"""
        return _moco.ModOpPassiveFiberStrainAtOneNormForceDGF_getConcreteClassName(self)

    def __init__(self, *args):
        r"""
        __init__(ModOpPassiveFiberStrainAtOneNormForceDGF self) -> ModOpPassiveFiberStrainAtOneNormForceDGF
        __init__(ModOpPassiveFiberStrainAtOneNormForceDGF self, double value) -> ModOpPassiveFiberStrainAtOneNormForceDGF

        Parameters
        ----------
        value: double

        """
        _moco.ModOpPassiveFiberStrainAtOneNormForceDGF_swiginit(self, _moco.new_ModOpPassiveFiberStrainAtOneNormForceDGF(*args))

    def operate(self, model, arg3):
        r"""
        operate(ModOpPassiveFiberStrainAtOneNormForceDGF self, Model model, std::string const & arg3)

        Parameters
        ----------
        model: OpenSim::Model &
        arg3: std::string const &

        """
        return _moco.ModOpPassiveFiberStrainAtOneNormForceDGF_operate(self, model, arg3)
    __swig_destroy__ = _moco.delete_ModOpPassiveFiberStrainAtOneNormForceDGF

# Register ModOpPassiveFiberStrainAtOneNormForceDGF in _moco:
_moco.ModOpPassiveFiberStrainAtOneNormForceDGF_swigregister(ModOpPassiveFiberStrainAtOneNormForceDGF)

def ModOpPassiveFiberStrainAtOneNormForceDGF_safeDownCast(obj):
    r"""
    ModOpPassiveFiberStrainAtOneNormForceDGF_safeDownCast(OpenSimObject obj) -> ModOpPassiveFiberStrainAtOneNormForceDGF

    Parameters
    ----------
    obj: OpenSim::Object *

    """
    return _moco.ModOpPassiveFiberStrainAtOneNormForceDGF_safeDownCast(obj)

def ModOpPassiveFiberStrainAtOneNormForceDGF_getClassName():
    r"""ModOpPassiveFiberStrainAtOneNormForceDGF_getClassName() -> std::string const &"""
    return _moco.ModOpPassiveFiberStrainAtOneNormForceDGF_getClassName()

class ModOpScaleActiveFiberForceCurveWidthDGF(opensim.actuators.ModelOperator):
    r"""Proxy of C++ OpenSim::ModOpScaleActiveFiberForceCurveWidthDGF class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def safeDownCast(obj):
        r"""
        safeDownCast(OpenSimObject obj) -> ModOpScaleActiveFiberForceCurveWidthDGF

        Parameters
        ----------
        obj: OpenSim::Object *

        """
        return _moco.ModOpScaleActiveFiberForceCurveWidthDGF_safeDownCast(obj)

    def assign(self, aObject):
        r"""
        assign(ModOpScaleActiveFiberForceCurveWidthDGF self, OpenSimObject aObject)

        Parameters
        ----------
        aObject: OpenSim::Object &

        """
        return _moco.ModOpScaleActiveFiberForceCurveWidthDGF_assign(self, aObject)

    @staticmethod
    def getClassName():
        r"""getClassName() -> std::string const &"""
        return _moco.ModOpScaleActiveFiberForceCurveWidthDGF_getClassName()

    def clone(self):
        r"""clone(ModOpScaleActiveFiberForceCurveWidthDGF self) -> ModOpScaleActiveFiberForceCurveWidthDGF"""
        return _moco.ModOpScaleActiveFiberForceCurveWidthDGF_clone(self)

    def getConcreteClassName(self):
        r"""getConcreteClassName(ModOpScaleActiveFiberForceCurveWidthDGF self) -> std::string const &"""
        return _moco.ModOpScaleActiveFiberForceCurveWidthDGF_getConcreteClassName(self)

    def __init__(self, *args):
        r"""
        __init__(ModOpScaleActiveFiberForceCurveWidthDGF self) -> ModOpScaleActiveFiberForceCurveWidthDGF
        __init__(ModOpScaleActiveFiberForceCurveWidthDGF self, double scaleFactor) -> ModOpScaleActiveFiberForceCurveWidthDGF

        Parameters
        ----------
        scaleFactor: double

        """
        _moco.ModOpScaleActiveFiberForceCurveWidthDGF_swiginit(self, _moco.new_ModOpScaleActiveFiberForceCurveWidthDGF(*args))

    def operate(self, model, arg3):
        r"""
        operate(ModOpScaleActiveFiberForceCurveWidthDGF self, Model model, std::string const & arg3)

        Parameters
        ----------
        model: OpenSim::Model &
        arg3: std::string const &

        """
        return _moco.ModOpScaleActiveFiberForceCurveWidthDGF_operate(self, model, arg3)
    __swig_destroy__ = _moco.delete_ModOpScaleActiveFiberForceCurveWidthDGF

# Register ModOpScaleActiveFiberForceCurveWidthDGF in _moco:
_moco.ModOpScaleActiveFiberForceCurveWidthDGF_swigregister(ModOpScaleActiveFiberForceCurveWidthDGF)

def ModOpScaleActiveFiberForceCurveWidthDGF_safeDownCast(obj):
    r"""
    ModOpScaleActiveFiberForceCurveWidthDGF_safeDownCast(OpenSimObject obj) -> ModOpScaleActiveFiberForceCurveWidthDGF

    Parameters
    ----------
    obj: OpenSim::Object *

    """
    return _moco.ModOpScaleActiveFiberForceCurveWidthDGF_safeDownCast(obj)

def ModOpScaleActiveFiberForceCurveWidthDGF_getClassName():
    r"""ModOpScaleActiveFiberForceCurveWidthDGF_getClassName() -> std::string const &"""
    return _moco.ModOpScaleActiveFiberForceCurveWidthDGF_getClassName()

class ModOpFiberDampingDGF(opensim.actuators.ModelOperator):
    r"""Proxy of C++ OpenSim::ModOpFiberDampingDGF class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def safeDownCast(obj):
        r"""
        safeDownCast(OpenSimObject obj) -> ModOpFiberDampingDGF

        Parameters
        ----------
        obj: OpenSim::Object *

        """
        return _moco.ModOpFiberDampingDGF_safeDownCast(obj)

    def assign(self, aObject):
        r"""
        assign(ModOpFiberDampingDGF self, OpenSimObject aObject)

        Parameters
        ----------
        aObject: OpenSim::Object &

        """
        return _moco.ModOpFiberDampingDGF_assign(self, aObject)

    @staticmethod
    def getClassName():
        r"""getClassName() -> std::string const &"""
        return _moco.ModOpFiberDampingDGF_getClassName()

    def clone(self):
        r"""clone(ModOpFiberDampingDGF self) -> ModOpFiberDampingDGF"""
        return _moco.ModOpFiberDampingDGF_clone(self)

    def getConcreteClassName(self):
        r"""getConcreteClassName(ModOpFiberDampingDGF self) -> std::string const &"""
        return _moco.ModOpFiberDampingDGF_getConcreteClassName(self)

    def __init__(self, *args):
        r"""
        __init__(ModOpFiberDampingDGF self) -> ModOpFiberDampingDGF
        __init__(ModOpFiberDampingDGF self, double fiberDamping) -> ModOpFiberDampingDGF

        Parameters
        ----------
        fiberDamping: double

        """
        _moco.ModOpFiberDampingDGF_swiginit(self, _moco.new_ModOpFiberDampingDGF(*args))

    def operate(self, model, arg3):
        r"""
        operate(ModOpFiberDampingDGF self, Model model, std::string const & arg3)

        Parameters
        ----------
        model: OpenSim::Model &
        arg3: std::string const &

        """
        return _moco.ModOpFiberDampingDGF_operate(self, model, arg3)
    __swig_destroy__ = _moco.delete_ModOpFiberDampingDGF

# Register ModOpFiberDampingDGF in _moco:
_moco.ModOpFiberDampingDGF_swigregister(ModOpFiberDampingDGF)

def ModOpFiberDampingDGF_safeDownCast(obj):
    r"""
    ModOpFiberDampingDGF_safeDownCast(OpenSimObject obj) -> ModOpFiberDampingDGF

    Parameters
    ----------
    obj: OpenSim::Object *

    """
    return _moco.ModOpFiberDampingDGF_safeDownCast(obj)

def ModOpFiberDampingDGF_getClassName():
    r"""ModOpFiberDampingDGF_getClassName() -> std::string const &"""
    return _moco.ModOpFiberDampingDGF_getClassName()



